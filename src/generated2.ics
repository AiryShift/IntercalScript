#import {slice, len} from "std:strings"
#import {wordset} from "tokenize"
#import {StringFormat} from "esnames2"
ALIASES = new-map([("MUT", "ID"), ("IN", "ID"), ("THEN", "ID"), ("ELSE", "ID"), ("FROM", "ID"), ("IMPORT", "ID"), ("LANGUAGE", "ID"), ("UNSAFE", "ID"), ("FUTURE", "ID"), ("-", "BINOP")]);
parse = funct(tokens, fname)
    tokens = new-list-mut(map(tokens, funct(tok)
        let {type, val, span} = tok;
        nt = ALIASES.get(type);
        if nt != _ then
            {type: nt, val, span}
        else
            tok
        end
    end));
(* rule 0 expr exprns *)
(* rule 1 expr expr ; exprns *)
(* rule 2 expr_list  *)
(* rule 3 expr_list expr *)
(* rule 4 expr_list expr , expr_list *)
(* rule 5 id ID *)
(* rule 6 id WHILE *)
(* rule 7 id FOR *)
(* rule 8 id END *)
(* rule 9 exprns id *)
(* rule 10 exprns string *)
(* rule 11 exprns exprns BINOP exprns *)
(* rule 12 exprns ! exprns *)
(* rule 13 exprns DO UNSAFE expr END *)
(* rule 14 exprns letpat = poly_opt exprns *)
(* rule 15 exprns LET varpat FUTURE = exprns *)
(* rule 16 exprns exprns . phantom_id = exprns *)
(* rule 17 exprns exprns field_sub *)
(* rule 18 exprns exprns ( expr_list ) *)
(* rule 19 exprns objlit *)
(* rule 20 exprns CASE id objlit *)
(* rule 21 exprns [ restexpr_list ] *)
(* rule 22 exprns JS *)
(* rule 23 exprns IF expr THEN expr elseb_opt END *)
(* rule 24 exprns DO WHILE expr THEN expr END *)
(* rule 25 exprns DO FOR letpat IN expr THEN expr END *)
(* rule 26 exprns FUNCT unsafe_opt thisp_opt ( param_list ) expr END *)
(* rule 27 string STRING *)
(* rule 28 phantom_id id *)
(* rule 29 phantom_id PHANTOM_ID *)
(* rule 30 varpat id *)
(* rule 31 objpat ( pattern_list ) *)
(* rule 32 objpat { keypat_list } *)
(* rule 33 keypat phantom_id : pattern *)
(* rule 34 keypat id *)
(* rule 35 keypat_list  *)
(* rule 36 keypat_list keypat *)
(* rule 37 keypat_list keypat , keypat_list *)
(* rule 38 pattern CASE id objpat *)
(* rule 39 pattern varpat *)
(* rule 40 pattern objpat *)
(* rule 41 pattern_list  *)
(* rule 42 pattern_list pattern *)
(* rule 43 pattern_list pattern , pattern_list *)
(* rule 44 letpat varpat *)
(* rule 45 letpat LET pattern *)
(* rule 46 poly_opt POLY *)
(* rule 47 poly_opt  *)
(* rule 48 field_sub . phantom_id *)
(* rule 49 objlit ( expr_list ) *)
(* rule 50 objlit { keyval_list } *)
(* rule 51 mut_opt MUT *)
(* rule 52 mut_opt  *)
(* rule 53 keyval phantom_id mut_opt : expr *)
(* rule 54 keyval id *)
(* rule 55 keyval_list  *)
(* rule 56 keyval_list keyval *)
(* rule 57 keyval_list keyval , keyval_list *)
(* rule 58 spread_opt  *)
(* rule 59 spread_opt . . . *)
(* rule 60 restexpr spread_opt expr *)
(* rule 61 restexpr_list  *)
(* rule 62 restexpr_list restexpr *)
(* rule 63 restexpr_list restexpr , restexpr_list *)
(* rule 64 elseb_opt ELSE expr *)
(* rule 65 elseb_opt  *)
(* rule 66 param id *)
(* rule 67 param_list  *)
(* rule 68 param_list param *)
(* rule 69 param_list param , param_list *)
(* rule 70 unsafe_opt  *)
(* rule 71 unsafe_opt [ UNSAFE ] *)
(* rule 72 thisp_opt  *)
(* rule 73 thisp_opt param *)
(* rule 74 importitem id : id *)
(* rule 75 importitem id *)
(* rule 76 importitem_list  *)
(* rule 77 importitem_list importitem *)
(* rule 78 importitem_list importitem , importitem_list *)
(* rule 79 importpat { importitem_list } *)
(* rule 80 importrhs string *)
(* rule 81 importrhs JS *)
(* rule 82 pragma {- # LANGUAGE id # -} *)
(* rule 83 pragma_list  *)
(* rule 84 pragma_list pragma pragma_list *)
(* rule 85 import # IMPORT importpat FROM importrhs *)
(* rule 86 import_list  *)
(* rule 87 import_list import import_list *)
(* rule 88 hack pragma_list import_list expr *)
(* rule 89 module hack *)
UnexpectedTokenError = funct(tok, debug)
  case Err(tok.span.print("SyntaxError: Unexpected token " +' tok.type) +' NL +' "    " +' debug)
end;
161-82-4 = funct(cbs, p5, p6, end-) cbs.82-4(p5, p6, end-) end;
new-cbs-161-162 = funct(cbs, val, start) {
  82-5: funct(p5, end-) 161-82-4(cbs, val, p5, end-) end,
} end;
162-82-5 = funct(cbs, p6, end-) cbs.82-5(p6, end-) end;
new-cbs-162-163 = funct(cbs, val, start) {
  82-6: funct(end-) 162-82-5(cbs, val, end-) end,
} end;
UnexpectedEOFError = funct(debug)
  case Err("SyntaxError: Unexpected end of file when parsing " +' fname +' NL +' "    " +' debug)
end;
get-token = funct() tokens.last() end;
state163 = funct(cbs)
  tok = get-token();
  debug = "state163:
pragma := {- # LANGUAGE id # -} %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.82-6(tok.span.start())
  end
end;
state162 = funct(cbs)
  tok = get-token();
  debug = "state162:
pragma := {- # LANGUAGE id # % -}";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "-}" then
    tokens.pop();
    state163(new-cbs-162-163(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end
end;
state161 = funct(cbs)
  tok = get-token();
  debug = "state161:
pragma := {- # LANGUAGE id % # -}";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "#" then
    tokens.pop();
    state162(new-cbs-161-162(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end
end;
state157 = funct(cbs)
  tok = get-token();
  debug = "state157:
pragma_list := pragma pragma_list %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.84-2(tok.span.start())
  end
end;
156-84-1 = funct(cbs, p2, end-) cbs.84-1(p2, end-) end;
new-cbs-156-157 = funct(cbs, val, start) {
  84-2: funct(end-) 156-84-1(cbs, val, end-) end,
} end;
rule83 = funct(span) eml() end;
156-83-0 = funct(cbs, start, end-)
  span = start.merge(end-);
  val = rule83(span);
  case Thunk(case State157(new-cbs-156-157(cbs, val, start)))
end;
rule84 = funct(p1, p2, span) (p2.unshift(p1); p2).0 end;
156-84-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule84(p1, p2, span);
  case Thunk(case State157(new-cbs-156-157(cbs, val, start)))
end;
new-cbs-156-156 = funct(cbs, val, start) {
  84-1: funct(p1, end-) 156-84-0(cbs, val, p1, start, end-) end,
} end;
rule82 = funct(p1, p2, p3, p4, p5, p6, span) p4 end;
156-82-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule82(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State156(new-cbs-156-156(cbs, val, start)))
end;
new-cbs-156-158 = funct(cbs, val, start) {
  82-1: funct(p1, p2, p3, p4, p5, end-) 156-82-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
} end;
158-82-1 = funct(cbs, p2, p3, p4, p5, p6, end-) cbs.82-1(p2, p3, p4, p5, p6, end-) end;
new-cbs-158-159 = funct(cbs, val, start) {
  82-2: funct(p2, p3, p4, p5, end-) 158-82-1(cbs, val, p2, p3, p4, p5, end-) end,
} end;
159-82-2 = funct(cbs, p3, p4, p5, p6, end-) cbs.82-2(p3, p4, p5, p6, end-) end;
new-cbs-159-160 = funct(cbs, val, start) {
  82-3: funct(p3, p4, p5, end-) 159-82-2(cbs, val, p3, p4, p5, end-) end,
} end;
160-82-3 = funct(cbs, p4, p5, p6, end-) cbs.82-3(p4, p5, p6, end-) end;
new-cbs-160-161 = funct(cbs, val, start) {
  82-4: funct(p4, p5, end-) 160-82-3(cbs, val, p4, p5, end-) end,
} end;
rule5 = funct(p1, span) p1.val end;
160-5-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule5(p1, span);
  case Thunk(case State161(new-cbs-160-161(cbs, val, start)))
end;
new-cbs-160-65 = funct(cbs, val, start) {
  5-1: funct(end-) 160-5-0(cbs, val, start, end-) end,
} end;
state65 = funct(cbs)
  tok = get-token();
  debug = "state65:
id := ID %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.5-1(tok.span.start())
  end
end;
rule6 = funct(p1, span) p1.val end;
160-6-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule6(p1, span);
  case Thunk(case State161(new-cbs-160-161(cbs, val, start)))
end;
new-cbs-160-64 = funct(cbs, val, start) {
  6-1: funct(end-) 160-6-0(cbs, val, start, end-) end,
} end;
state64 = funct(cbs)
  tok = get-token();
  debug = "state64:
id := WHILE %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.6-1(tok.span.start())
  end
end;
rule7 = funct(p1, span) p1.val end;
160-7-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule7(p1, span);
  case Thunk(case State161(new-cbs-160-161(cbs, val, start)))
end;
new-cbs-160-63 = funct(cbs, val, start) {
  7-1: funct(end-) 160-7-0(cbs, val, start, end-) end,
} end;
state63 = funct(cbs)
  tok = get-token();
  debug = "state63:
id := FOR %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.7-1(tok.span.start())
  end
end;
rule8 = funct(p1, span) p1.val end;
160-8-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule8(p1, span);
  case Thunk(case State161(new-cbs-160-161(cbs, val, start)))
end;
new-cbs-160-62 = funct(cbs, val, start) {
  8-1: funct(end-) 160-8-0(cbs, val, start, end-) end,
} end;
state62 = funct(cbs)
  tok = get-token();
  debug = "state62:
id := END %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.8-1(tok.span.start())
  end
end;
state160 = funct(cbs)
  tok = get-token();
  debug = "state160:
pragma := {- # LANGUAGE % id # -}
id := % END
id := % FOR
id := % WHILE
id := % ID";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "END" then
    tokens.pop();
    state62(new-cbs-160-62(cbs, tok, tok.span))
  else if tok.type == "FOR" then
    tokens.pop();
    state63(new-cbs-160-63(cbs, tok, tok.span))
  else if tok.type == "WHILE" then
    tokens.pop();
    state64(new-cbs-160-64(cbs, tok, tok.span))
  else if tok.type == "ID" then
    tokens.pop();
    state65(new-cbs-160-65(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end end end end
end;
state159 = funct(cbs)
  tok = get-token();
  debug = "state159:
pragma := {- # % LANGUAGE id # -}";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "ID" && (tok.val == "language").0 then
    tokens.pop();
    state160(new-cbs-159-160(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end
end;
state158 = funct(cbs)
  tok = get-token();
  debug = "state158:
pragma := {- % # LANGUAGE id # -}";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "#" then
    tokens.pop();
    state159(new-cbs-158-159(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end
end;
state156 = funct(cbs)
  tok = get-token();
  debug = "state156:
pragma_list := pragma % pragma_list
pragma_list := % pragma pragma_list
pragma := % {- # LANGUAGE id # -}
pragma_list := %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "{-" then
    tokens.pop();
    state158(new-cbs-156-158(cbs, tok, tok.span))
  else
    span = tok.span.start();
    156-83-0(cbs, span, span)
  end end
end;
state155 = funct(cbs)
  tok = get-token();
  debug = "state155:
importitem := id : id %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.74-3(tok.span.start())
  end
end;
153-74-1 = funct(cbs, p2, p3, end-) cbs.74-1(p2, p3, end-) end;
new-cbs-153-154 = funct(cbs, val, start) {
  74-2: funct(p2, end-) 153-74-1(cbs, val, p2, end-) end,
} end;
154-74-2 = funct(cbs, p3, end-) cbs.74-2(p3, end-) end;
new-cbs-154-155 = funct(cbs, val, start) {
  74-3: funct(end-) 154-74-2(cbs, val, end-) end,
} end;
154-5-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule5(p1, span);
  case Thunk(case State155(new-cbs-154-155(cbs, val, start)))
end;
new-cbs-154-65 = funct(cbs, val, start) {
  5-1: funct(end-) 154-5-0(cbs, val, start, end-) end,
} end;
154-6-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule6(p1, span);
  case Thunk(case State155(new-cbs-154-155(cbs, val, start)))
end;
new-cbs-154-64 = funct(cbs, val, start) {
  6-1: funct(end-) 154-6-0(cbs, val, start, end-) end,
} end;
154-7-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule7(p1, span);
  case Thunk(case State155(new-cbs-154-155(cbs, val, start)))
end;
new-cbs-154-63 = funct(cbs, val, start) {
  7-1: funct(end-) 154-7-0(cbs, val, start, end-) end,
} end;
154-8-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule8(p1, span);
  case Thunk(case State155(new-cbs-154-155(cbs, val, start)))
end;
new-cbs-154-62 = funct(cbs, val, start) {
  8-1: funct(end-) 154-8-0(cbs, val, start, end-) end,
} end;
state154 = funct(cbs)
  tok = get-token();
  debug = "state154:
importitem := id : % id
id := % END
id := % FOR
id := % WHILE
id := % ID";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "END" then
    tokens.pop();
    state62(new-cbs-154-62(cbs, tok, tok.span))
  else if tok.type == "FOR" then
    tokens.pop();
    state63(new-cbs-154-63(cbs, tok, tok.span))
  else if tok.type == "WHILE" then
    tokens.pop();
    state64(new-cbs-154-64(cbs, tok, tok.span))
  else if tok.type == "ID" then
    tokens.pop();
    state65(new-cbs-154-65(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end end end end
end;
state153 = funct(cbs)
  tok = get-token();
  debug = "state153:
importitem := id % : id
importitem := id %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == ":" then
    tokens.pop();
    state154(new-cbs-153-154(cbs, tok, tok.span))
  else
    cbs.75-1(tok.span.start())
  end end
end;
state152 = funct(cbs)
  tok = get-token();
  debug = "state152:
importitem_list := importitem , importitem_list %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.78-3(tok.span.start())
  end
end;
150-78-1 = funct(cbs, p2, p3, end-) cbs.78-1(p2, p3, end-) end;
new-cbs-150-151 = funct(cbs, val, start) {
  78-2: funct(p2, end-) 150-78-1(cbs, val, p2, end-) end,
} end;
151-78-2 = funct(cbs, p3, end-) cbs.78-2(p3, end-) end;
new-cbs-151-152 = funct(cbs, val, start) {
  78-3: funct(end-) 151-78-2(cbs, val, end-) end,
} end;
rule76 = funct(span) eml() end;
151-76-0 = funct(cbs, start, end-)
  span = start.merge(end-);
  val = rule76(span);
  case Thunk(case State152(new-cbs-151-152(cbs, val, start)))
end;
rule77 = funct(p1, span) new-list-mut([p1]) end;
151-77-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule77(p1, span);
  case Thunk(case State152(new-cbs-151-152(cbs, val, start)))
end;
rule78 = funct(p1, p2, p3, span) (p3.unshift(p1); p3).0 end;
151-78-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule78(p1, p2, p3, span);
  case Thunk(case State152(new-cbs-151-152(cbs, val, start)))
end;
new-cbs-151-150 = funct(cbs, val, start) {
  78-1: funct(p1, p2, end-) 151-78-0(cbs, val, p1, p2, start, end-) end,
  77-1: funct(end-) 151-77-0(cbs, val, start, end-) end,
} end;
rule74 = funct(p1, p2, p3, span) {key:p1, name: p3, span} end;
151-74-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule74(p1, p2, p3, span);
  case Thunk(case State150(new-cbs-151-150(cbs, val, start)))
end;
rule75 = funct(p1, span) {key: p1, name: p1, span} end;
151-75-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule75(p1, span);
  case Thunk(case State150(new-cbs-151-150(cbs, val, start)))
end;
new-cbs-151-153 = funct(cbs, val, start) {
  75-1: funct(end-) 151-75-0(cbs, val, start, end-) end,
  74-1: funct(p1, p2, end-) 151-74-0(cbs, val, p1, p2, start, end-) end,
} end;
151-5-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule5(p1, span);
  case Thunk(case State153(new-cbs-151-153(cbs, val, start)))
end;
new-cbs-151-65 = funct(cbs, val, start) {
  5-1: funct(end-) 151-5-0(cbs, val, start, end-) end,
} end;
151-6-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule6(p1, span);
  case Thunk(case State153(new-cbs-151-153(cbs, val, start)))
end;
new-cbs-151-64 = funct(cbs, val, start) {
  6-1: funct(end-) 151-6-0(cbs, val, start, end-) end,
} end;
151-7-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule7(p1, span);
  case Thunk(case State153(new-cbs-151-153(cbs, val, start)))
end;
new-cbs-151-63 = funct(cbs, val, start) {
  7-1: funct(end-) 151-7-0(cbs, val, start, end-) end,
} end;
151-8-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule8(p1, span);
  case Thunk(case State153(new-cbs-151-153(cbs, val, start)))
end;
new-cbs-151-62 = funct(cbs, val, start) {
  8-1: funct(end-) 151-8-0(cbs, val, start, end-) end,
} end;
state151 = funct(cbs)
  tok = get-token();
  debug = "state151:
importitem_list := importitem , % importitem_list
importitem_list := % importitem , importitem_list
importitem := % id
id := % END
id := % FOR
id := % WHILE
id := % ID
importitem := % id : id
importitem_list := % importitem
importitem_list := %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "END" then
    tokens.pop();
    state62(new-cbs-151-62(cbs, tok, tok.span))
  else if tok.type == "FOR" then
    tokens.pop();
    state63(new-cbs-151-63(cbs, tok, tok.span))
  else if tok.type == "WHILE" then
    tokens.pop();
    state64(new-cbs-151-64(cbs, tok, tok.span))
  else if tok.type == "ID" then
    tokens.pop();
    state65(new-cbs-151-65(cbs, tok, tok.span))
  else
    span = tok.span.start();
    151-76-0(cbs, span, span)
  end end end end end
end;
state150 = funct(cbs)
  tok = get-token();
  debug = "state150:
importitem_list := importitem % , importitem_list
importitem_list := importitem %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "," then
    tokens.pop();
    state151(new-cbs-150-151(cbs, tok, tok.span))
  else
    cbs.77-1(tok.span.start())
  end end
end;
148-79-2 = funct(cbs, p3, end-) cbs.79-2(p3, end-) end;
new-cbs-148-149 = funct(cbs, val, start) {
  79-3: funct(end-) 148-79-2(cbs, val, end-) end,
} end;
state149 = funct(cbs)
  tok = get-token();
  debug = "state149:
importpat := { importitem_list } %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.79-3(tok.span.start())
  end
end;
state148 = funct(cbs)
  tok = get-token();
  debug = "state148:
importpat := { importitem_list % }";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "}" then
    tokens.pop();
    state149(new-cbs-148-149(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end
end;
state146 = funct(cbs)
  tok = get-token();
  debug = "state146:
importrhs := string %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.80-1(tok.span.start())
  end
end;
state144 = funct(cbs)
  tok = get-token();
  debug = "state144:
import := # IMPORT importpat FROM importrhs %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.85-5(tok.span.start())
  end
end;
142-85-3 = funct(cbs, p4, p5, end-) cbs.85-3(p4, p5, end-) end;
new-cbs-142-143 = funct(cbs, val, start) {
  85-4: funct(p4, end-) 142-85-3(cbs, val, p4, end-) end,
} end;
143-85-4 = funct(cbs, p5, end-) cbs.85-4(p5, end-) end;
new-cbs-143-144 = funct(cbs, val, start) {
  85-5: funct(end-) 143-85-4(cbs, val, end-) end,
} end;
rule80 = funct(p1, span) (false, p1) end;
143-80-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule80(p1, span);
  case Thunk(case State144(new-cbs-143-144(cbs, val, start)))
end;
new-cbs-143-146 = funct(cbs, val, start) {
  80-1: funct(end-) 143-80-0(cbs, val, start, end-) end,
} end;
rule27 = funct(p1, span) p1.val end;
143-27-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule27(p1, span);
  case Thunk(case State146(new-cbs-143-146(cbs, val, start)))
end;
new-cbs-143-112 = funct(cbs, val, start) {
  27-1: funct(end-) 143-27-0(cbs, val, start, end-) end,
} end;
state112 = funct(cbs)
  tok = get-token();
  debug = "state112:
string := STRING %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.27-1(tok.span.start())
  end
end;
rule81 = funct(p1, span) (true, slice(p1.val, 1, -1)) end;
143-81-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule81(p1, span);
  case Thunk(case State144(new-cbs-143-144(cbs, val, start)))
end;
new-cbs-143-145 = funct(cbs, val, start) {
  81-1: funct(end-) 143-81-0(cbs, val, start, end-) end,
} end;
state145 = funct(cbs)
  tok = get-token();
  debug = "state145:
importrhs := JS %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.81-1(tok.span.start())
  end
end;
state143 = funct(cbs)
  tok = get-token();
  debug = "state143:
import := # IMPORT importpat FROM % importrhs
importrhs := % JS
importrhs := % string
string := % STRING";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "JS" then
    tokens.pop();
    state145(new-cbs-143-145(cbs, tok, tok.span))
  else if tok.type == "STRING" then
    tokens.pop();
    state112(new-cbs-143-112(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end end
end;
state142 = funct(cbs)
  tok = get-token();
  debug = "state142:
import := # IMPORT importpat % FROM importrhs";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "ID" && (tok.val == "from").0 then
    tokens.pop();
    state143(new-cbs-142-143(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end
end;
state139 = funct(cbs)
  tok = get-token();
  debug = "state139:
import_list := import import_list %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.87-2(tok.span.start())
  end
end;
138-87-1 = funct(cbs, p2, end-) cbs.87-1(p2, end-) end;
new-cbs-138-139 = funct(cbs, val, start) {
  87-2: funct(end-) 138-87-1(cbs, val, end-) end,
} end;
rule86 = funct(span) eml() end;
138-86-0 = funct(cbs, start, end-)
  span = start.merge(end-);
  val = rule86(span);
  case Thunk(case State139(new-cbs-138-139(cbs, val, start)))
end;
rule87 = funct(p1, p2, span) (p2.unshift(p1); p2).0 end;
138-87-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule87(p1, p2, span);
  case Thunk(case State139(new-cbs-138-139(cbs, val, start)))
end;
new-cbs-138-138 = funct(cbs, val, start) {
  87-1: funct(p1, end-) 138-87-0(cbs, val, p1, start, end-) end,
} end;
rule85 = funct(p1, p2, p3, p4, p5, span) {lhs: p3, extern: p5.0, path: p5.1, span} end;
138-85-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
  span = start.merge(end-);
  val = rule85(p1, p2, p3, p4, p5, span);
  case Thunk(case State138(new-cbs-138-138(cbs, val, start)))
end;
new-cbs-138-140 = funct(cbs, val, start) {
  85-1: funct(p1, p2, p3, p4, end-) 138-85-0(cbs, val, p1, p2, p3, p4, start, end-) end,
} end;
140-85-1 = funct(cbs, p2, p3, p4, p5, end-) cbs.85-1(p2, p3, p4, p5, end-) end;
new-cbs-140-141 = funct(cbs, val, start) {
  85-2: funct(p2, p3, p4, end-) 140-85-1(cbs, val, p2, p3, p4, end-) end,
} end;
141-85-2 = funct(cbs, p3, p4, p5, end-) cbs.85-2(p3, p4, p5, end-) end;
new-cbs-141-142 = funct(cbs, val, start) {
  85-3: funct(p3, p4, end-) 141-85-2(cbs, val, p3, p4, end-) end,
} end;
rule79 = funct(p1, p2, p3, span) p2 end;
141-79-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule79(p1, p2, p3, span);
  case Thunk(case State142(new-cbs-141-142(cbs, val, start)))
end;
new-cbs-141-147 = funct(cbs, val, start) {
  79-1: funct(p1, p2, end-) 141-79-0(cbs, val, p1, p2, start, end-) end,
} end;
147-79-1 = funct(cbs, p2, p3, end-) cbs.79-1(p2, p3, end-) end;
new-cbs-147-148 = funct(cbs, val, start) {
  79-2: funct(p2, end-) 147-79-1(cbs, val, p2, end-) end,
} end;
147-76-0 = funct(cbs, start, end-)
  span = start.merge(end-);
  val = rule76(span);
  case Thunk(case State148(new-cbs-147-148(cbs, val, start)))
end;
147-77-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule77(p1, span);
  case Thunk(case State148(new-cbs-147-148(cbs, val, start)))
end;
147-78-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule78(p1, p2, p3, span);
  case Thunk(case State148(new-cbs-147-148(cbs, val, start)))
end;
new-cbs-147-150 = funct(cbs, val, start) {
  78-1: funct(p1, p2, end-) 147-78-0(cbs, val, p1, p2, start, end-) end,
  77-1: funct(end-) 147-77-0(cbs, val, start, end-) end,
} end;
147-74-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule74(p1, p2, p3, span);
  case Thunk(case State150(new-cbs-147-150(cbs, val, start)))
end;
147-75-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule75(p1, span);
  case Thunk(case State150(new-cbs-147-150(cbs, val, start)))
end;
new-cbs-147-153 = funct(cbs, val, start) {
  75-1: funct(end-) 147-75-0(cbs, val, start, end-) end,
  74-1: funct(p1, p2, end-) 147-74-0(cbs, val, p1, p2, start, end-) end,
} end;
147-5-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule5(p1, span);
  case Thunk(case State153(new-cbs-147-153(cbs, val, start)))
end;
new-cbs-147-65 = funct(cbs, val, start) {
  5-1: funct(end-) 147-5-0(cbs, val, start, end-) end,
} end;
147-6-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule6(p1, span);
  case Thunk(case State153(new-cbs-147-153(cbs, val, start)))
end;
new-cbs-147-64 = funct(cbs, val, start) {
  6-1: funct(end-) 147-6-0(cbs, val, start, end-) end,
} end;
147-7-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule7(p1, span);
  case Thunk(case State153(new-cbs-147-153(cbs, val, start)))
end;
new-cbs-147-63 = funct(cbs, val, start) {
  7-1: funct(end-) 147-7-0(cbs, val, start, end-) end,
} end;
147-8-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule8(p1, span);
  case Thunk(case State153(new-cbs-147-153(cbs, val, start)))
end;
new-cbs-147-62 = funct(cbs, val, start) {
  8-1: funct(end-) 147-8-0(cbs, val, start, end-) end,
} end;
state147 = funct(cbs)
  tok = get-token();
  debug = "state147:
importpat := { % importitem_list }
importitem_list := % importitem , importitem_list
importitem := % id
id := % END
id := % FOR
id := % WHILE
id := % ID
importitem := % id : id
importitem_list := % importitem
importitem_list := %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "END" then
    tokens.pop();
    state62(new-cbs-147-62(cbs, tok, tok.span))
  else if tok.type == "FOR" then
    tokens.pop();
    state63(new-cbs-147-63(cbs, tok, tok.span))
  else if tok.type == "WHILE" then
    tokens.pop();
    state64(new-cbs-147-64(cbs, tok, tok.span))
  else if tok.type == "ID" then
    tokens.pop();
    state65(new-cbs-147-65(cbs, tok, tok.span))
  else
    span = tok.span.start();
    147-76-0(cbs, span, span)
  end end end end end
end;
state141 = funct(cbs)
  tok = get-token();
  debug = "state141:
import := # IMPORT % importpat FROM importrhs
importpat := % { importitem_list }";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "{" then
    tokens.pop();
    state147(new-cbs-141-147(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end
end;
state140 = funct(cbs)
  tok = get-token();
  debug = "state140:
import := # % IMPORT importpat FROM importrhs";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "ID" && (tok.val == "import").0 then
    tokens.pop();
    state141(new-cbs-140-141(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end
end;
state138 = funct(cbs)
  tok = get-token();
  debug = "state138:
import_list := import % import_list
import_list := % import import_list
import := % # IMPORT importpat FROM importrhs
import_list := %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "#" then
    tokens.pop();
    state140(new-cbs-138-140(cbs, tok, tok.span))
  else
    span = tok.span.start();
    138-86-0(cbs, span, span)
  end end
end;
state137 = funct(cbs)
  tok = get-token();
  debug = "state137:
phantom_id := id %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.28-1(tok.span.start())
  end
end;
state133 = funct(cbs)
  tok = get-token();
  debug = "state133:
thisp_opt := param %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.73-1(tok.span.start())
  end
end;
state132 = funct(cbs)
  tok = get-token();
  debug = "state132:
param := id %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.66-1(tok.span.start())
  end
end;
state131 = funct(cbs)
  tok = get-token();
  debug = "state131:
param_list := param , param_list %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.69-3(tok.span.start())
  end
end;
129-69-1 = funct(cbs, p2, p3, end-) cbs.69-1(p2, p3, end-) end;
new-cbs-129-130 = funct(cbs, val, start) {
  69-2: funct(p2, end-) 129-69-1(cbs, val, p2, end-) end,
} end;
130-69-2 = funct(cbs, p3, end-) cbs.69-2(p3, end-) end;
new-cbs-130-131 = funct(cbs, val, start) {
  69-3: funct(end-) 130-69-2(cbs, val, end-) end,
} end;
rule67 = funct(span) eml() end;
130-67-0 = funct(cbs, start, end-)
  span = start.merge(end-);
  val = rule67(span);
  case Thunk(case State131(new-cbs-130-131(cbs, val, start)))
end;
rule68 = funct(p1, span) new-list-mut([p1]) end;
130-68-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule68(p1, span);
  case Thunk(case State131(new-cbs-130-131(cbs, val, start)))
end;
rule69 = funct(p1, p2, p3, span) (p3.unshift(p1); p3).0 end;
130-69-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule69(p1, p2, p3, span);
  case Thunk(case State131(new-cbs-130-131(cbs, val, start)))
end;
new-cbs-130-129 = funct(cbs, val, start) {
  69-1: funct(p1, p2, end-) 130-69-0(cbs, val, p1, p2, start, end-) end,
  68-1: funct(end-) 130-68-0(cbs, val, start, end-) end,
} end;
rule66 = funct(p1, span) {name:p1, span} end;
130-66-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule66(p1, span);
  case Thunk(case State129(new-cbs-130-129(cbs, val, start)))
end;
new-cbs-130-132 = funct(cbs, val, start) {
  66-1: funct(end-) 130-66-0(cbs, val, start, end-) end,
} end;
130-5-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule5(p1, span);
  case Thunk(case State132(new-cbs-130-132(cbs, val, start)))
end;
new-cbs-130-65 = funct(cbs, val, start) {
  5-1: funct(end-) 130-5-0(cbs, val, start, end-) end,
} end;
130-6-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule6(p1, span);
  case Thunk(case State132(new-cbs-130-132(cbs, val, start)))
end;
new-cbs-130-64 = funct(cbs, val, start) {
  6-1: funct(end-) 130-6-0(cbs, val, start, end-) end,
} end;
130-7-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule7(p1, span);
  case Thunk(case State132(new-cbs-130-132(cbs, val, start)))
end;
new-cbs-130-63 = funct(cbs, val, start) {
  7-1: funct(end-) 130-7-0(cbs, val, start, end-) end,
} end;
130-8-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule8(p1, span);
  case Thunk(case State132(new-cbs-130-132(cbs, val, start)))
end;
new-cbs-130-62 = funct(cbs, val, start) {
  8-1: funct(end-) 130-8-0(cbs, val, start, end-) end,
} end;
state130 = funct(cbs)
  tok = get-token();
  debug = "state130:
param_list := param , % param_list
param_list := % param , param_list
param := % id
id := % END
id := % FOR
id := % WHILE
id := % ID
param_list := % param
param_list := %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "END" then
    tokens.pop();
    state62(new-cbs-130-62(cbs, tok, tok.span))
  else if tok.type == "FOR" then
    tokens.pop();
    state63(new-cbs-130-63(cbs, tok, tok.span))
  else if tok.type == "WHILE" then
    tokens.pop();
    state64(new-cbs-130-64(cbs, tok, tok.span))
  else if tok.type == "ID" then
    tokens.pop();
    state65(new-cbs-130-65(cbs, tok, tok.span))
  else
    span = tok.span.start();
    130-67-0(cbs, span, span)
  end end end end end
end;
state129 = funct(cbs)
  tok = get-token();
  debug = "state129:
param_list := param % , param_list
param_list := param %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "," then
    tokens.pop();
    state130(new-cbs-129-130(cbs, tok, tok.span))
  else
    cbs.68-1(tok.span.start())
  end end
end;
126-1-1 = funct(cbs, p2, p3, end-) cbs.1-1(p2, p3, end-) end;
new-cbs-126-5 = funct(cbs, val, start) {
  1-2: funct(p2, end-) 126-1-1(cbs, val, p2, end-) end,
} end;
rule11 = funct(p1, p2, p3, span) case Binop{lhs: p1, op: p2.val, rhs: p3, span} end;
rule16 = funct(p1, p2, p3, p4, p5, span) case SetField{lhs: p1, name: p3, rhs: p5, span} end;
rule17 = funct(p1, p2, span) case Field{expr: p1, name: p2.name, field-span: p2.span, span} end;
rule18 = funct(p1, p2, p3, p4, span) case Call{expr: p1, params: p3, span} end;
5-1-2 = funct(cbs, p3, end-) cbs.1-2(p3, end-) end;
let new-cbs-5-6 future = (
  5-11-0 = funct(cbs, p1, p2, p3, start, end-)
    span = start.merge(end-);
    val = rule11(p1, p2, p3, span);
    case Thunk(case State6(new-cbs-5-6(cbs, val, start)))
  end;
  5-16-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
    span = start.merge(end-);
    val = rule16(p1, p2, p3, p4, p5, span);
    case Thunk(case State6(new-cbs-5-6(cbs, val, start)))
  end;
  5-17-0 = funct(cbs, p1, p2, start, end-)
    span = start.merge(end-);
    val = rule17(p1, p2, span);
    case Thunk(case State6(new-cbs-5-6(cbs, val, start)))
  end;
  5-18-0 = funct(cbs, p1, p2, p3, p4, start, end-)
    span = start.merge(end-);
    val = rule18(p1, p2, p3, p4, span);
    case Thunk(case State6(new-cbs-5-6(cbs, val, start)))
  end;
  funct(cbs, val, start) {
    1-3: funct(end-) 5-1-2(cbs, val, end-) end,
    18-1: funct(p1, p2, p3, end-) 5-18-0(cbs, val, p1, p2, p3, start, end-) end,
    17-1: funct(p1, end-) 5-17-0(cbs, val, p1, start, end-) end,
    16-1: funct(p1, p2, p3, p4, end-) 5-16-0(cbs, val, p1, p2, p3, p4, start, end-) end,
    11-1: funct(p1, p2, end-) 5-11-0(cbs, val, p1, p2, start, end-) end,
  } end
).0;
rule10 = funct(p1, span) case String{val: p1, span} end;
5-10-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule10(p1, span);
  case Thunk(case State6(new-cbs-5-6(cbs, val, start)))
end;
new-cbs-5-111 = funct(cbs, val, start) {
  10-1: funct(end-) 5-10-0(cbs, val, start, end-) end,
} end;
5-27-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule27(p1, span);
  case Thunk(case State111(new-cbs-5-111(cbs, val, start)))
end;
new-cbs-5-112 = funct(cbs, val, start) {
  27-1: funct(end-) 5-27-0(cbs, val, start, end-) end,
} end;
rule12 = funct(p1, p2, span) case Not{expr: p2, span} end;
5-12-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule12(p1, p2, span);
  case Thunk(case State6(new-cbs-5-6(cbs, val, start)))
end;
new-cbs-5-109 = funct(cbs, val, start) {
  12-1: funct(p1, end-) 5-12-0(cbs, val, p1, start, end-) end,
} end;
109-12-1 = funct(cbs, p2, end-) cbs.12-1(p2, end-) end;
let new-cbs-109-110 future = (
  109-11-0 = funct(cbs, p1, p2, p3, start, end-)
    span = start.merge(end-);
    val = rule11(p1, p2, p3, span);
    case Thunk(case State110(new-cbs-109-110(cbs, val, start)))
  end;
  109-16-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
    span = start.merge(end-);
    val = rule16(p1, p2, p3, p4, p5, span);
    case Thunk(case State110(new-cbs-109-110(cbs, val, start)))
  end;
  109-17-0 = funct(cbs, p1, p2, start, end-)
    span = start.merge(end-);
    val = rule17(p1, p2, span);
    case Thunk(case State110(new-cbs-109-110(cbs, val, start)))
  end;
  109-18-0 = funct(cbs, p1, p2, p3, p4, start, end-)
    span = start.merge(end-);
    val = rule18(p1, p2, p3, p4, span);
    case Thunk(case State110(new-cbs-109-110(cbs, val, start)))
  end;
  funct(cbs, val, start) {
    12-2: funct(end-) 109-12-1(cbs, val, end-) end,
    18-1: funct(p1, p2, p3, end-) 109-18-0(cbs, val, p1, p2, p3, start, end-) end,
    17-1: funct(p1, end-) 109-17-0(cbs, val, p1, start, end-) end,
    16-1: funct(p1, p2, p3, p4, end-) 109-16-0(cbs, val, p1, p2, p3, p4, start, end-) end,
    11-1: funct(p1, p2, end-) 109-11-0(cbs, val, p1, p2, start, end-) end,
  } end
).0;
109-10-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule10(p1, span);
  case Thunk(case State110(new-cbs-109-110(cbs, val, start)))
end;
new-cbs-109-111 = funct(cbs, val, start) {
  10-1: funct(end-) 109-10-0(cbs, val, start, end-) end,
} end;
109-27-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule27(p1, span);
  case Thunk(case State111(new-cbs-109-111(cbs, val, start)))
end;
new-cbs-109-112 = funct(cbs, val, start) {
  27-1: funct(end-) 109-27-0(cbs, val, start, end-) end,
} end;
109-12-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule12(p1, p2, span);
  case Thunk(case State110(new-cbs-109-110(cbs, val, start)))
end;
new-cbs-109-109 = funct(cbs, val, start) {
  12-1: funct(p1, end-) 109-12-0(cbs, val, p1, start, end-) end,
} end;
rule9 = funct(p1, span) case Varb{name: p1, span} end;
109-9-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule9(p1, span);
  case Thunk(case State110(new-cbs-109-110(cbs, val, start)))
end;
rule14 = funct(p1, p2, p3, p4, span) case Assign{lhs: p1, poly: p3.0, poly-span: p3.1, rhs: p4, span} end;
109-14-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule14(p1, p2, p3, p4, span);
  case Thunk(case State110(new-cbs-109-110(cbs, val, start)))
end;
new-cbs-109-103 = funct(cbs, val, start) {
  14-1: funct(p1, p2, p3, end-) 109-14-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
rule44 = funct(p1, span) p1 end;
109-44-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule44(p1, span);
  case Thunk(case State103(new-cbs-109-103(cbs, val, start)))
end;
new-cbs-109-107 = funct(cbs, val, start) {
  44-1: funct(end-) 109-44-0(cbs, val, start, end-) end,
} end;
rule30 = funct(p1, span) case VarPat{name: p1, span} end;
109-30-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule30(p1, span);
  case Thunk(case State107(new-cbs-109-107(cbs, val, start)))
end;
new-cbs-109-108 = funct(cbs, val, start) {
  30-1: funct(end-) 109-30-0(cbs, val, start, end-) end,
  9-1: funct(end-) 109-9-0(cbs, val, start, end-) end,
} end;
109-5-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule5(p1, span);
  case Thunk(case State108(new-cbs-109-108(cbs, val, start)))
end;
new-cbs-109-65 = funct(cbs, val, start) {
  5-1: funct(end-) 109-5-0(cbs, val, start, end-) end,
} end;
109-6-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule6(p1, span);
  case Thunk(case State108(new-cbs-109-108(cbs, val, start)))
end;
new-cbs-109-64 = funct(cbs, val, start) {
  6-1: funct(end-) 109-6-0(cbs, val, start, end-) end,
} end;
109-7-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule7(p1, span);
  case Thunk(case State108(new-cbs-109-108(cbs, val, start)))
end;
new-cbs-109-63 = funct(cbs, val, start) {
  7-1: funct(end-) 109-7-0(cbs, val, start, end-) end,
} end;
109-8-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule8(p1, span);
  case Thunk(case State108(new-cbs-109-108(cbs, val, start)))
end;
new-cbs-109-62 = funct(cbs, val, start) {
  8-1: funct(end-) 109-8-0(cbs, val, start, end-) end,
} end;
rule45 = funct(p1, p2, span) p2 end;
109-45-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule45(p1, p2, span);
  case Thunk(case State103(new-cbs-109-103(cbs, val, start)))
end;
rule15 = funct(p1, p2, p3, p4, p5, span) case Future{lhs: p2, rhs: p5, span} end;
109-15-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
  span = start.merge(end-);
  val = rule15(p1, p2, p3, p4, p5, span);
  case Thunk(case State110(new-cbs-109-110(cbs, val, start)))
end;
new-cbs-109-74 = funct(cbs, val, start) {
  15-1: funct(p1, p2, p3, p4, end-) 109-15-0(cbs, val, p1, p2, p3, p4, start, end-) end,
  45-1: funct(p1, end-) 109-45-0(cbs, val, p1, start, end-) end,
} end;
74-45-1 = funct(cbs, p2, end-) cbs.45-1(p2, end-) end;
new-cbs-74-75 = funct(cbs, val, start) {
  45-2: funct(end-) 74-45-1(cbs, val, end-) end,
} end;
rule38 = funct(p1, p2, p3, span) case CasePat{tag: p2, obj: p3, span} end;
74-38-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule38(p1, p2, p3, span);
  case Thunk(case State75(new-cbs-74-75(cbs, val, start)))
end;
new-cbs-74-95 = funct(cbs, val, start) {
  38-1: funct(p1, p2, end-) 74-38-0(cbs, val, p1, p2, start, end-) end,
} end;
95-38-1 = funct(cbs, p2, p3, end-) cbs.38-1(p2, p3, end-) end;
new-cbs-95-96 = funct(cbs, val, start) {
  38-2: funct(p2, end-) 95-38-1(cbs, val, p2, end-) end,
} end;
95-5-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule5(p1, span);
  case Thunk(case State96(new-cbs-95-96(cbs, val, start)))
end;
new-cbs-95-65 = funct(cbs, val, start) {
  5-1: funct(end-) 95-5-0(cbs, val, start, end-) end,
} end;
95-6-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule6(p1, span);
  case Thunk(case State96(new-cbs-95-96(cbs, val, start)))
end;
new-cbs-95-64 = funct(cbs, val, start) {
  6-1: funct(end-) 95-6-0(cbs, val, start, end-) end,
} end;
95-7-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule7(p1, span);
  case Thunk(case State96(new-cbs-95-96(cbs, val, start)))
end;
new-cbs-95-63 = funct(cbs, val, start) {
  7-1: funct(end-) 95-7-0(cbs, val, start, end-) end,
} end;
95-8-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule8(p1, span);
  case Thunk(case State96(new-cbs-95-96(cbs, val, start)))
end;
new-cbs-95-62 = funct(cbs, val, start) {
  8-1: funct(end-) 95-8-0(cbs, val, start, end-) end,
} end;
state95 = funct(cbs)
  tok = get-token();
  debug = "state95:
pattern := CASE % id objpat
id := % END
id := % FOR
id := % WHILE
id := % ID";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "END" then
    tokens.pop();
    state62(new-cbs-95-62(cbs, tok, tok.span))
  else if tok.type == "FOR" then
    tokens.pop();
    state63(new-cbs-95-63(cbs, tok, tok.span))
  else if tok.type == "WHILE" then
    tokens.pop();
    state64(new-cbs-95-64(cbs, tok, tok.span))
  else if tok.type == "ID" then
    tokens.pop();
    state65(new-cbs-95-65(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end end end end
end;
74-15-1 = funct(cbs, p2, p3, p4, p5, end-) cbs.15-1(p2, p3, p4, p5, end-) end;
rule39 = funct(p1, span) p1 end;
74-39-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule39(p1, span);
  case Thunk(case State75(new-cbs-74-75(cbs, val, start)))
end;
new-cbs-74-99 = funct(cbs, val, start) {
  39-1: funct(end-) 74-39-0(cbs, val, start, end-) end,
  15-2: funct(p2, p3, p4, end-) 74-15-1(cbs, val, p2, p3, p4, end-) end,
} end;
74-30-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule30(p1, span);
  case Thunk(case State99(new-cbs-74-99(cbs, val, start)))
end;
new-cbs-74-94 = funct(cbs, val, start) {
  30-1: funct(end-) 74-30-0(cbs, val, start, end-) end,
} end;
74-5-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule5(p1, span);
  case Thunk(case State94(new-cbs-74-94(cbs, val, start)))
end;
new-cbs-74-65 = funct(cbs, val, start) {
  5-1: funct(end-) 74-5-0(cbs, val, start, end-) end,
} end;
74-6-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule6(p1, span);
  case Thunk(case State94(new-cbs-74-94(cbs, val, start)))
end;
new-cbs-74-64 = funct(cbs, val, start) {
  6-1: funct(end-) 74-6-0(cbs, val, start, end-) end,
} end;
74-7-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule7(p1, span);
  case Thunk(case State94(new-cbs-74-94(cbs, val, start)))
end;
new-cbs-74-63 = funct(cbs, val, start) {
  7-1: funct(end-) 74-7-0(cbs, val, start, end-) end,
} end;
74-8-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule8(p1, span);
  case Thunk(case State94(new-cbs-74-94(cbs, val, start)))
end;
new-cbs-74-62 = funct(cbs, val, start) {
  8-1: funct(end-) 74-8-0(cbs, val, start, end-) end,
} end;
rule40 = funct(p1, span) p1 end;
74-40-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule40(p1, span);
  case Thunk(case State75(new-cbs-74-75(cbs, val, start)))
end;
new-cbs-74-76 = funct(cbs, val, start) {
  40-1: funct(end-) 74-40-0(cbs, val, start, end-) end,
} end;
rule31 = funct(p1, p2, p3, span) case ObjPat{pairs:
            map(enumerate(p2), funct(args) let (i, pattern) = args; {key: ""+'i, pattern, span} end),
            span} end;
74-31-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule31(p1, p2, p3, span);
  case Thunk(case State76(new-cbs-74-76(cbs, val, start)))
end;
new-cbs-74-87 = funct(cbs, val, start) {
  31-1: funct(p1, p2, end-) 74-31-0(cbs, val, p1, p2, start, end-) end,
} end;
87-31-1 = funct(cbs, p2, p3, end-) cbs.31-1(p2, p3, end-) end;
new-cbs-87-88 = funct(cbs, val, start) {
  31-2: funct(p2, end-) 87-31-1(cbs, val, p2, end-) end,
} end;
rule41 = funct(span) eml() end;
87-41-0 = funct(cbs, start, end-)
  span = start.merge(end-);
  val = rule41(span);
  case Thunk(case State88(new-cbs-87-88(cbs, val, start)))
end;
rule42 = funct(p1, span) new-list-mut([p1]) end;
87-42-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule42(p1, span);
  case Thunk(case State88(new-cbs-87-88(cbs, val, start)))
end;
rule43 = funct(p1, p2, p3, span) (p3.unshift(p1); p3).0 end;
87-43-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule43(p1, p2, p3, span);
  case Thunk(case State88(new-cbs-87-88(cbs, val, start)))
end;
new-cbs-87-90 = funct(cbs, val, start) {
  43-1: funct(p1, p2, end-) 87-43-0(cbs, val, p1, p2, start, end-) end,
  42-1: funct(end-) 87-42-0(cbs, val, start, end-) end,
} end;
87-38-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule38(p1, p2, p3, span);
  case Thunk(case State90(new-cbs-87-90(cbs, val, start)))
end;
new-cbs-87-95 = funct(cbs, val, start) {
  38-1: funct(p1, p2, end-) 87-38-0(cbs, val, p1, p2, start, end-) end,
} end;
87-39-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule39(p1, span);
  case Thunk(case State90(new-cbs-87-90(cbs, val, start)))
end;
new-cbs-87-93 = funct(cbs, val, start) {
  39-1: funct(end-) 87-39-0(cbs, val, start, end-) end,
} end;
87-30-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule30(p1, span);
  case Thunk(case State93(new-cbs-87-93(cbs, val, start)))
end;
new-cbs-87-94 = funct(cbs, val, start) {
  30-1: funct(end-) 87-30-0(cbs, val, start, end-) end,
} end;
87-5-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule5(p1, span);
  case Thunk(case State94(new-cbs-87-94(cbs, val, start)))
end;
new-cbs-87-65 = funct(cbs, val, start) {
  5-1: funct(end-) 87-5-0(cbs, val, start, end-) end,
} end;
87-6-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule6(p1, span);
  case Thunk(case State94(new-cbs-87-94(cbs, val, start)))
end;
new-cbs-87-64 = funct(cbs, val, start) {
  6-1: funct(end-) 87-6-0(cbs, val, start, end-) end,
} end;
87-7-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule7(p1, span);
  case Thunk(case State94(new-cbs-87-94(cbs, val, start)))
end;
new-cbs-87-63 = funct(cbs, val, start) {
  7-1: funct(end-) 87-7-0(cbs, val, start, end-) end,
} end;
87-8-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule8(p1, span);
  case Thunk(case State94(new-cbs-87-94(cbs, val, start)))
end;
new-cbs-87-62 = funct(cbs, val, start) {
  8-1: funct(end-) 87-8-0(cbs, val, start, end-) end,
} end;
87-40-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule40(p1, span);
  case Thunk(case State90(new-cbs-87-90(cbs, val, start)))
end;
new-cbs-87-76 = funct(cbs, val, start) {
  40-1: funct(end-) 87-40-0(cbs, val, start, end-) end,
} end;
87-31-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule31(p1, p2, p3, span);
  case Thunk(case State76(new-cbs-87-76(cbs, val, start)))
end;
new-cbs-87-87 = funct(cbs, val, start) {
  31-1: funct(p1, p2, end-) 87-31-0(cbs, val, p1, p2, start, end-) end,
} end;
rule32 = funct(p1, p2, p3, span) case ObjPat{pairs: p2, span} end;
87-32-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule32(p1, p2, p3, span);
  case Thunk(case State76(new-cbs-87-76(cbs, val, start)))
end;
new-cbs-87-77 = funct(cbs, val, start) {
  32-1: funct(p1, p2, end-) 87-32-0(cbs, val, p1, p2, start, end-) end,
} end;
77-32-1 = funct(cbs, p2, p3, end-) cbs.32-1(p2, p3, end-) end;
new-cbs-77-78 = funct(cbs, val, start) {
  32-2: funct(p2, end-) 77-32-1(cbs, val, p2, end-) end,
} end;
rule35 = funct(span) eml() end;
77-35-0 = funct(cbs, start, end-)
  span = start.merge(end-);
  val = rule35(span);
  case Thunk(case State78(new-cbs-77-78(cbs, val, start)))
end;
rule36 = funct(p1, span) new-list-mut([p1]) end;
77-36-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule36(p1, span);
  case Thunk(case State78(new-cbs-77-78(cbs, val, start)))
end;
rule37 = funct(p1, p2, p3, span) (p3.unshift(p1); p3).0 end;
77-37-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule37(p1, p2, p3, span);
  case Thunk(case State78(new-cbs-77-78(cbs, val, start)))
end;
new-cbs-77-80 = funct(cbs, val, start) {
  37-1: funct(p1, p2, end-) 77-37-0(cbs, val, p1, p2, start, end-) end,
  36-1: funct(end-) 77-36-0(cbs, val, start, end-) end,
} end;
rule33 = funct(p1, p2, p3, span) {key:p1, pattern:p3, span} end;
77-33-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule33(p1, p2, p3, span);
  case Thunk(case State80(new-cbs-77-80(cbs, val, start)))
end;
new-cbs-77-84 = funct(cbs, val, start) {
  33-1: funct(p1, p2, end-) 77-33-0(cbs, val, p1, p2, start, end-) end,
} end;
rule29 = funct(p1, span) p1.val end;
77-29-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule29(p1, span);
  case Thunk(case State84(new-cbs-77-84(cbs, val, start)))
end;
new-cbs-77-98 = funct(cbs, val, start) {
  29-1: funct(end-) 77-29-0(cbs, val, start, end-) end,
} end;
state98 = funct(cbs)
  tok = get-token();
  debug = "state98:
phantom_id := PHANTOM_ID %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.29-1(tok.span.start())
  end
end;
rule28 = funct(p1, span) p1 end;
77-28-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule28(p1, span);
  case Thunk(case State84(new-cbs-77-84(cbs, val, start)))
end;
rule34 = funct(p1, span) {key: p1, pattern: case VarPat{name: p1, span}, span} end;
77-34-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule34(p1, span);
  case Thunk(case State80(new-cbs-77-80(cbs, val, start)))
end;
new-cbs-77-83 = funct(cbs, val, start) {
  34-1: funct(end-) 77-34-0(cbs, val, start, end-) end,
  28-1: funct(end-) 77-28-0(cbs, val, start, end-) end,
} end;
77-5-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule5(p1, span);
  case Thunk(case State83(new-cbs-77-83(cbs, val, start)))
end;
new-cbs-77-65 = funct(cbs, val, start) {
  5-1: funct(end-) 77-5-0(cbs, val, start, end-) end,
} end;
77-6-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule6(p1, span);
  case Thunk(case State83(new-cbs-77-83(cbs, val, start)))
end;
new-cbs-77-64 = funct(cbs, val, start) {
  6-1: funct(end-) 77-6-0(cbs, val, start, end-) end,
} end;
77-7-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule7(p1, span);
  case Thunk(case State83(new-cbs-77-83(cbs, val, start)))
end;
new-cbs-77-63 = funct(cbs, val, start) {
  7-1: funct(end-) 77-7-0(cbs, val, start, end-) end,
} end;
77-8-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule8(p1, span);
  case Thunk(case State83(new-cbs-77-83(cbs, val, start)))
end;
new-cbs-77-62 = funct(cbs, val, start) {
  8-1: funct(end-) 77-8-0(cbs, val, start, end-) end,
} end;
state77 = funct(cbs)
  tok = get-token();
  debug = "state77:
objpat := { % keypat_list }
keypat_list := % keypat , keypat_list
keypat := % id
id := % END
id := % FOR
id := % WHILE
id := % ID
keypat := % phantom_id : pattern
phantom_id := % PHANTOM_ID
phantom_id := % id
keypat_list := % keypat
keypat_list := %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "END" then
    tokens.pop();
    state62(new-cbs-77-62(cbs, tok, tok.span))
  else if tok.type == "FOR" then
    tokens.pop();
    state63(new-cbs-77-63(cbs, tok, tok.span))
  else if tok.type == "WHILE" then
    tokens.pop();
    state64(new-cbs-77-64(cbs, tok, tok.span))
  else if tok.type == "ID" then
    tokens.pop();
    state65(new-cbs-77-65(cbs, tok, tok.span))
  else if tok.type == "PHANTOM_ID" then
    tokens.pop();
    state98(new-cbs-77-98(cbs, tok, tok.span))
  else
    span = tok.span.start();
    77-35-0(cbs, span, span)
  end end end end end end
end;
let state87 future = 
  funct(cbs)
    tok = get-token();
    debug = "state87:
objpat := ( % pattern_list )
pattern_list := % pattern , pattern_list
pattern := % objpat
objpat := % { keypat_list }
objpat := % ( pattern_list )
pattern := % varpat
varpat := % id
id := % END
id := % FOR
id := % WHILE
id := % ID
pattern := % CASE id objpat
pattern_list := % pattern
pattern_list := %";
    if tok == undef then
      UnexpectedEOFError(debug)
    else if tok.type == "{" then
      tokens.pop();
      state77(new-cbs-87-77(cbs, tok, tok.span))
    else if tok.type == "(" then
      tokens.pop();
      state87(new-cbs-87-87(cbs, tok, tok.span))
    else if tok.type == "END" then
      tokens.pop();
      state62(new-cbs-87-62(cbs, tok, tok.span))
    else if tok.type == "FOR" then
      tokens.pop();
      state63(new-cbs-87-63(cbs, tok, tok.span))
    else if tok.type == "WHILE" then
      tokens.pop();
      state64(new-cbs-87-64(cbs, tok, tok.span))
    else if tok.type == "ID" then
      tokens.pop();
      state65(new-cbs-87-65(cbs, tok, tok.span))
    else if tok.type == "CASE" then
      tokens.pop();
      state95(new-cbs-87-95(cbs, tok, tok.span))
    else
      span = tok.span.start();
      87-41-0(cbs, span, span)
    end end end end end end end end
  end
;
74-32-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule32(p1, p2, p3, span);
  case Thunk(case State76(new-cbs-74-76(cbs, val, start)))
end;
new-cbs-74-77 = funct(cbs, val, start) {
  32-1: funct(p1, p2, end-) 74-32-0(cbs, val, p1, p2, start, end-) end,
} end;
state74 = funct(cbs)
  tok = get-token();
  debug = "state74:
letpat := LET % pattern
pattern := % objpat
objpat := % { keypat_list }
objpat := % ( pattern_list )
pattern := % varpat
varpat := % id
id := % END
id := % FOR
id := % WHILE
id := % ID
pattern := % CASE id objpat
exprns := LET % varpat FUTURE = exprns";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "{" then
    tokens.pop();
    state77(new-cbs-74-77(cbs, tok, tok.span))
  else if tok.type == "(" then
    tokens.pop();
    state87(new-cbs-74-87(cbs, tok, tok.span))
  else if tok.type == "END" then
    tokens.pop();
    state62(new-cbs-74-62(cbs, tok, tok.span))
  else if tok.type == "FOR" then
    tokens.pop();
    state63(new-cbs-74-63(cbs, tok, tok.span))
  else if tok.type == "WHILE" then
    tokens.pop();
    state64(new-cbs-74-64(cbs, tok, tok.span))
  else if tok.type == "ID" then
    tokens.pop();
    state65(new-cbs-74-65(cbs, tok, tok.span))
  else if tok.type == "CASE" then
    tokens.pop();
    state95(new-cbs-74-95(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end end end end end end end
end;
rule19 = funct(p1, span) p1 end;
109-19-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule19(p1, span);
  case Thunk(case State110(new-cbs-109-110(cbs, val, start)))
end;
new-cbs-109-70 = funct(cbs, val, start) {
  19-1: funct(end-) 109-19-0(cbs, val, start, end-) end,
} end;
rule49 = funct(p1, p2, p3, span) case Obj{pairs:
            map(enumerate(p2), funct(args) let (i, expr) = args; {key: ""+'i, mutable: false, expr, span} end),
            span} end;
109-49-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule49(p1, p2, p3, span);
  case Thunk(case State70(new-cbs-109-70(cbs, val, start)))
end;
new-cbs-109-71 = funct(cbs, val, start) {
  49-1: funct(p1, p2, end-) 109-49-0(cbs, val, p1, p2, start, end-) end,
} end;
71-49-1 = funct(cbs, p2, p3, end-) cbs.49-1(p2, p3, end-) end;
new-cbs-71-72 = funct(cbs, val, start) {
  49-2: funct(p2, end-) 71-49-1(cbs, val, p2, end-) end,
} end;
rule2 = funct(span) eml() end;
71-2-0 = funct(cbs, start, end-)
  span = start.merge(end-);
  val = rule2(span);
  case Thunk(case State72(new-cbs-71-72(cbs, val, start)))
end;
rule3 = funct(p1, span) new-list-mut([p1]) end;
71-3-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule3(p1, span);
  case Thunk(case State72(new-cbs-71-72(cbs, val, start)))
end;
rule1 = funct(p1, p2, p3, span) case Semi{lhs: p1, rhs: p3, span} end;
rule4 = funct(p1, p2, p3, span) (p3.unshift(p1); p3).0 end;
71-4-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule4(p1, p2, p3, span);
  case Thunk(case State72(new-cbs-71-72(cbs, val, start)))
end;
let new-cbs-71-17 future = (
  71-1-0 = funct(cbs, p1, p2, p3, start, end-)
    span = start.merge(end-);
    val = rule1(p1, p2, p3, span);
    case Thunk(case State17(new-cbs-71-17(cbs, val, start)))
  end;
  funct(cbs, val, start) {
    4-1: funct(p1, p2, end-) 71-4-0(cbs, val, p1, p2, start, end-) end,
    1-1: funct(p1, p2, end-) 71-1-0(cbs, val, p1, p2, start, end-) end,
    3-1: funct(end-) 71-3-0(cbs, val, start, end-) end,
  } end
).0;
rule0 = funct(p1, span) p1 end;
71-0-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule0(p1, span);
  case Thunk(case State17(new-cbs-71-17(cbs, val, start)))
end;
let new-cbs-71-20 future = (
  71-11-0 = funct(cbs, p1, p2, p3, start, end-)
    span = start.merge(end-);
    val = rule11(p1, p2, p3, span);
    case Thunk(case State20(new-cbs-71-20(cbs, val, start)))
  end;
  71-16-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
    span = start.merge(end-);
    val = rule16(p1, p2, p3, p4, p5, span);
    case Thunk(case State20(new-cbs-71-20(cbs, val, start)))
  end;
  71-17-0 = funct(cbs, p1, p2, start, end-)
    span = start.merge(end-);
    val = rule17(p1, p2, span);
    case Thunk(case State20(new-cbs-71-20(cbs, val, start)))
  end;
  71-18-0 = funct(cbs, p1, p2, p3, p4, start, end-)
    span = start.merge(end-);
    val = rule18(p1, p2, p3, p4, span);
    case Thunk(case State20(new-cbs-71-20(cbs, val, start)))
  end;
  funct(cbs, val, start) {
    0-1: funct(end-) 71-0-0(cbs, val, start, end-) end,
    18-1: funct(p1, p2, p3, end-) 71-18-0(cbs, val, p1, p2, p3, start, end-) end,
    17-1: funct(p1, end-) 71-17-0(cbs, val, p1, start, end-) end,
    16-1: funct(p1, p2, p3, p4, end-) 71-16-0(cbs, val, p1, p2, p3, p4, start, end-) end,
    11-1: funct(p1, p2, end-) 71-11-0(cbs, val, p1, p2, start, end-) end,
  } end
).0;
71-10-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule10(p1, span);
  case Thunk(case State20(new-cbs-71-20(cbs, val, start)))
end;
new-cbs-71-111 = funct(cbs, val, start) {
  10-1: funct(end-) 71-10-0(cbs, val, start, end-) end,
} end;
71-27-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule27(p1, span);
  case Thunk(case State111(new-cbs-71-111(cbs, val, start)))
end;
new-cbs-71-112 = funct(cbs, val, start) {
  27-1: funct(end-) 71-27-0(cbs, val, start, end-) end,
} end;
71-12-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule12(p1, p2, span);
  case Thunk(case State20(new-cbs-71-20(cbs, val, start)))
end;
new-cbs-71-109 = funct(cbs, val, start) {
  12-1: funct(p1, end-) 71-12-0(cbs, val, p1, start, end-) end,
} end;
71-9-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule9(p1, span);
  case Thunk(case State20(new-cbs-71-20(cbs, val, start)))
end;
71-14-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule14(p1, p2, p3, p4, span);
  case Thunk(case State20(new-cbs-71-20(cbs, val, start)))
end;
new-cbs-71-103 = funct(cbs, val, start) {
  14-1: funct(p1, p2, p3, end-) 71-14-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
71-44-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule44(p1, span);
  case Thunk(case State103(new-cbs-71-103(cbs, val, start)))
end;
new-cbs-71-107 = funct(cbs, val, start) {
  44-1: funct(end-) 71-44-0(cbs, val, start, end-) end,
} end;
71-30-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule30(p1, span);
  case Thunk(case State107(new-cbs-71-107(cbs, val, start)))
end;
new-cbs-71-108 = funct(cbs, val, start) {
  30-1: funct(end-) 71-30-0(cbs, val, start, end-) end,
  9-1: funct(end-) 71-9-0(cbs, val, start, end-) end,
} end;
71-5-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule5(p1, span);
  case Thunk(case State108(new-cbs-71-108(cbs, val, start)))
end;
new-cbs-71-65 = funct(cbs, val, start) {
  5-1: funct(end-) 71-5-0(cbs, val, start, end-) end,
} end;
71-6-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule6(p1, span);
  case Thunk(case State108(new-cbs-71-108(cbs, val, start)))
end;
new-cbs-71-64 = funct(cbs, val, start) {
  6-1: funct(end-) 71-6-0(cbs, val, start, end-) end,
} end;
71-7-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule7(p1, span);
  case Thunk(case State108(new-cbs-71-108(cbs, val, start)))
end;
new-cbs-71-63 = funct(cbs, val, start) {
  7-1: funct(end-) 71-7-0(cbs, val, start, end-) end,
} end;
71-8-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule8(p1, span);
  case Thunk(case State108(new-cbs-71-108(cbs, val, start)))
end;
new-cbs-71-62 = funct(cbs, val, start) {
  8-1: funct(end-) 71-8-0(cbs, val, start, end-) end,
} end;
71-45-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule45(p1, p2, span);
  case Thunk(case State103(new-cbs-71-103(cbs, val, start)))
end;
71-15-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
  span = start.merge(end-);
  val = rule15(p1, p2, p3, p4, p5, span);
  case Thunk(case State20(new-cbs-71-20(cbs, val, start)))
end;
new-cbs-71-74 = funct(cbs, val, start) {
  15-1: funct(p1, p2, p3, p4, end-) 71-15-0(cbs, val, p1, p2, p3, p4, start, end-) end,
  45-1: funct(p1, end-) 71-45-0(cbs, val, p1, start, end-) end,
} end;
71-19-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule19(p1, span);
  case Thunk(case State20(new-cbs-71-20(cbs, val, start)))
end;
new-cbs-71-70 = funct(cbs, val, start) {
  19-1: funct(end-) 71-19-0(cbs, val, start, end-) end,
} end;
71-49-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule49(p1, p2, p3, span);
  case Thunk(case State70(new-cbs-71-70(cbs, val, start)))
end;
new-cbs-71-71 = funct(cbs, val, start) {
  49-1: funct(p1, p2, end-) 71-49-0(cbs, val, p1, p2, start, end-) end,
} end;
rule50 = funct(p1, p2, p3, span) case Obj{pairs: p2, span} end;
71-50-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule50(p1, p2, p3, span);
  case Thunk(case State70(new-cbs-71-70(cbs, val, start)))
end;
new-cbs-71-55 = funct(cbs, val, start) {
  50-1: funct(p1, p2, end-) 71-50-0(cbs, val, p1, p2, start, end-) end,
} end;
55-50-1 = funct(cbs, p2, p3, end-) cbs.50-1(p2, p3, end-) end;
new-cbs-55-56 = funct(cbs, val, start) {
  50-2: funct(p2, end-) 55-50-1(cbs, val, p2, end-) end,
} end;
rule55 = funct(span) eml() end;
55-55-0 = funct(cbs, start, end-)
  span = start.merge(end-);
  val = rule55(span);
  case Thunk(case State56(new-cbs-55-56(cbs, val, start)))
end;
rule56 = funct(p1, span) new-list-mut([p1]) end;
55-56-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule56(p1, span);
  case Thunk(case State56(new-cbs-55-56(cbs, val, start)))
end;
rule57 = funct(p1, p2, p3, span) (p3.unshift(p1); p3).0 end;
55-57-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule57(p1, p2, p3, span);
  case Thunk(case State56(new-cbs-55-56(cbs, val, start)))
end;
new-cbs-55-58 = funct(cbs, val, start) {
  57-1: funct(p1, p2, end-) 55-57-0(cbs, val, p1, p2, start, end-) end,
  56-1: funct(end-) 55-56-0(cbs, val, start, end-) end,
} end;
rule53 = funct(p1, p2, p3, p4, span) {key:p1, mutable: p2, expr:p4, span} end;
55-53-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule53(p1, p2, p3, p4, span);
  case Thunk(case State58(new-cbs-55-58(cbs, val, start)))
end;
new-cbs-55-66 = funct(cbs, val, start) {
  53-1: funct(p1, p2, p3, end-) 55-53-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
55-29-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule29(p1, span);
  case Thunk(case State66(new-cbs-55-66(cbs, val, start)))
end;
new-cbs-55-98 = funct(cbs, val, start) {
  29-1: funct(end-) 55-29-0(cbs, val, start, end-) end,
} end;
55-28-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule28(p1, span);
  case Thunk(case State66(new-cbs-55-66(cbs, val, start)))
end;
rule54 = funct(p1, span) {key: p1, mutable: false, expr: case Varb{name: p1, span}, span} end;
55-54-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule54(p1, span);
  case Thunk(case State58(new-cbs-55-58(cbs, val, start)))
end;
new-cbs-55-61 = funct(cbs, val, start) {
  54-1: funct(end-) 55-54-0(cbs, val, start, end-) end,
  28-1: funct(end-) 55-28-0(cbs, val, start, end-) end,
} end;
55-5-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule5(p1, span);
  case Thunk(case State61(new-cbs-55-61(cbs, val, start)))
end;
new-cbs-55-65 = funct(cbs, val, start) {
  5-1: funct(end-) 55-5-0(cbs, val, start, end-) end,
} end;
55-6-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule6(p1, span);
  case Thunk(case State61(new-cbs-55-61(cbs, val, start)))
end;
new-cbs-55-64 = funct(cbs, val, start) {
  6-1: funct(end-) 55-6-0(cbs, val, start, end-) end,
} end;
55-7-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule7(p1, span);
  case Thunk(case State61(new-cbs-55-61(cbs, val, start)))
end;
new-cbs-55-63 = funct(cbs, val, start) {
  7-1: funct(end-) 55-7-0(cbs, val, start, end-) end,
} end;
55-8-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule8(p1, span);
  case Thunk(case State61(new-cbs-55-61(cbs, val, start)))
end;
new-cbs-55-62 = funct(cbs, val, start) {
  8-1: funct(end-) 55-8-0(cbs, val, start, end-) end,
} end;
state55 = funct(cbs)
  tok = get-token();
  debug = "state55:
objlit := { % keyval_list }
keyval_list := % keyval , keyval_list
keyval := % id
id := % END
id := % FOR
id := % WHILE
id := % ID
keyval := % phantom_id mut_opt : expr
phantom_id := % PHANTOM_ID
phantom_id := % id
keyval_list := % keyval
keyval_list := %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "END" then
    tokens.pop();
    state62(new-cbs-55-62(cbs, tok, tok.span))
  else if tok.type == "FOR" then
    tokens.pop();
    state63(new-cbs-55-63(cbs, tok, tok.span))
  else if tok.type == "WHILE" then
    tokens.pop();
    state64(new-cbs-55-64(cbs, tok, tok.span))
  else if tok.type == "ID" then
    tokens.pop();
    state65(new-cbs-55-65(cbs, tok, tok.span))
  else if tok.type == "PHANTOM_ID" then
    tokens.pop();
    state98(new-cbs-55-98(cbs, tok, tok.span))
  else
    span = tok.span.start();
    55-55-0(cbs, span, span)
  end end end end end end
end;
rule20 = funct(p1, p2, p3, span) case Case{tag: p2, obj: p3, span} end;
71-20-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule20(p1, p2, p3, span);
  case Thunk(case State20(new-cbs-71-20(cbs, val, start)))
end;
new-cbs-71-52 = funct(cbs, val, start) {
  20-1: funct(p1, p2, end-) 71-20-0(cbs, val, p1, p2, start, end-) end,
} end;
52-20-1 = funct(cbs, p2, p3, end-) cbs.20-1(p2, p3, end-) end;
new-cbs-52-53 = funct(cbs, val, start) {
  20-2: funct(p2, end-) 52-20-1(cbs, val, p2, end-) end,
} end;
52-5-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule5(p1, span);
  case Thunk(case State53(new-cbs-52-53(cbs, val, start)))
end;
new-cbs-52-65 = funct(cbs, val, start) {
  5-1: funct(end-) 52-5-0(cbs, val, start, end-) end,
} end;
52-6-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule6(p1, span);
  case Thunk(case State53(new-cbs-52-53(cbs, val, start)))
end;
new-cbs-52-64 = funct(cbs, val, start) {
  6-1: funct(end-) 52-6-0(cbs, val, start, end-) end,
} end;
52-7-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule7(p1, span);
  case Thunk(case State53(new-cbs-52-53(cbs, val, start)))
end;
new-cbs-52-63 = funct(cbs, val, start) {
  7-1: funct(end-) 52-7-0(cbs, val, start, end-) end,
} end;
52-8-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule8(p1, span);
  case Thunk(case State53(new-cbs-52-53(cbs, val, start)))
end;
new-cbs-52-62 = funct(cbs, val, start) {
  8-1: funct(end-) 52-8-0(cbs, val, start, end-) end,
} end;
state52 = funct(cbs)
  tok = get-token();
  debug = "state52:
exprns := CASE % id objlit
id := % END
id := % FOR
id := % WHILE
id := % ID";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "END" then
    tokens.pop();
    state62(new-cbs-52-62(cbs, tok, tok.span))
  else if tok.type == "FOR" then
    tokens.pop();
    state63(new-cbs-52-63(cbs, tok, tok.span))
  else if tok.type == "WHILE" then
    tokens.pop();
    state64(new-cbs-52-64(cbs, tok, tok.span))
  else if tok.type == "ID" then
    tokens.pop();
    state65(new-cbs-52-65(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end end end end
end;
rule21 = funct(p1, p2, p3, span) case List{vals: p2, span} end;
71-21-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule21(p1, p2, p3, span);
  case Thunk(case State20(new-cbs-71-20(cbs, val, start)))
end;
new-cbs-71-44 = funct(cbs, val, start) {
  21-1: funct(p1, p2, end-) 71-21-0(cbs, val, p1, p2, start, end-) end,
} end;
44-21-1 = funct(cbs, p2, p3, end-) cbs.21-1(p2, p3, end-) end;
new-cbs-44-45 = funct(cbs, val, start) {
  21-2: funct(p2, end-) 44-21-1(cbs, val, p2, end-) end,
} end;
rule62 = funct(p1, span) new-list-mut([p1]) end;
44-62-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule62(p1, span);
  case Thunk(case State45(new-cbs-44-45(cbs, val, start)))
end;
rule63 = funct(p1, p2, p3, span) (p3.unshift(p1); p3).0 end;
44-63-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule63(p1, p2, p3, span);
  case Thunk(case State45(new-cbs-44-45(cbs, val, start)))
end;
new-cbs-44-47 = funct(cbs, val, start) {
  63-1: funct(p1, p2, end-) 44-63-0(cbs, val, p1, p2, start, end-) end,
  62-1: funct(end-) 44-62-0(cbs, val, start, end-) end,
} end;
rule60 = funct(p1, p2, span) (p1, p2, span) end;
44-60-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule60(p1, p2, span);
  case Thunk(case State47(new-cbs-44-47(cbs, val, start)))
end;
new-cbs-44-50 = funct(cbs, val, start) {
  60-1: funct(p1, end-) 44-60-0(cbs, val, p1, start, end-) end,
} end;
rule58 = funct(span) false end;
44-58-0 = funct(cbs, start, end-)
  span = start.merge(end-);
  val = rule58(span);
  case Thunk(case State50(new-cbs-44-50(cbs, val, start)))
end;
rule61 = funct(span) eml() end;
44-61-0 = funct(cbs, start, end-)
  span = start.merge(end-);
  val = rule61(span);
  case Thunk(case State45(new-cbs-44-45(cbs, val, start)))
end;
rule59 = funct(p1, p2, p3, span) true end;
44-59-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule59(p1, p2, p3, span);
  case Thunk(case State50(new-cbs-44-50(cbs, val, start)))
end;
new-cbs-44-115 = funct(cbs, val, start) {
  59-1: funct(p1, p2, end-) 44-59-0(cbs, val, p1, p2, start, end-) end,
} end;
115-59-1 = funct(cbs, p2, p3, end-) cbs.59-1(p2, p3, end-) end;
new-cbs-115-116 = funct(cbs, val, start) {
  59-2: funct(p2, end-) 115-59-1(cbs, val, p2, end-) end,
} end;
116-59-2 = funct(cbs, p3, end-) cbs.59-2(p3, end-) end;
new-cbs-116-117 = funct(cbs, val, start) {
  59-3: funct(end-) 116-59-2(cbs, val, end-) end,
} end;
state117 = funct(cbs)
  tok = get-token();
  debug = "state117:
spread_opt := . . . %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.59-3(tok.span.start())
  end
end;
state116 = funct(cbs)
  tok = get-token();
  debug = "state116:
spread_opt := . . % .";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "." then
    tokens.pop();
    state117(new-cbs-116-117(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end
end;
state115 = funct(cbs)
  tok = get-token();
  debug = "state115:
spread_opt := . % . .";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "." then
    tokens.pop();
    state116(new-cbs-115-116(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end
end;
state44 = funct(cbs)
  tok = get-token();
  debug = "state44:
exprns := [ % restexpr_list ]
restexpr_list := % restexpr , restexpr_list
restexpr := % spread_opt expr
spread_opt := % . . .
spread_opt := %
restexpr_list := % restexpr
restexpr_list := %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "." then
    tokens.pop();
    state115(new-cbs-44-115(cbs, tok, tok.span))
  else if tok.type == "]" then
    span = tok.span.start();
    44-61-0(cbs, span, span)
  else
    span = tok.span.start();
    44-58-0(cbs, span, span)
  end end end
end;
rule22 = funct(p1, span) case JS{code: slice(p1.val, 1, -1), span} end;
71-22-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule22(p1, span);
  case Thunk(case State20(new-cbs-71-20(cbs, val, start)))
end;
new-cbs-71-43 = funct(cbs, val, start) {
  22-1: funct(end-) 71-22-0(cbs, val, start, end-) end,
} end;
state43 = funct(cbs)
  tok = get-token();
  debug = "state43:
exprns := JS %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.22-1(tok.span.start())
  end
end;
rule23 = funct(p1, p2, p3, p4, p5, p6, span) case If{cond: p2, thenb: p4, elseb: p5, span} end;
71-23-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule23(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State20(new-cbs-71-20(cbs, val, start)))
end;
new-cbs-71-35 = funct(cbs, val, start) {
  23-1: funct(p1, p2, p3, p4, p5, end-) 71-23-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
} end;
35-23-1 = funct(cbs, p2, p3, p4, p5, p6, end-) cbs.23-1(p2, p3, p4, p5, p6, end-) end;
let new-cbs-35-36 future = (
  35-1-0 = funct(cbs, p1, p2, p3, start, end-)
    span = start.merge(end-);
    val = rule1(p1, p2, p3, span);
    case Thunk(case State36(new-cbs-35-36(cbs, val, start)))
  end;
  funct(cbs, val, start) {
    23-2: funct(p2, p3, p4, p5, end-) 35-23-1(cbs, val, p2, p3, p4, p5, end-) end,
    1-1: funct(p1, p2, end-) 35-1-0(cbs, val, p1, p2, start, end-) end,
  } end
).0;
35-0-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule0(p1, span);
  case Thunk(case State36(new-cbs-35-36(cbs, val, start)))
end;
let new-cbs-35-20 future = (
  35-11-0 = funct(cbs, p1, p2, p3, start, end-)
    span = start.merge(end-);
    val = rule11(p1, p2, p3, span);
    case Thunk(case State20(new-cbs-35-20(cbs, val, start)))
  end;
  35-16-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
    span = start.merge(end-);
    val = rule16(p1, p2, p3, p4, p5, span);
    case Thunk(case State20(new-cbs-35-20(cbs, val, start)))
  end;
  35-17-0 = funct(cbs, p1, p2, start, end-)
    span = start.merge(end-);
    val = rule17(p1, p2, span);
    case Thunk(case State20(new-cbs-35-20(cbs, val, start)))
  end;
  35-18-0 = funct(cbs, p1, p2, p3, p4, start, end-)
    span = start.merge(end-);
    val = rule18(p1, p2, p3, p4, span);
    case Thunk(case State20(new-cbs-35-20(cbs, val, start)))
  end;
  funct(cbs, val, start) {
    0-1: funct(end-) 35-0-0(cbs, val, start, end-) end,
    18-1: funct(p1, p2, p3, end-) 35-18-0(cbs, val, p1, p2, p3, start, end-) end,
    17-1: funct(p1, end-) 35-17-0(cbs, val, p1, start, end-) end,
    16-1: funct(p1, p2, p3, p4, end-) 35-16-0(cbs, val, p1, p2, p3, p4, start, end-) end,
    11-1: funct(p1, p2, end-) 35-11-0(cbs, val, p1, p2, start, end-) end,
  } end
).0;
35-10-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule10(p1, span);
  case Thunk(case State20(new-cbs-35-20(cbs, val, start)))
end;
new-cbs-35-111 = funct(cbs, val, start) {
  10-1: funct(end-) 35-10-0(cbs, val, start, end-) end,
} end;
35-27-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule27(p1, span);
  case Thunk(case State111(new-cbs-35-111(cbs, val, start)))
end;
new-cbs-35-112 = funct(cbs, val, start) {
  27-1: funct(end-) 35-27-0(cbs, val, start, end-) end,
} end;
35-12-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule12(p1, p2, span);
  case Thunk(case State20(new-cbs-35-20(cbs, val, start)))
end;
new-cbs-35-109 = funct(cbs, val, start) {
  12-1: funct(p1, end-) 35-12-0(cbs, val, p1, start, end-) end,
} end;
35-9-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule9(p1, span);
  case Thunk(case State20(new-cbs-35-20(cbs, val, start)))
end;
35-14-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule14(p1, p2, p3, p4, span);
  case Thunk(case State20(new-cbs-35-20(cbs, val, start)))
end;
new-cbs-35-103 = funct(cbs, val, start) {
  14-1: funct(p1, p2, p3, end-) 35-14-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
35-44-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule44(p1, span);
  case Thunk(case State103(new-cbs-35-103(cbs, val, start)))
end;
new-cbs-35-107 = funct(cbs, val, start) {
  44-1: funct(end-) 35-44-0(cbs, val, start, end-) end,
} end;
35-30-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule30(p1, span);
  case Thunk(case State107(new-cbs-35-107(cbs, val, start)))
end;
new-cbs-35-108 = funct(cbs, val, start) {
  30-1: funct(end-) 35-30-0(cbs, val, start, end-) end,
  9-1: funct(end-) 35-9-0(cbs, val, start, end-) end,
} end;
35-5-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule5(p1, span);
  case Thunk(case State108(new-cbs-35-108(cbs, val, start)))
end;
new-cbs-35-65 = funct(cbs, val, start) {
  5-1: funct(end-) 35-5-0(cbs, val, start, end-) end,
} end;
35-6-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule6(p1, span);
  case Thunk(case State108(new-cbs-35-108(cbs, val, start)))
end;
new-cbs-35-64 = funct(cbs, val, start) {
  6-1: funct(end-) 35-6-0(cbs, val, start, end-) end,
} end;
35-7-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule7(p1, span);
  case Thunk(case State108(new-cbs-35-108(cbs, val, start)))
end;
new-cbs-35-63 = funct(cbs, val, start) {
  7-1: funct(end-) 35-7-0(cbs, val, start, end-) end,
} end;
35-8-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule8(p1, span);
  case Thunk(case State108(new-cbs-35-108(cbs, val, start)))
end;
new-cbs-35-62 = funct(cbs, val, start) {
  8-1: funct(end-) 35-8-0(cbs, val, start, end-) end,
} end;
35-45-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule45(p1, p2, span);
  case Thunk(case State103(new-cbs-35-103(cbs, val, start)))
end;
35-15-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
  span = start.merge(end-);
  val = rule15(p1, p2, p3, p4, p5, span);
  case Thunk(case State20(new-cbs-35-20(cbs, val, start)))
end;
new-cbs-35-74 = funct(cbs, val, start) {
  15-1: funct(p1, p2, p3, p4, end-) 35-15-0(cbs, val, p1, p2, p3, p4, start, end-) end,
  45-1: funct(p1, end-) 35-45-0(cbs, val, p1, start, end-) end,
} end;
35-19-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule19(p1, span);
  case Thunk(case State20(new-cbs-35-20(cbs, val, start)))
end;
new-cbs-35-70 = funct(cbs, val, start) {
  19-1: funct(end-) 35-19-0(cbs, val, start, end-) end,
} end;
35-49-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule49(p1, p2, p3, span);
  case Thunk(case State70(new-cbs-35-70(cbs, val, start)))
end;
new-cbs-35-71 = funct(cbs, val, start) {
  49-1: funct(p1, p2, end-) 35-49-0(cbs, val, p1, p2, start, end-) end,
} end;
35-50-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule50(p1, p2, p3, span);
  case Thunk(case State70(new-cbs-35-70(cbs, val, start)))
end;
new-cbs-35-55 = funct(cbs, val, start) {
  50-1: funct(p1, p2, end-) 35-50-0(cbs, val, p1, p2, start, end-) end,
} end;
35-20-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule20(p1, p2, p3, span);
  case Thunk(case State20(new-cbs-35-20(cbs, val, start)))
end;
new-cbs-35-52 = funct(cbs, val, start) {
  20-1: funct(p1, p2, end-) 35-20-0(cbs, val, p1, p2, start, end-) end,
} end;
35-21-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule21(p1, p2, p3, span);
  case Thunk(case State20(new-cbs-35-20(cbs, val, start)))
end;
new-cbs-35-44 = funct(cbs, val, start) {
  21-1: funct(p1, p2, end-) 35-21-0(cbs, val, p1, p2, start, end-) end,
} end;
35-22-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule22(p1, span);
  case Thunk(case State20(new-cbs-35-20(cbs, val, start)))
end;
new-cbs-35-43 = funct(cbs, val, start) {
  22-1: funct(end-) 35-22-0(cbs, val, start, end-) end,
} end;
35-23-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule23(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State20(new-cbs-35-20(cbs, val, start)))
end;
new-cbs-35-35 = funct(cbs, val, start) {
  23-1: funct(p1, p2, p3, p4, p5, end-) 35-23-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
} end;
rule13 = funct(p1, p2, p3, p4, span) case Unsafe{expr: p3} end;
35-13-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule13(p1, p2, p3, p4, span);
  case Thunk(case State20(new-cbs-35-20(cbs, val, start)))
end;
rule24 = funct(p1, p2, p3, p4, p5, p6, span) case While{cond: p3, body: p5, span} end;
35-24-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule24(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State20(new-cbs-35-20(cbs, val, start)))
end;
rule25 = funct(p1, p2, p3, p4, p5, p6, p7, p8, span) case For{lhs: p3, range: p5, body: p7, span} end;
35-25-0 = funct(cbs, p1, p2, p3, p4, p5, p6, p7, p8, start, end-)
  span = start.merge(end-);
  val = rule25(p1, p2, p3, p4, p5, p6, p7, p8, span);
  case Thunk(case State20(new-cbs-35-20(cbs, val, start)))
end;
new-cbs-35-29 = funct(cbs, val, start) {
  25-1: funct(p1, p2, p3, p4, p5, p6, p7, end-) 35-25-0(cbs, val, p1, p2, p3, p4, p5, p6, p7, start, end-) end,
  24-1: funct(p1, p2, p3, p4, p5, end-) 35-24-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
  13-1: funct(p1, p2, p3, end-) 35-13-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
29-25-1 = funct(cbs, p2, p3, p4, p5, p6, p7, p8, end-) cbs.25-1(p2, p3, p4, p5, p6, p7, p8, end-) end;
new-cbs-29-121 = funct(cbs, val, start) {
  25-2: funct(p2, p3, p4, p5, p6, p7, end-) 29-25-1(cbs, val, p2, p3, p4, p5, p6, p7, end-) end,
} end;
121-25-2 = funct(cbs, p3, p4, p5, p6, p7, p8, end-) cbs.25-2(p3, p4, p5, p6, p7, p8, end-) end;
new-cbs-121-122 = funct(cbs, val, start) {
  25-3: funct(p3, p4, p5, p6, p7, end-) 121-25-2(cbs, val, p3, p4, p5, p6, p7, end-) end,
} end;
121-44-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule44(p1, span);
  case Thunk(case State122(new-cbs-121-122(cbs, val, start)))
end;
new-cbs-121-107 = funct(cbs, val, start) {
  44-1: funct(end-) 121-44-0(cbs, val, start, end-) end,
} end;
121-30-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule30(p1, span);
  case Thunk(case State107(new-cbs-121-107(cbs, val, start)))
end;
new-cbs-121-94 = funct(cbs, val, start) {
  30-1: funct(end-) 121-30-0(cbs, val, start, end-) end,
} end;
121-5-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule5(p1, span);
  case Thunk(case State94(new-cbs-121-94(cbs, val, start)))
end;
new-cbs-121-65 = funct(cbs, val, start) {
  5-1: funct(end-) 121-5-0(cbs, val, start, end-) end,
} end;
121-6-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule6(p1, span);
  case Thunk(case State94(new-cbs-121-94(cbs, val, start)))
end;
new-cbs-121-64 = funct(cbs, val, start) {
  6-1: funct(end-) 121-6-0(cbs, val, start, end-) end,
} end;
121-7-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule7(p1, span);
  case Thunk(case State94(new-cbs-121-94(cbs, val, start)))
end;
new-cbs-121-63 = funct(cbs, val, start) {
  7-1: funct(end-) 121-7-0(cbs, val, start, end-) end,
} end;
121-8-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule8(p1, span);
  case Thunk(case State94(new-cbs-121-94(cbs, val, start)))
end;
new-cbs-121-62 = funct(cbs, val, start) {
  8-1: funct(end-) 121-8-0(cbs, val, start, end-) end,
} end;
121-45-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule45(p1, p2, span);
  case Thunk(case State122(new-cbs-121-122(cbs, val, start)))
end;
new-cbs-121-128 = funct(cbs, val, start) {
  45-1: funct(p1, end-) 121-45-0(cbs, val, p1, start, end-) end,
} end;
128-45-1 = funct(cbs, p2, end-) cbs.45-1(p2, end-) end;
new-cbs-128-75 = funct(cbs, val, start) {
  45-2: funct(end-) 128-45-1(cbs, val, end-) end,
} end;
128-38-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule38(p1, p2, p3, span);
  case Thunk(case State75(new-cbs-128-75(cbs, val, start)))
end;
new-cbs-128-95 = funct(cbs, val, start) {
  38-1: funct(p1, p2, end-) 128-38-0(cbs, val, p1, p2, start, end-) end,
} end;
128-39-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule39(p1, span);
  case Thunk(case State75(new-cbs-128-75(cbs, val, start)))
end;
new-cbs-128-93 = funct(cbs, val, start) {
  39-1: funct(end-) 128-39-0(cbs, val, start, end-) end,
} end;
128-30-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule30(p1, span);
  case Thunk(case State93(new-cbs-128-93(cbs, val, start)))
end;
new-cbs-128-94 = funct(cbs, val, start) {
  30-1: funct(end-) 128-30-0(cbs, val, start, end-) end,
} end;
128-5-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule5(p1, span);
  case Thunk(case State94(new-cbs-128-94(cbs, val, start)))
end;
new-cbs-128-65 = funct(cbs, val, start) {
  5-1: funct(end-) 128-5-0(cbs, val, start, end-) end,
} end;
128-6-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule6(p1, span);
  case Thunk(case State94(new-cbs-128-94(cbs, val, start)))
end;
new-cbs-128-64 = funct(cbs, val, start) {
  6-1: funct(end-) 128-6-0(cbs, val, start, end-) end,
} end;
128-7-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule7(p1, span);
  case Thunk(case State94(new-cbs-128-94(cbs, val, start)))
end;
new-cbs-128-63 = funct(cbs, val, start) {
  7-1: funct(end-) 128-7-0(cbs, val, start, end-) end,
} end;
128-8-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule8(p1, span);
  case Thunk(case State94(new-cbs-128-94(cbs, val, start)))
end;
new-cbs-128-62 = funct(cbs, val, start) {
  8-1: funct(end-) 128-8-0(cbs, val, start, end-) end,
} end;
128-40-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule40(p1, span);
  case Thunk(case State75(new-cbs-128-75(cbs, val, start)))
end;
new-cbs-128-76 = funct(cbs, val, start) {
  40-1: funct(end-) 128-40-0(cbs, val, start, end-) end,
} end;
128-31-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule31(p1, p2, p3, span);
  case Thunk(case State76(new-cbs-128-76(cbs, val, start)))
end;
new-cbs-128-87 = funct(cbs, val, start) {
  31-1: funct(p1, p2, end-) 128-31-0(cbs, val, p1, p2, start, end-) end,
} end;
128-32-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule32(p1, p2, p3, span);
  case Thunk(case State76(new-cbs-128-76(cbs, val, start)))
end;
new-cbs-128-77 = funct(cbs, val, start) {
  32-1: funct(p1, p2, end-) 128-32-0(cbs, val, p1, p2, start, end-) end,
} end;
state128 = funct(cbs)
  tok = get-token();
  debug = "state128:
letpat := LET % pattern
pattern := % objpat
objpat := % { keypat_list }
objpat := % ( pattern_list )
pattern := % varpat
varpat := % id
id := % END
id := % FOR
id := % WHILE
id := % ID
pattern := % CASE id objpat";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "{" then
    tokens.pop();
    state77(new-cbs-128-77(cbs, tok, tok.span))
  else if tok.type == "(" then
    tokens.pop();
    state87(new-cbs-128-87(cbs, tok, tok.span))
  else if tok.type == "END" then
    tokens.pop();
    state62(new-cbs-128-62(cbs, tok, tok.span))
  else if tok.type == "FOR" then
    tokens.pop();
    state63(new-cbs-128-63(cbs, tok, tok.span))
  else if tok.type == "WHILE" then
    tokens.pop();
    state64(new-cbs-128-64(cbs, tok, tok.span))
  else if tok.type == "ID" then
    tokens.pop();
    state65(new-cbs-128-65(cbs, tok, tok.span))
  else if tok.type == "CASE" then
    tokens.pop();
    state95(new-cbs-128-95(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end end end end end end end
end;
state121 = funct(cbs)
  tok = get-token();
  debug = "state121:
exprns := DO FOR % letpat IN expr THEN expr END
letpat := % LET pattern
letpat := % varpat
varpat := % id
id := % END
id := % FOR
id := % WHILE
id := % ID";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "LET" then
    tokens.pop();
    state128(new-cbs-121-128(cbs, tok, tok.span))
  else if tok.type == "END" then
    tokens.pop();
    state62(new-cbs-121-62(cbs, tok, tok.span))
  else if tok.type == "FOR" then
    tokens.pop();
    state63(new-cbs-121-63(cbs, tok, tok.span))
  else if tok.type == "WHILE" then
    tokens.pop();
    state64(new-cbs-121-64(cbs, tok, tok.span))
  else if tok.type == "ID" then
    tokens.pop();
    state65(new-cbs-121-65(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end end end end end
end;
29-13-1 = funct(cbs, p2, p3, p4, end-) cbs.13-1(p2, p3, p4, end-) end;
new-cbs-29-118 = funct(cbs, val, start) {
  13-2: funct(p2, p3, end-) 29-13-1(cbs, val, p2, p3, end-) end,
} end;
118-13-2 = funct(cbs, p3, p4, end-) cbs.13-2(p3, p4, end-) end;
let new-cbs-118-119 future = (
  118-1-0 = funct(cbs, p1, p2, p3, start, end-)
    span = start.merge(end-);
    val = rule1(p1, p2, p3, span);
    case Thunk(case State119(new-cbs-118-119(cbs, val, start)))
  end;
  funct(cbs, val, start) {
    13-3: funct(p3, end-) 118-13-2(cbs, val, p3, end-) end,
    1-1: funct(p1, p2, end-) 118-1-0(cbs, val, p1, p2, start, end-) end,
  } end
).0;
118-0-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule0(p1, span);
  case Thunk(case State119(new-cbs-118-119(cbs, val, start)))
end;
let new-cbs-118-20 future = (
  118-11-0 = funct(cbs, p1, p2, p3, start, end-)
    span = start.merge(end-);
    val = rule11(p1, p2, p3, span);
    case Thunk(case State20(new-cbs-118-20(cbs, val, start)))
  end;
  118-16-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
    span = start.merge(end-);
    val = rule16(p1, p2, p3, p4, p5, span);
    case Thunk(case State20(new-cbs-118-20(cbs, val, start)))
  end;
  118-17-0 = funct(cbs, p1, p2, start, end-)
    span = start.merge(end-);
    val = rule17(p1, p2, span);
    case Thunk(case State20(new-cbs-118-20(cbs, val, start)))
  end;
  118-18-0 = funct(cbs, p1, p2, p3, p4, start, end-)
    span = start.merge(end-);
    val = rule18(p1, p2, p3, p4, span);
    case Thunk(case State20(new-cbs-118-20(cbs, val, start)))
  end;
  funct(cbs, val, start) {
    0-1: funct(end-) 118-0-0(cbs, val, start, end-) end,
    18-1: funct(p1, p2, p3, end-) 118-18-0(cbs, val, p1, p2, p3, start, end-) end,
    17-1: funct(p1, end-) 118-17-0(cbs, val, p1, start, end-) end,
    16-1: funct(p1, p2, p3, p4, end-) 118-16-0(cbs, val, p1, p2, p3, p4, start, end-) end,
    11-1: funct(p1, p2, end-) 118-11-0(cbs, val, p1, p2, start, end-) end,
  } end
).0;
118-10-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule10(p1, span);
  case Thunk(case State20(new-cbs-118-20(cbs, val, start)))
end;
new-cbs-118-111 = funct(cbs, val, start) {
  10-1: funct(end-) 118-10-0(cbs, val, start, end-) end,
} end;
118-27-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule27(p1, span);
  case Thunk(case State111(new-cbs-118-111(cbs, val, start)))
end;
new-cbs-118-112 = funct(cbs, val, start) {
  27-1: funct(end-) 118-27-0(cbs, val, start, end-) end,
} end;
118-12-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule12(p1, p2, span);
  case Thunk(case State20(new-cbs-118-20(cbs, val, start)))
end;
new-cbs-118-109 = funct(cbs, val, start) {
  12-1: funct(p1, end-) 118-12-0(cbs, val, p1, start, end-) end,
} end;
118-9-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule9(p1, span);
  case Thunk(case State20(new-cbs-118-20(cbs, val, start)))
end;
118-14-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule14(p1, p2, p3, p4, span);
  case Thunk(case State20(new-cbs-118-20(cbs, val, start)))
end;
new-cbs-118-103 = funct(cbs, val, start) {
  14-1: funct(p1, p2, p3, end-) 118-14-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
118-44-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule44(p1, span);
  case Thunk(case State103(new-cbs-118-103(cbs, val, start)))
end;
new-cbs-118-107 = funct(cbs, val, start) {
  44-1: funct(end-) 118-44-0(cbs, val, start, end-) end,
} end;
118-30-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule30(p1, span);
  case Thunk(case State107(new-cbs-118-107(cbs, val, start)))
end;
new-cbs-118-108 = funct(cbs, val, start) {
  30-1: funct(end-) 118-30-0(cbs, val, start, end-) end,
  9-1: funct(end-) 118-9-0(cbs, val, start, end-) end,
} end;
118-5-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule5(p1, span);
  case Thunk(case State108(new-cbs-118-108(cbs, val, start)))
end;
new-cbs-118-65 = funct(cbs, val, start) {
  5-1: funct(end-) 118-5-0(cbs, val, start, end-) end,
} end;
118-6-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule6(p1, span);
  case Thunk(case State108(new-cbs-118-108(cbs, val, start)))
end;
new-cbs-118-64 = funct(cbs, val, start) {
  6-1: funct(end-) 118-6-0(cbs, val, start, end-) end,
} end;
118-7-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule7(p1, span);
  case Thunk(case State108(new-cbs-118-108(cbs, val, start)))
end;
new-cbs-118-63 = funct(cbs, val, start) {
  7-1: funct(end-) 118-7-0(cbs, val, start, end-) end,
} end;
118-8-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule8(p1, span);
  case Thunk(case State108(new-cbs-118-108(cbs, val, start)))
end;
new-cbs-118-62 = funct(cbs, val, start) {
  8-1: funct(end-) 118-8-0(cbs, val, start, end-) end,
} end;
118-45-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule45(p1, p2, span);
  case Thunk(case State103(new-cbs-118-103(cbs, val, start)))
end;
118-15-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
  span = start.merge(end-);
  val = rule15(p1, p2, p3, p4, p5, span);
  case Thunk(case State20(new-cbs-118-20(cbs, val, start)))
end;
new-cbs-118-74 = funct(cbs, val, start) {
  15-1: funct(p1, p2, p3, p4, end-) 118-15-0(cbs, val, p1, p2, p3, p4, start, end-) end,
  45-1: funct(p1, end-) 118-45-0(cbs, val, p1, start, end-) end,
} end;
118-19-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule19(p1, span);
  case Thunk(case State20(new-cbs-118-20(cbs, val, start)))
end;
new-cbs-118-70 = funct(cbs, val, start) {
  19-1: funct(end-) 118-19-0(cbs, val, start, end-) end,
} end;
118-49-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule49(p1, p2, p3, span);
  case Thunk(case State70(new-cbs-118-70(cbs, val, start)))
end;
new-cbs-118-71 = funct(cbs, val, start) {
  49-1: funct(p1, p2, end-) 118-49-0(cbs, val, p1, p2, start, end-) end,
} end;
118-50-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule50(p1, p2, p3, span);
  case Thunk(case State70(new-cbs-118-70(cbs, val, start)))
end;
new-cbs-118-55 = funct(cbs, val, start) {
  50-1: funct(p1, p2, end-) 118-50-0(cbs, val, p1, p2, start, end-) end,
} end;
118-20-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule20(p1, p2, p3, span);
  case Thunk(case State20(new-cbs-118-20(cbs, val, start)))
end;
new-cbs-118-52 = funct(cbs, val, start) {
  20-1: funct(p1, p2, end-) 118-20-0(cbs, val, p1, p2, start, end-) end,
} end;
118-21-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule21(p1, p2, p3, span);
  case Thunk(case State20(new-cbs-118-20(cbs, val, start)))
end;
new-cbs-118-44 = funct(cbs, val, start) {
  21-1: funct(p1, p2, end-) 118-21-0(cbs, val, p1, p2, start, end-) end,
} end;
118-22-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule22(p1, span);
  case Thunk(case State20(new-cbs-118-20(cbs, val, start)))
end;
new-cbs-118-43 = funct(cbs, val, start) {
  22-1: funct(end-) 118-22-0(cbs, val, start, end-) end,
} end;
118-23-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule23(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State20(new-cbs-118-20(cbs, val, start)))
end;
new-cbs-118-35 = funct(cbs, val, start) {
  23-1: funct(p1, p2, p3, p4, p5, end-) 118-23-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
} end;
118-13-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule13(p1, p2, p3, p4, span);
  case Thunk(case State20(new-cbs-118-20(cbs, val, start)))
end;
118-24-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule24(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State20(new-cbs-118-20(cbs, val, start)))
end;
118-25-0 = funct(cbs, p1, p2, p3, p4, p5, p6, p7, p8, start, end-)
  span = start.merge(end-);
  val = rule25(p1, p2, p3, p4, p5, p6, p7, p8, span);
  case Thunk(case State20(new-cbs-118-20(cbs, val, start)))
end;
new-cbs-118-29 = funct(cbs, val, start) {
  25-1: funct(p1, p2, p3, p4, p5, p6, p7, end-) 118-25-0(cbs, val, p1, p2, p3, p4, p5, p6, p7, start, end-) end,
  24-1: funct(p1, p2, p3, p4, p5, end-) 118-24-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
  13-1: funct(p1, p2, p3, end-) 118-13-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
rule26 = funct(p1, p2, p3, p4, p5, p6, p7, p8, span) case Funct{unsafe: p2, thisp: p3, params: p5, expr: p7, span} end;
118-26-0 = funct(cbs, p1, p2, p3, p4, p5, p6, p7, p8, start, end-)
  span = start.merge(end-);
  val = rule26(p1, p2, p3, p4, p5, p6, p7, p8, span);
  case Thunk(case State20(new-cbs-118-20(cbs, val, start)))
end;
new-cbs-118-21 = funct(cbs, val, start) {
  26-1: funct(p1, p2, p3, p4, p5, p6, p7, end-) 118-26-0(cbs, val, p1, p2, p3, p4, p5, p6, p7, start, end-) end,
} end;
21-26-1 = funct(cbs, p2, p3, p4, p5, p6, p7, p8, end-) cbs.26-1(p2, p3, p4, p5, p6, p7, p8, end-) end;
new-cbs-21-22 = funct(cbs, val, start) {
  26-2: funct(p2, p3, p4, p5, p6, p7, end-) 21-26-1(cbs, val, p2, p3, p4, p5, p6, p7, end-) end,
} end;
rule70 = funct(span) null end;
21-70-0 = funct(cbs, start, end-)
  span = start.merge(end-);
  val = rule70(span);
  case Thunk(case State22(new-cbs-21-22(cbs, val, start)))
end;
rule71 = funct(p1, p2, p3, span) span end;
21-71-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule71(p1, p2, p3, span);
  case Thunk(case State22(new-cbs-21-22(cbs, val, start)))
end;
new-cbs-21-134 = funct(cbs, val, start) {
  71-1: funct(p1, p2, end-) 21-71-0(cbs, val, p1, p2, start, end-) end,
} end;
134-71-1 = funct(cbs, p2, p3, end-) cbs.71-1(p2, p3, end-) end;
new-cbs-134-135 = funct(cbs, val, start) {
  71-2: funct(p2, end-) 134-71-1(cbs, val, p2, end-) end,
} end;
135-71-2 = funct(cbs, p3, end-) cbs.71-2(p3, end-) end;
new-cbs-135-136 = funct(cbs, val, start) {
  71-3: funct(end-) 135-71-2(cbs, val, end-) end,
} end;
state136 = funct(cbs)
  tok = get-token();
  debug = "state136:
unsafe_opt := [ UNSAFE ] %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.71-3(tok.span.start())
  end
end;
state135 = funct(cbs)
  tok = get-token();
  debug = "state135:
unsafe_opt := [ UNSAFE % ]";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "]" then
    tokens.pop();
    state136(new-cbs-135-136(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end
end;
state134 = funct(cbs)
  tok = get-token();
  debug = "state134:
unsafe_opt := [ % UNSAFE ]";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "ID" && (tok.val == "unsafe").0 then
    tokens.pop();
    state135(new-cbs-134-135(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end
end;
state21 = funct(cbs)
  tok = get-token();
  debug = "state21:
exprns := FUNCT % unsafe_opt thisp_opt ( param_list ) expr END
unsafe_opt := % [ UNSAFE ]
unsafe_opt := %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "[" then
    tokens.pop();
    state134(new-cbs-21-134(cbs, tok, tok.span))
  else
    span = tok.span.start();
    21-70-0(cbs, span, span)
  end end
end;
29-24-1 = funct(cbs, p2, p3, p4, p5, p6, end-) cbs.24-1(p2, p3, p4, p5, p6, end-) end;
new-cbs-29-30 = funct(cbs, val, start) {
  24-2: funct(p2, p3, p4, p5, end-) 29-24-1(cbs, val, p2, p3, p4, p5, end-) end,
} end;
30-24-2 = funct(cbs, p3, p4, p5, p6, end-) cbs.24-2(p3, p4, p5, p6, end-) end;
let new-cbs-30-31 future = (
  30-1-0 = funct(cbs, p1, p2, p3, start, end-)
    span = start.merge(end-);
    val = rule1(p1, p2, p3, span);
    case Thunk(case State31(new-cbs-30-31(cbs, val, start)))
  end;
  funct(cbs, val, start) {
    24-3: funct(p3, p4, p5, end-) 30-24-2(cbs, val, p3, p4, p5, end-) end,
    1-1: funct(p1, p2, end-) 30-1-0(cbs, val, p1, p2, start, end-) end,
  } end
).0;
30-0-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule0(p1, span);
  case Thunk(case State31(new-cbs-30-31(cbs, val, start)))
end;
let new-cbs-30-20 future = (
  30-11-0 = funct(cbs, p1, p2, p3, start, end-)
    span = start.merge(end-);
    val = rule11(p1, p2, p3, span);
    case Thunk(case State20(new-cbs-30-20(cbs, val, start)))
  end;
  30-16-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
    span = start.merge(end-);
    val = rule16(p1, p2, p3, p4, p5, span);
    case Thunk(case State20(new-cbs-30-20(cbs, val, start)))
  end;
  30-17-0 = funct(cbs, p1, p2, start, end-)
    span = start.merge(end-);
    val = rule17(p1, p2, span);
    case Thunk(case State20(new-cbs-30-20(cbs, val, start)))
  end;
  30-18-0 = funct(cbs, p1, p2, p3, p4, start, end-)
    span = start.merge(end-);
    val = rule18(p1, p2, p3, p4, span);
    case Thunk(case State20(new-cbs-30-20(cbs, val, start)))
  end;
  funct(cbs, val, start) {
    0-1: funct(end-) 30-0-0(cbs, val, start, end-) end,
    18-1: funct(p1, p2, p3, end-) 30-18-0(cbs, val, p1, p2, p3, start, end-) end,
    17-1: funct(p1, end-) 30-17-0(cbs, val, p1, start, end-) end,
    16-1: funct(p1, p2, p3, p4, end-) 30-16-0(cbs, val, p1, p2, p3, p4, start, end-) end,
    11-1: funct(p1, p2, end-) 30-11-0(cbs, val, p1, p2, start, end-) end,
  } end
).0;
30-10-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule10(p1, span);
  case Thunk(case State20(new-cbs-30-20(cbs, val, start)))
end;
new-cbs-30-111 = funct(cbs, val, start) {
  10-1: funct(end-) 30-10-0(cbs, val, start, end-) end,
} end;
30-27-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule27(p1, span);
  case Thunk(case State111(new-cbs-30-111(cbs, val, start)))
end;
new-cbs-30-112 = funct(cbs, val, start) {
  27-1: funct(end-) 30-27-0(cbs, val, start, end-) end,
} end;
30-12-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule12(p1, p2, span);
  case Thunk(case State20(new-cbs-30-20(cbs, val, start)))
end;
new-cbs-30-109 = funct(cbs, val, start) {
  12-1: funct(p1, end-) 30-12-0(cbs, val, p1, start, end-) end,
} end;
30-9-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule9(p1, span);
  case Thunk(case State20(new-cbs-30-20(cbs, val, start)))
end;
30-14-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule14(p1, p2, p3, p4, span);
  case Thunk(case State20(new-cbs-30-20(cbs, val, start)))
end;
new-cbs-30-103 = funct(cbs, val, start) {
  14-1: funct(p1, p2, p3, end-) 30-14-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
30-44-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule44(p1, span);
  case Thunk(case State103(new-cbs-30-103(cbs, val, start)))
end;
new-cbs-30-107 = funct(cbs, val, start) {
  44-1: funct(end-) 30-44-0(cbs, val, start, end-) end,
} end;
30-30-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule30(p1, span);
  case Thunk(case State107(new-cbs-30-107(cbs, val, start)))
end;
new-cbs-30-108 = funct(cbs, val, start) {
  30-1: funct(end-) 30-30-0(cbs, val, start, end-) end,
  9-1: funct(end-) 30-9-0(cbs, val, start, end-) end,
} end;
30-5-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule5(p1, span);
  case Thunk(case State108(new-cbs-30-108(cbs, val, start)))
end;
new-cbs-30-65 = funct(cbs, val, start) {
  5-1: funct(end-) 30-5-0(cbs, val, start, end-) end,
} end;
30-6-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule6(p1, span);
  case Thunk(case State108(new-cbs-30-108(cbs, val, start)))
end;
new-cbs-30-64 = funct(cbs, val, start) {
  6-1: funct(end-) 30-6-0(cbs, val, start, end-) end,
} end;
30-7-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule7(p1, span);
  case Thunk(case State108(new-cbs-30-108(cbs, val, start)))
end;
new-cbs-30-63 = funct(cbs, val, start) {
  7-1: funct(end-) 30-7-0(cbs, val, start, end-) end,
} end;
30-8-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule8(p1, span);
  case Thunk(case State108(new-cbs-30-108(cbs, val, start)))
end;
new-cbs-30-62 = funct(cbs, val, start) {
  8-1: funct(end-) 30-8-0(cbs, val, start, end-) end,
} end;
30-45-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule45(p1, p2, span);
  case Thunk(case State103(new-cbs-30-103(cbs, val, start)))
end;
30-15-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
  span = start.merge(end-);
  val = rule15(p1, p2, p3, p4, p5, span);
  case Thunk(case State20(new-cbs-30-20(cbs, val, start)))
end;
new-cbs-30-74 = funct(cbs, val, start) {
  15-1: funct(p1, p2, p3, p4, end-) 30-15-0(cbs, val, p1, p2, p3, p4, start, end-) end,
  45-1: funct(p1, end-) 30-45-0(cbs, val, p1, start, end-) end,
} end;
30-19-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule19(p1, span);
  case Thunk(case State20(new-cbs-30-20(cbs, val, start)))
end;
new-cbs-30-70 = funct(cbs, val, start) {
  19-1: funct(end-) 30-19-0(cbs, val, start, end-) end,
} end;
30-49-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule49(p1, p2, p3, span);
  case Thunk(case State70(new-cbs-30-70(cbs, val, start)))
end;
new-cbs-30-71 = funct(cbs, val, start) {
  49-1: funct(p1, p2, end-) 30-49-0(cbs, val, p1, p2, start, end-) end,
} end;
30-50-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule50(p1, p2, p3, span);
  case Thunk(case State70(new-cbs-30-70(cbs, val, start)))
end;
new-cbs-30-55 = funct(cbs, val, start) {
  50-1: funct(p1, p2, end-) 30-50-0(cbs, val, p1, p2, start, end-) end,
} end;
30-20-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule20(p1, p2, p3, span);
  case Thunk(case State20(new-cbs-30-20(cbs, val, start)))
end;
new-cbs-30-52 = funct(cbs, val, start) {
  20-1: funct(p1, p2, end-) 30-20-0(cbs, val, p1, p2, start, end-) end,
} end;
30-21-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule21(p1, p2, p3, span);
  case Thunk(case State20(new-cbs-30-20(cbs, val, start)))
end;
new-cbs-30-44 = funct(cbs, val, start) {
  21-1: funct(p1, p2, end-) 30-21-0(cbs, val, p1, p2, start, end-) end,
} end;
30-22-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule22(p1, span);
  case Thunk(case State20(new-cbs-30-20(cbs, val, start)))
end;
new-cbs-30-43 = funct(cbs, val, start) {
  22-1: funct(end-) 30-22-0(cbs, val, start, end-) end,
} end;
30-23-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule23(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State20(new-cbs-30-20(cbs, val, start)))
end;
new-cbs-30-35 = funct(cbs, val, start) {
  23-1: funct(p1, p2, p3, p4, p5, end-) 30-23-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
} end;
30-13-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule13(p1, p2, p3, p4, span);
  case Thunk(case State20(new-cbs-30-20(cbs, val, start)))
end;
30-24-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule24(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State20(new-cbs-30-20(cbs, val, start)))
end;
30-25-0 = funct(cbs, p1, p2, p3, p4, p5, p6, p7, p8, start, end-)
  span = start.merge(end-);
  val = rule25(p1, p2, p3, p4, p5, p6, p7, p8, span);
  case Thunk(case State20(new-cbs-30-20(cbs, val, start)))
end;
new-cbs-30-29 = funct(cbs, val, start) {
  25-1: funct(p1, p2, p3, p4, p5, p6, p7, end-) 30-25-0(cbs, val, p1, p2, p3, p4, p5, p6, p7, start, end-) end,
  24-1: funct(p1, p2, p3, p4, p5, end-) 30-24-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
  13-1: funct(p1, p2, p3, end-) 30-13-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
30-26-0 = funct(cbs, p1, p2, p3, p4, p5, p6, p7, p8, start, end-)
  span = start.merge(end-);
  val = rule26(p1, p2, p3, p4, p5, p6, p7, p8, span);
  case Thunk(case State20(new-cbs-30-20(cbs, val, start)))
end;
new-cbs-30-21 = funct(cbs, val, start) {
  26-1: funct(p1, p2, p3, p4, p5, p6, p7, end-) 30-26-0(cbs, val, p1, p2, p3, p4, p5, p6, p7, start, end-) end,
} end;
35-26-0 = funct(cbs, p1, p2, p3, p4, p5, p6, p7, p8, start, end-)
  span = start.merge(end-);
  val = rule26(p1, p2, p3, p4, p5, p6, p7, p8, span);
  case Thunk(case State20(new-cbs-35-20(cbs, val, start)))
end;
new-cbs-35-21 = funct(cbs, val, start) {
  26-1: funct(p1, p2, p3, p4, p5, p6, p7, end-) 35-26-0(cbs, val, p1, p2, p3, p4, p5, p6, p7, start, end-) end,
} end;
71-13-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule13(p1, p2, p3, p4, span);
  case Thunk(case State20(new-cbs-71-20(cbs, val, start)))
end;
71-24-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule24(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State20(new-cbs-71-20(cbs, val, start)))
end;
71-25-0 = funct(cbs, p1, p2, p3, p4, p5, p6, p7, p8, start, end-)
  span = start.merge(end-);
  val = rule25(p1, p2, p3, p4, p5, p6, p7, p8, span);
  case Thunk(case State20(new-cbs-71-20(cbs, val, start)))
end;
new-cbs-71-29 = funct(cbs, val, start) {
  25-1: funct(p1, p2, p3, p4, p5, p6, p7, end-) 71-25-0(cbs, val, p1, p2, p3, p4, p5, p6, p7, start, end-) end,
  24-1: funct(p1, p2, p3, p4, p5, end-) 71-24-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
  13-1: funct(p1, p2, p3, end-) 71-13-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
71-26-0 = funct(cbs, p1, p2, p3, p4, p5, p6, p7, p8, start, end-)
  span = start.merge(end-);
  val = rule26(p1, p2, p3, p4, p5, p6, p7, p8, span);
  case Thunk(case State20(new-cbs-71-20(cbs, val, start)))
end;
new-cbs-71-21 = funct(cbs, val, start) {
  26-1: funct(p1, p2, p3, p4, p5, p6, p7, end-) 71-26-0(cbs, val, p1, p2, p3, p4, p5, p6, p7, start, end-) end,
} end;
109-50-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule50(p1, p2, p3, span);
  case Thunk(case State70(new-cbs-109-70(cbs, val, start)))
end;
new-cbs-109-55 = funct(cbs, val, start) {
  50-1: funct(p1, p2, end-) 109-50-0(cbs, val, p1, p2, start, end-) end,
} end;
109-20-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule20(p1, p2, p3, span);
  case Thunk(case State110(new-cbs-109-110(cbs, val, start)))
end;
new-cbs-109-52 = funct(cbs, val, start) {
  20-1: funct(p1, p2, end-) 109-20-0(cbs, val, p1, p2, start, end-) end,
} end;
109-21-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule21(p1, p2, p3, span);
  case Thunk(case State110(new-cbs-109-110(cbs, val, start)))
end;
new-cbs-109-44 = funct(cbs, val, start) {
  21-1: funct(p1, p2, end-) 109-21-0(cbs, val, p1, p2, start, end-) end,
} end;
109-22-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule22(p1, span);
  case Thunk(case State110(new-cbs-109-110(cbs, val, start)))
end;
new-cbs-109-43 = funct(cbs, val, start) {
  22-1: funct(end-) 109-22-0(cbs, val, start, end-) end,
} end;
109-23-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule23(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State110(new-cbs-109-110(cbs, val, start)))
end;
new-cbs-109-35 = funct(cbs, val, start) {
  23-1: funct(p1, p2, p3, p4, p5, end-) 109-23-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
} end;
109-13-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule13(p1, p2, p3, p4, span);
  case Thunk(case State110(new-cbs-109-110(cbs, val, start)))
end;
109-24-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule24(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State110(new-cbs-109-110(cbs, val, start)))
end;
109-25-0 = funct(cbs, p1, p2, p3, p4, p5, p6, p7, p8, start, end-)
  span = start.merge(end-);
  val = rule25(p1, p2, p3, p4, p5, p6, p7, p8, span);
  case Thunk(case State110(new-cbs-109-110(cbs, val, start)))
end;
new-cbs-109-29 = funct(cbs, val, start) {
  25-1: funct(p1, p2, p3, p4, p5, p6, p7, end-) 109-25-0(cbs, val, p1, p2, p3, p4, p5, p6, p7, start, end-) end,
  24-1: funct(p1, p2, p3, p4, p5, end-) 109-24-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
  13-1: funct(p1, p2, p3, end-) 109-13-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
109-26-0 = funct(cbs, p1, p2, p3, p4, p5, p6, p7, p8, start, end-)
  span = start.merge(end-);
  val = rule26(p1, p2, p3, p4, p5, p6, p7, p8, span);
  case Thunk(case State110(new-cbs-109-110(cbs, val, start)))
end;
new-cbs-109-21 = funct(cbs, val, start) {
  26-1: funct(p1, p2, p3, p4, p5, p6, p7, end-) 109-26-0(cbs, val, p1, p2, p3, p4, p5, p6, p7, start, end-) end,
} end;
let state109 future = (
  let state71 future = (
    let state35 future = (
      let state29 future = (
        state118 = funct(cbs)
          tok = get-token();
          debug = "state118:
exprns := DO UNSAFE % expr END
expr := % expr ; exprns
expr := % exprns
exprns := % FUNCT unsafe_opt thisp_opt ( param_list ) expr END
exprns := % DO FOR letpat IN expr THEN expr END
exprns := % DO WHILE expr THEN expr END
exprns := % IF expr THEN expr elseb_opt END
exprns := % JS
exprns := % [ restexpr_list ]
exprns := % CASE id objlit
exprns := % objlit
objlit := % { keyval_list }
objlit := % ( expr_list )
exprns := % exprns ( expr_list )
exprns := % exprns field_sub
exprns := % exprns . phantom_id = exprns
exprns := % LET varpat FUTURE = exprns
exprns := % letpat = poly_opt exprns
letpat := % LET pattern
letpat := % varpat
varpat := % id
id := % END
id := % FOR
id := % WHILE
id := % ID
exprns := % DO UNSAFE expr END
exprns := % ! exprns
exprns := % exprns BINOP exprns
exprns := % string
string := % STRING
exprns := % id";
          if tok == undef then
            UnexpectedEOFError(debug)
          else if tok.type == "FUNCT" then
            tokens.pop();
            state21(new-cbs-118-21(cbs, tok, tok.span))
          else if tok.type == "DO" then
            tokens.pop();
            state29(new-cbs-118-29(cbs, tok, tok.span))
          else if tok.type == "IF" then
            tokens.pop();
            state35(new-cbs-118-35(cbs, tok, tok.span))
          else if tok.type == "JS" then
            tokens.pop();
            state43(new-cbs-118-43(cbs, tok, tok.span))
          else if tok.type == "[" then
            tokens.pop();
            state44(new-cbs-118-44(cbs, tok, tok.span))
          else if tok.type == "CASE" then
            tokens.pop();
            state52(new-cbs-118-52(cbs, tok, tok.span))
          else if tok.type == "{" then
            tokens.pop();
            state55(new-cbs-118-55(cbs, tok, tok.span))
          else if tok.type == "(" then
            tokens.pop();
            state71(new-cbs-118-71(cbs, tok, tok.span))
          else if tok.type == "LET" then
            tokens.pop();
            state74(new-cbs-118-74(cbs, tok, tok.span))
          else if tok.type == "END" then
            tokens.pop();
            state62(new-cbs-118-62(cbs, tok, tok.span))
          else if tok.type == "FOR" then
            tokens.pop();
            state63(new-cbs-118-63(cbs, tok, tok.span))
          else if tok.type == "WHILE" then
            tokens.pop();
            state64(new-cbs-118-64(cbs, tok, tok.span))
          else if tok.type == "ID" then
            tokens.pop();
            state65(new-cbs-118-65(cbs, tok, tok.span))
          else if tok.type == "!" then
            tokens.pop();
            state109(new-cbs-118-109(cbs, tok, tok.span))
          else if tok.type == "STRING" then
            tokens.pop();
            state112(new-cbs-118-112(cbs, tok, tok.span))
          else UnexpectedTokenError(tok, debug)
          end end end end end end end end end end end end end end end end
        end;
        state30 = funct(cbs)
          tok = get-token();
          debug = "state30:
exprns := DO WHILE % expr THEN expr END
expr := % expr ; exprns
expr := % exprns
exprns := % FUNCT unsafe_opt thisp_opt ( param_list ) expr END
exprns := % DO FOR letpat IN expr THEN expr END
exprns := % DO WHILE expr THEN expr END
exprns := % IF expr THEN expr elseb_opt END
exprns := % JS
exprns := % [ restexpr_list ]
exprns := % CASE id objlit
exprns := % objlit
objlit := % { keyval_list }
objlit := % ( expr_list )
exprns := % exprns ( expr_list )
exprns := % exprns field_sub
exprns := % exprns . phantom_id = exprns
exprns := % LET varpat FUTURE = exprns
exprns := % letpat = poly_opt exprns
letpat := % LET pattern
letpat := % varpat
varpat := % id
id := % END
id := % FOR
id := % WHILE
id := % ID
exprns := % DO UNSAFE expr END
exprns := % ! exprns
exprns := % exprns BINOP exprns
exprns := % string
string := % STRING
exprns := % id";
          if tok == undef then
            UnexpectedEOFError(debug)
          else if tok.type == "FUNCT" then
            tokens.pop();
            state21(new-cbs-30-21(cbs, tok, tok.span))
          else if tok.type == "DO" then
            tokens.pop();
            state29(new-cbs-30-29(cbs, tok, tok.span))
          else if tok.type == "IF" then
            tokens.pop();
            state35(new-cbs-30-35(cbs, tok, tok.span))
          else if tok.type == "JS" then
            tokens.pop();
            state43(new-cbs-30-43(cbs, tok, tok.span))
          else if tok.type == "[" then
            tokens.pop();
            state44(new-cbs-30-44(cbs, tok, tok.span))
          else if tok.type == "CASE" then
            tokens.pop();
            state52(new-cbs-30-52(cbs, tok, tok.span))
          else if tok.type == "{" then
            tokens.pop();
            state55(new-cbs-30-55(cbs, tok, tok.span))
          else if tok.type == "(" then
            tokens.pop();
            state71(new-cbs-30-71(cbs, tok, tok.span))
          else if tok.type == "LET" then
            tokens.pop();
            state74(new-cbs-30-74(cbs, tok, tok.span))
          else if tok.type == "END" then
            tokens.pop();
            state62(new-cbs-30-62(cbs, tok, tok.span))
          else if tok.type == "FOR" then
            tokens.pop();
            state63(new-cbs-30-63(cbs, tok, tok.span))
          else if tok.type == "WHILE" then
            tokens.pop();
            state64(new-cbs-30-64(cbs, tok, tok.span))
          else if tok.type == "ID" then
            tokens.pop();
            state65(new-cbs-30-65(cbs, tok, tok.span))
          else if tok.type == "!" then
            tokens.pop();
            state109(new-cbs-30-109(cbs, tok, tok.span))
          else if tok.type == "STRING" then
            tokens.pop();
            state112(new-cbs-30-112(cbs, tok, tok.span))
          else UnexpectedTokenError(tok, debug)
          end end end end end end end end end end end end end end end end
        end;
        funct(cbs)
          tok = get-token();
          debug = "state29:
exprns := DO % WHILE expr THEN expr END
exprns := DO % UNSAFE expr END
exprns := DO % FOR letpat IN expr THEN expr END";
          if tok == undef then
            UnexpectedEOFError(debug)
          else if tok.type == "WHILE" then
            tokens.pop();
            state30(new-cbs-29-30(cbs, tok, tok.span))
          else if tok.type == "ID" && (tok.val == "unsafe").0 then
            tokens.pop();
            state118(new-cbs-29-118(cbs, tok, tok.span))
          else if tok.type == "FOR" then
            tokens.pop();
            state121(new-cbs-29-121(cbs, tok, tok.span))
          else UnexpectedTokenError(tok, debug)
          end end end end
        end
      ).0;
      funct(cbs)
        tok = get-token();
        debug = "state35:
exprns := IF % expr THEN expr elseb_opt END
expr := % expr ; exprns
expr := % exprns
exprns := % FUNCT unsafe_opt thisp_opt ( param_list ) expr END
exprns := % DO FOR letpat IN expr THEN expr END
exprns := % DO WHILE expr THEN expr END
exprns := % IF expr THEN expr elseb_opt END
exprns := % JS
exprns := % [ restexpr_list ]
exprns := % CASE id objlit
exprns := % objlit
objlit := % { keyval_list }
objlit := % ( expr_list )
exprns := % exprns ( expr_list )
exprns := % exprns field_sub
exprns := % exprns . phantom_id = exprns
exprns := % LET varpat FUTURE = exprns
exprns := % letpat = poly_opt exprns
letpat := % LET pattern
letpat := % varpat
varpat := % id
id := % END
id := % FOR
id := % WHILE
id := % ID
exprns := % DO UNSAFE expr END
exprns := % ! exprns
exprns := % exprns BINOP exprns
exprns := % string
string := % STRING
exprns := % id";
        if tok == undef then
          UnexpectedEOFError(debug)
        else if tok.type == "FUNCT" then
          tokens.pop();
          state21(new-cbs-35-21(cbs, tok, tok.span))
        else if tok.type == "DO" then
          tokens.pop();
          state29(new-cbs-35-29(cbs, tok, tok.span))
        else if tok.type == "IF" then
          tokens.pop();
          state35(new-cbs-35-35(cbs, tok, tok.span))
        else if tok.type == "JS" then
          tokens.pop();
          state43(new-cbs-35-43(cbs, tok, tok.span))
        else if tok.type == "[" then
          tokens.pop();
          state44(new-cbs-35-44(cbs, tok, tok.span))
        else if tok.type == "CASE" then
          tokens.pop();
          state52(new-cbs-35-52(cbs, tok, tok.span))
        else if tok.type == "{" then
          tokens.pop();
          state55(new-cbs-35-55(cbs, tok, tok.span))
        else if tok.type == "(" then
          tokens.pop();
          state71(new-cbs-35-71(cbs, tok, tok.span))
        else if tok.type == "LET" then
          tokens.pop();
          state74(new-cbs-35-74(cbs, tok, tok.span))
        else if tok.type == "END" then
          tokens.pop();
          state62(new-cbs-35-62(cbs, tok, tok.span))
        else if tok.type == "FOR" then
          tokens.pop();
          state63(new-cbs-35-63(cbs, tok, tok.span))
        else if tok.type == "WHILE" then
          tokens.pop();
          state64(new-cbs-35-64(cbs, tok, tok.span))
        else if tok.type == "ID" then
          tokens.pop();
          state65(new-cbs-35-65(cbs, tok, tok.span))
        else if tok.type == "!" then
          tokens.pop();
          state109(new-cbs-35-109(cbs, tok, tok.span))
        else if tok.type == "STRING" then
          tokens.pop();
          state112(new-cbs-35-112(cbs, tok, tok.span))
        else UnexpectedTokenError(tok, debug)
        end end end end end end end end end end end end end end end end
      end
    ).0;
    funct(cbs)
      tok = get-token();
      debug = "state71:
objlit := ( % expr_list )
expr_list := % expr , expr_list
expr := % expr ; exprns
expr := % exprns
exprns := % FUNCT unsafe_opt thisp_opt ( param_list ) expr END
exprns := % DO FOR letpat IN expr THEN expr END
exprns := % DO WHILE expr THEN expr END
exprns := % IF expr THEN expr elseb_opt END
exprns := % JS
exprns := % [ restexpr_list ]
exprns := % CASE id objlit
exprns := % objlit
objlit := % { keyval_list }
objlit := % ( expr_list )
exprns := % exprns ( expr_list )
exprns := % exprns field_sub
exprns := % exprns . phantom_id = exprns
exprns := % LET varpat FUTURE = exprns
exprns := % letpat = poly_opt exprns
letpat := % LET pattern
letpat := % varpat
varpat := % id
id := % END
id := % FOR
id := % WHILE
id := % ID
exprns := % DO UNSAFE expr END
exprns := % ! exprns
exprns := % exprns BINOP exprns
exprns := % string
string := % STRING
exprns := % id
expr_list := % expr
expr_list := %";
      if tok == undef then
        UnexpectedEOFError(debug)
      else if tok.type == "FUNCT" then
        tokens.pop();
        state21(new-cbs-71-21(cbs, tok, tok.span))
      else if tok.type == "DO" then
        tokens.pop();
        state29(new-cbs-71-29(cbs, tok, tok.span))
      else if tok.type == "IF" then
        tokens.pop();
        state35(new-cbs-71-35(cbs, tok, tok.span))
      else if tok.type == "JS" then
        tokens.pop();
        state43(new-cbs-71-43(cbs, tok, tok.span))
      else if tok.type == "[" then
        tokens.pop();
        state44(new-cbs-71-44(cbs, tok, tok.span))
      else if tok.type == "CASE" then
        tokens.pop();
        state52(new-cbs-71-52(cbs, tok, tok.span))
      else if tok.type == "{" then
        tokens.pop();
        state55(new-cbs-71-55(cbs, tok, tok.span))
      else if tok.type == "(" then
        tokens.pop();
        state71(new-cbs-71-71(cbs, tok, tok.span))
      else if tok.type == "LET" then
        tokens.pop();
        state74(new-cbs-71-74(cbs, tok, tok.span))
      else if tok.type == "END" then
        tokens.pop();
        state62(new-cbs-71-62(cbs, tok, tok.span))
      else if tok.type == "FOR" then
        tokens.pop();
        state63(new-cbs-71-63(cbs, tok, tok.span))
      else if tok.type == "WHILE" then
        tokens.pop();
        state64(new-cbs-71-64(cbs, tok, tok.span))
      else if tok.type == "ID" then
        tokens.pop();
        state65(new-cbs-71-65(cbs, tok, tok.span))
      else if tok.type == "!" then
        tokens.pop();
        state109(new-cbs-71-109(cbs, tok, tok.span))
      else if tok.type == "STRING" then
        tokens.pop();
        state112(new-cbs-71-112(cbs, tok, tok.span))
      else
        span = tok.span.start();
        71-2-0(cbs, span, span)
      end end end end end end end end end end end end end end end end
    end
  ).0;
  funct(cbs)
    tok = get-token();
    debug = "state109:
exprns := ! % exprns
exprns := % FUNCT unsafe_opt thisp_opt ( param_list ) expr END
exprns := % DO FOR letpat IN expr THEN expr END
exprns := % DO WHILE expr THEN expr END
exprns := % IF expr THEN expr elseb_opt END
exprns := % JS
exprns := % [ restexpr_list ]
exprns := % CASE id objlit
exprns := % objlit
objlit := % { keyval_list }
objlit := % ( expr_list )
exprns := % exprns ( expr_list )
exprns := % exprns field_sub
exprns := % exprns . phantom_id = exprns
exprns := % LET varpat FUTURE = exprns
exprns := % letpat = poly_opt exprns
letpat := % LET pattern
letpat := % varpat
varpat := % id
id := % END
id := % FOR
id := % WHILE
id := % ID
exprns := % DO UNSAFE expr END
exprns := % ! exprns
exprns := % exprns BINOP exprns
exprns := % string
string := % STRING
exprns := % id";
    if tok == undef then
      UnexpectedEOFError(debug)
    else if tok.type == "FUNCT" then
      tokens.pop();
      state21(new-cbs-109-21(cbs, tok, tok.span))
    else if tok.type == "DO" then
      tokens.pop();
      state29(new-cbs-109-29(cbs, tok, tok.span))
    else if tok.type == "IF" then
      tokens.pop();
      state35(new-cbs-109-35(cbs, tok, tok.span))
    else if tok.type == "JS" then
      tokens.pop();
      state43(new-cbs-109-43(cbs, tok, tok.span))
    else if tok.type == "[" then
      tokens.pop();
      state44(new-cbs-109-44(cbs, tok, tok.span))
    else if tok.type == "CASE" then
      tokens.pop();
      state52(new-cbs-109-52(cbs, tok, tok.span))
    else if tok.type == "{" then
      tokens.pop();
      state55(new-cbs-109-55(cbs, tok, tok.span))
    else if tok.type == "(" then
      tokens.pop();
      state71(new-cbs-109-71(cbs, tok, tok.span))
    else if tok.type == "LET" then
      tokens.pop();
      state74(new-cbs-109-74(cbs, tok, tok.span))
    else if tok.type == "END" then
      tokens.pop();
      state62(new-cbs-109-62(cbs, tok, tok.span))
    else if tok.type == "FOR" then
      tokens.pop();
      state63(new-cbs-109-63(cbs, tok, tok.span))
    else if tok.type == "WHILE" then
      tokens.pop();
      state64(new-cbs-109-64(cbs, tok, tok.span))
    else if tok.type == "ID" then
      tokens.pop();
      state65(new-cbs-109-65(cbs, tok, tok.span))
    else if tok.type == "!" then
      tokens.pop();
      state109(new-cbs-109-109(cbs, tok, tok.span))
    else if tok.type == "STRING" then
      tokens.pop();
      state112(new-cbs-109-112(cbs, tok, tok.span))
    else UnexpectedTokenError(tok, debug)
    end end end end end end end end end end end end end end end end
  end
).0;
5-9-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule9(p1, span);
  case Thunk(case State6(new-cbs-5-6(cbs, val, start)))
end;
5-14-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule14(p1, p2, p3, p4, span);
  case Thunk(case State6(new-cbs-5-6(cbs, val, start)))
end;
new-cbs-5-103 = funct(cbs, val, start) {
  14-1: funct(p1, p2, p3, end-) 5-14-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
5-44-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule44(p1, span);
  case Thunk(case State103(new-cbs-5-103(cbs, val, start)))
end;
new-cbs-5-107 = funct(cbs, val, start) {
  44-1: funct(end-) 5-44-0(cbs, val, start, end-) end,
} end;
5-30-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule30(p1, span);
  case Thunk(case State107(new-cbs-5-107(cbs, val, start)))
end;
new-cbs-5-108 = funct(cbs, val, start) {
  30-1: funct(end-) 5-30-0(cbs, val, start, end-) end,
  9-1: funct(end-) 5-9-0(cbs, val, start, end-) end,
} end;
5-5-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule5(p1, span);
  case Thunk(case State108(new-cbs-5-108(cbs, val, start)))
end;
new-cbs-5-65 = funct(cbs, val, start) {
  5-1: funct(end-) 5-5-0(cbs, val, start, end-) end,
} end;
5-6-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule6(p1, span);
  case Thunk(case State108(new-cbs-5-108(cbs, val, start)))
end;
new-cbs-5-64 = funct(cbs, val, start) {
  6-1: funct(end-) 5-6-0(cbs, val, start, end-) end,
} end;
5-7-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule7(p1, span);
  case Thunk(case State108(new-cbs-5-108(cbs, val, start)))
end;
new-cbs-5-63 = funct(cbs, val, start) {
  7-1: funct(end-) 5-7-0(cbs, val, start, end-) end,
} end;
5-8-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule8(p1, span);
  case Thunk(case State108(new-cbs-5-108(cbs, val, start)))
end;
new-cbs-5-62 = funct(cbs, val, start) {
  8-1: funct(end-) 5-8-0(cbs, val, start, end-) end,
} end;
5-45-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule45(p1, p2, span);
  case Thunk(case State103(new-cbs-5-103(cbs, val, start)))
end;
5-15-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
  span = start.merge(end-);
  val = rule15(p1, p2, p3, p4, p5, span);
  case Thunk(case State6(new-cbs-5-6(cbs, val, start)))
end;
new-cbs-5-74 = funct(cbs, val, start) {
  15-1: funct(p1, p2, p3, p4, end-) 5-15-0(cbs, val, p1, p2, p3, p4, start, end-) end,
  45-1: funct(p1, end-) 5-45-0(cbs, val, p1, start, end-) end,
} end;
5-19-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule19(p1, span);
  case Thunk(case State6(new-cbs-5-6(cbs, val, start)))
end;
new-cbs-5-70 = funct(cbs, val, start) {
  19-1: funct(end-) 5-19-0(cbs, val, start, end-) end,
} end;
5-49-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule49(p1, p2, p3, span);
  case Thunk(case State70(new-cbs-5-70(cbs, val, start)))
end;
new-cbs-5-71 = funct(cbs, val, start) {
  49-1: funct(p1, p2, end-) 5-49-0(cbs, val, p1, p2, start, end-) end,
} end;
5-50-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule50(p1, p2, p3, span);
  case Thunk(case State70(new-cbs-5-70(cbs, val, start)))
end;
new-cbs-5-55 = funct(cbs, val, start) {
  50-1: funct(p1, p2, end-) 5-50-0(cbs, val, p1, p2, start, end-) end,
} end;
5-20-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule20(p1, p2, p3, span);
  case Thunk(case State6(new-cbs-5-6(cbs, val, start)))
end;
new-cbs-5-52 = funct(cbs, val, start) {
  20-1: funct(p1, p2, end-) 5-20-0(cbs, val, p1, p2, start, end-) end,
} end;
5-21-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule21(p1, p2, p3, span);
  case Thunk(case State6(new-cbs-5-6(cbs, val, start)))
end;
new-cbs-5-44 = funct(cbs, val, start) {
  21-1: funct(p1, p2, end-) 5-21-0(cbs, val, p1, p2, start, end-) end,
} end;
5-22-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule22(p1, span);
  case Thunk(case State6(new-cbs-5-6(cbs, val, start)))
end;
new-cbs-5-43 = funct(cbs, val, start) {
  22-1: funct(end-) 5-22-0(cbs, val, start, end-) end,
} end;
5-23-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule23(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State6(new-cbs-5-6(cbs, val, start)))
end;
new-cbs-5-35 = funct(cbs, val, start) {
  23-1: funct(p1, p2, p3, p4, p5, end-) 5-23-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
} end;
5-13-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule13(p1, p2, p3, p4, span);
  case Thunk(case State6(new-cbs-5-6(cbs, val, start)))
end;
5-24-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule24(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State6(new-cbs-5-6(cbs, val, start)))
end;
5-25-0 = funct(cbs, p1, p2, p3, p4, p5, p6, p7, p8, start, end-)
  span = start.merge(end-);
  val = rule25(p1, p2, p3, p4, p5, p6, p7, p8, span);
  case Thunk(case State6(new-cbs-5-6(cbs, val, start)))
end;
new-cbs-5-29 = funct(cbs, val, start) {
  25-1: funct(p1, p2, p3, p4, p5, p6, p7, end-) 5-25-0(cbs, val, p1, p2, p3, p4, p5, p6, p7, start, end-) end,
  24-1: funct(p1, p2, p3, p4, p5, end-) 5-24-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
  13-1: funct(p1, p2, p3, end-) 5-13-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
5-26-0 = funct(cbs, p1, p2, p3, p4, p5, p6, p7, p8, start, end-)
  span = start.merge(end-);
  val = rule26(p1, p2, p3, p4, p5, p6, p7, p8, span);
  case Thunk(case State6(new-cbs-5-6(cbs, val, start)))
end;
new-cbs-5-21 = funct(cbs, val, start) {
  26-1: funct(p1, p2, p3, p4, p5, p6, p7, end-) 5-26-0(cbs, val, p1, p2, p3, p4, p5, p6, p7, start, end-) end,
} end;
state5 = funct(cbs)
  tok = get-token();
  debug = "state5:
expr := expr ; % exprns
exprns := % FUNCT unsafe_opt thisp_opt ( param_list ) expr END
exprns := % DO FOR letpat IN expr THEN expr END
exprns := % DO WHILE expr THEN expr END
exprns := % IF expr THEN expr elseb_opt END
exprns := % JS
exprns := % [ restexpr_list ]
exprns := % CASE id objlit
exprns := % objlit
objlit := % { keyval_list }
objlit := % ( expr_list )
exprns := % exprns ( expr_list )
exprns := % exprns field_sub
exprns := % exprns . phantom_id = exprns
exprns := % LET varpat FUTURE = exprns
exprns := % letpat = poly_opt exprns
letpat := % LET pattern
letpat := % varpat
varpat := % id
id := % END
id := % FOR
id := % WHILE
id := % ID
exprns := % DO UNSAFE expr END
exprns := % ! exprns
exprns := % exprns BINOP exprns
exprns := % string
string := % STRING
exprns := % id";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "FUNCT" then
    tokens.pop();
    state21(new-cbs-5-21(cbs, tok, tok.span))
  else if tok.type == "DO" then
    tokens.pop();
    state29(new-cbs-5-29(cbs, tok, tok.span))
  else if tok.type == "IF" then
    tokens.pop();
    state35(new-cbs-5-35(cbs, tok, tok.span))
  else if tok.type == "JS" then
    tokens.pop();
    state43(new-cbs-5-43(cbs, tok, tok.span))
  else if tok.type == "[" then
    tokens.pop();
    state44(new-cbs-5-44(cbs, tok, tok.span))
  else if tok.type == "CASE" then
    tokens.pop();
    state52(new-cbs-5-52(cbs, tok, tok.span))
  else if tok.type == "{" then
    tokens.pop();
    state55(new-cbs-5-55(cbs, tok, tok.span))
  else if tok.type == "(" then
    tokens.pop();
    state71(new-cbs-5-71(cbs, tok, tok.span))
  else if tok.type == "LET" then
    tokens.pop();
    state74(new-cbs-5-74(cbs, tok, tok.span))
  else if tok.type == "END" then
    tokens.pop();
    state62(new-cbs-5-62(cbs, tok, tok.span))
  else if tok.type == "FOR" then
    tokens.pop();
    state63(new-cbs-5-63(cbs, tok, tok.span))
  else if tok.type == "WHILE" then
    tokens.pop();
    state64(new-cbs-5-64(cbs, tok, tok.span))
  else if tok.type == "ID" then
    tokens.pop();
    state65(new-cbs-5-65(cbs, tok, tok.span))
  else if tok.type == "!" then
    tokens.pop();
    state109(new-cbs-5-109(cbs, tok, tok.span))
  else if tok.type == "STRING" then
    tokens.pop();
    state112(new-cbs-5-112(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end end end end end end end end end end end end end end end
end;
126-25-7 = funct(cbs, p8, end-) cbs.25-7(p8, end-) end;
new-cbs-126-127 = funct(cbs, val, start) {
  25-8: funct(end-) 126-25-7(cbs, val, end-) end,
} end;
state127 = funct(cbs)
  tok = get-token();
  debug = "state127:
exprns := DO FOR letpat IN expr THEN expr END %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.25-8(tok.span.start())
  end
end;
state126 = funct(cbs)
  tok = get-token();
  debug = "state126:
exprns := DO FOR letpat IN expr THEN expr % END
expr := expr % ; exprns";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "END" then
    tokens.pop();
    state127(new-cbs-126-127(cbs, tok, tok.span))
  else if tok.type == ";" then
    tokens.pop();
    state5(new-cbs-126-5(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end end
end;
124-1-1 = funct(cbs, p2, p3, end-) cbs.1-1(p2, p3, end-) end;
new-cbs-124-5 = funct(cbs, val, start) {
  1-2: funct(p2, end-) 124-1-1(cbs, val, p2, end-) end,
} end;
124-25-5 = funct(cbs, p6, p7, p8, end-) cbs.25-5(p6, p7, p8, end-) end;
new-cbs-124-125 = funct(cbs, val, start) {
  25-6: funct(p6, p7, end-) 124-25-5(cbs, val, p6, p7, end-) end,
} end;
125-25-6 = funct(cbs, p7, p8, end-) cbs.25-6(p7, p8, end-) end;
let new-cbs-125-126 future = (
  125-1-0 = funct(cbs, p1, p2, p3, start, end-)
    span = start.merge(end-);
    val = rule1(p1, p2, p3, span);
    case Thunk(case State126(new-cbs-125-126(cbs, val, start)))
  end;
  funct(cbs, val, start) {
    25-7: funct(p7, end-) 125-25-6(cbs, val, p7, end-) end,
    1-1: funct(p1, p2, end-) 125-1-0(cbs, val, p1, p2, start, end-) end,
  } end
).0;
125-0-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule0(p1, span);
  case Thunk(case State126(new-cbs-125-126(cbs, val, start)))
end;
let new-cbs-125-20 future = (
  125-11-0 = funct(cbs, p1, p2, p3, start, end-)
    span = start.merge(end-);
    val = rule11(p1, p2, p3, span);
    case Thunk(case State20(new-cbs-125-20(cbs, val, start)))
  end;
  125-16-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
    span = start.merge(end-);
    val = rule16(p1, p2, p3, p4, p5, span);
    case Thunk(case State20(new-cbs-125-20(cbs, val, start)))
  end;
  125-17-0 = funct(cbs, p1, p2, start, end-)
    span = start.merge(end-);
    val = rule17(p1, p2, span);
    case Thunk(case State20(new-cbs-125-20(cbs, val, start)))
  end;
  125-18-0 = funct(cbs, p1, p2, p3, p4, start, end-)
    span = start.merge(end-);
    val = rule18(p1, p2, p3, p4, span);
    case Thunk(case State20(new-cbs-125-20(cbs, val, start)))
  end;
  funct(cbs, val, start) {
    0-1: funct(end-) 125-0-0(cbs, val, start, end-) end,
    18-1: funct(p1, p2, p3, end-) 125-18-0(cbs, val, p1, p2, p3, start, end-) end,
    17-1: funct(p1, end-) 125-17-0(cbs, val, p1, start, end-) end,
    16-1: funct(p1, p2, p3, p4, end-) 125-16-0(cbs, val, p1, p2, p3, p4, start, end-) end,
    11-1: funct(p1, p2, end-) 125-11-0(cbs, val, p1, p2, start, end-) end,
  } end
).0;
125-10-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule10(p1, span);
  case Thunk(case State20(new-cbs-125-20(cbs, val, start)))
end;
new-cbs-125-111 = funct(cbs, val, start) {
  10-1: funct(end-) 125-10-0(cbs, val, start, end-) end,
} end;
125-27-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule27(p1, span);
  case Thunk(case State111(new-cbs-125-111(cbs, val, start)))
end;
new-cbs-125-112 = funct(cbs, val, start) {
  27-1: funct(end-) 125-27-0(cbs, val, start, end-) end,
} end;
125-12-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule12(p1, p2, span);
  case Thunk(case State20(new-cbs-125-20(cbs, val, start)))
end;
new-cbs-125-109 = funct(cbs, val, start) {
  12-1: funct(p1, end-) 125-12-0(cbs, val, p1, start, end-) end,
} end;
125-9-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule9(p1, span);
  case Thunk(case State20(new-cbs-125-20(cbs, val, start)))
end;
125-14-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule14(p1, p2, p3, p4, span);
  case Thunk(case State20(new-cbs-125-20(cbs, val, start)))
end;
new-cbs-125-103 = funct(cbs, val, start) {
  14-1: funct(p1, p2, p3, end-) 125-14-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
125-44-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule44(p1, span);
  case Thunk(case State103(new-cbs-125-103(cbs, val, start)))
end;
new-cbs-125-107 = funct(cbs, val, start) {
  44-1: funct(end-) 125-44-0(cbs, val, start, end-) end,
} end;
125-30-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule30(p1, span);
  case Thunk(case State107(new-cbs-125-107(cbs, val, start)))
end;
new-cbs-125-108 = funct(cbs, val, start) {
  30-1: funct(end-) 125-30-0(cbs, val, start, end-) end,
  9-1: funct(end-) 125-9-0(cbs, val, start, end-) end,
} end;
125-5-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule5(p1, span);
  case Thunk(case State108(new-cbs-125-108(cbs, val, start)))
end;
new-cbs-125-65 = funct(cbs, val, start) {
  5-1: funct(end-) 125-5-0(cbs, val, start, end-) end,
} end;
125-6-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule6(p1, span);
  case Thunk(case State108(new-cbs-125-108(cbs, val, start)))
end;
new-cbs-125-64 = funct(cbs, val, start) {
  6-1: funct(end-) 125-6-0(cbs, val, start, end-) end,
} end;
125-7-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule7(p1, span);
  case Thunk(case State108(new-cbs-125-108(cbs, val, start)))
end;
new-cbs-125-63 = funct(cbs, val, start) {
  7-1: funct(end-) 125-7-0(cbs, val, start, end-) end,
} end;
125-8-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule8(p1, span);
  case Thunk(case State108(new-cbs-125-108(cbs, val, start)))
end;
new-cbs-125-62 = funct(cbs, val, start) {
  8-1: funct(end-) 125-8-0(cbs, val, start, end-) end,
} end;
125-45-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule45(p1, p2, span);
  case Thunk(case State103(new-cbs-125-103(cbs, val, start)))
end;
125-15-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
  span = start.merge(end-);
  val = rule15(p1, p2, p3, p4, p5, span);
  case Thunk(case State20(new-cbs-125-20(cbs, val, start)))
end;
new-cbs-125-74 = funct(cbs, val, start) {
  15-1: funct(p1, p2, p3, p4, end-) 125-15-0(cbs, val, p1, p2, p3, p4, start, end-) end,
  45-1: funct(p1, end-) 125-45-0(cbs, val, p1, start, end-) end,
} end;
125-19-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule19(p1, span);
  case Thunk(case State20(new-cbs-125-20(cbs, val, start)))
end;
new-cbs-125-70 = funct(cbs, val, start) {
  19-1: funct(end-) 125-19-0(cbs, val, start, end-) end,
} end;
125-49-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule49(p1, p2, p3, span);
  case Thunk(case State70(new-cbs-125-70(cbs, val, start)))
end;
new-cbs-125-71 = funct(cbs, val, start) {
  49-1: funct(p1, p2, end-) 125-49-0(cbs, val, p1, p2, start, end-) end,
} end;
125-50-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule50(p1, p2, p3, span);
  case Thunk(case State70(new-cbs-125-70(cbs, val, start)))
end;
new-cbs-125-55 = funct(cbs, val, start) {
  50-1: funct(p1, p2, end-) 125-50-0(cbs, val, p1, p2, start, end-) end,
} end;
125-20-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule20(p1, p2, p3, span);
  case Thunk(case State20(new-cbs-125-20(cbs, val, start)))
end;
new-cbs-125-52 = funct(cbs, val, start) {
  20-1: funct(p1, p2, end-) 125-20-0(cbs, val, p1, p2, start, end-) end,
} end;
125-21-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule21(p1, p2, p3, span);
  case Thunk(case State20(new-cbs-125-20(cbs, val, start)))
end;
new-cbs-125-44 = funct(cbs, val, start) {
  21-1: funct(p1, p2, end-) 125-21-0(cbs, val, p1, p2, start, end-) end,
} end;
125-22-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule22(p1, span);
  case Thunk(case State20(new-cbs-125-20(cbs, val, start)))
end;
new-cbs-125-43 = funct(cbs, val, start) {
  22-1: funct(end-) 125-22-0(cbs, val, start, end-) end,
} end;
125-23-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule23(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State20(new-cbs-125-20(cbs, val, start)))
end;
new-cbs-125-35 = funct(cbs, val, start) {
  23-1: funct(p1, p2, p3, p4, p5, end-) 125-23-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
} end;
125-13-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule13(p1, p2, p3, p4, span);
  case Thunk(case State20(new-cbs-125-20(cbs, val, start)))
end;
125-24-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule24(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State20(new-cbs-125-20(cbs, val, start)))
end;
125-25-0 = funct(cbs, p1, p2, p3, p4, p5, p6, p7, p8, start, end-)
  span = start.merge(end-);
  val = rule25(p1, p2, p3, p4, p5, p6, p7, p8, span);
  case Thunk(case State20(new-cbs-125-20(cbs, val, start)))
end;
new-cbs-125-29 = funct(cbs, val, start) {
  25-1: funct(p1, p2, p3, p4, p5, p6, p7, end-) 125-25-0(cbs, val, p1, p2, p3, p4, p5, p6, p7, start, end-) end,
  24-1: funct(p1, p2, p3, p4, p5, end-) 125-24-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
  13-1: funct(p1, p2, p3, end-) 125-13-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
125-26-0 = funct(cbs, p1, p2, p3, p4, p5, p6, p7, p8, start, end-)
  span = start.merge(end-);
  val = rule26(p1, p2, p3, p4, p5, p6, p7, p8, span);
  case Thunk(case State20(new-cbs-125-20(cbs, val, start)))
end;
new-cbs-125-21 = funct(cbs, val, start) {
  26-1: funct(p1, p2, p3, p4, p5, p6, p7, end-) 125-26-0(cbs, val, p1, p2, p3, p4, p5, p6, p7, start, end-) end,
} end;
state125 = funct(cbs)
  tok = get-token();
  debug = "state125:
exprns := DO FOR letpat IN expr THEN % expr END
expr := % expr ; exprns
expr := % exprns
exprns := % FUNCT unsafe_opt thisp_opt ( param_list ) expr END
exprns := % DO FOR letpat IN expr THEN expr END
exprns := % DO WHILE expr THEN expr END
exprns := % IF expr THEN expr elseb_opt END
exprns := % JS
exprns := % [ restexpr_list ]
exprns := % CASE id objlit
exprns := % objlit
objlit := % { keyval_list }
objlit := % ( expr_list )
exprns := % exprns ( expr_list )
exprns := % exprns field_sub
exprns := % exprns . phantom_id = exprns
exprns := % LET varpat FUTURE = exprns
exprns := % letpat = poly_opt exprns
letpat := % LET pattern
letpat := % varpat
varpat := % id
id := % END
id := % FOR
id := % WHILE
id := % ID
exprns := % DO UNSAFE expr END
exprns := % ! exprns
exprns := % exprns BINOP exprns
exprns := % string
string := % STRING
exprns := % id";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "FUNCT" then
    tokens.pop();
    state21(new-cbs-125-21(cbs, tok, tok.span))
  else if tok.type == "DO" then
    tokens.pop();
    state29(new-cbs-125-29(cbs, tok, tok.span))
  else if tok.type == "IF" then
    tokens.pop();
    state35(new-cbs-125-35(cbs, tok, tok.span))
  else if tok.type == "JS" then
    tokens.pop();
    state43(new-cbs-125-43(cbs, tok, tok.span))
  else if tok.type == "[" then
    tokens.pop();
    state44(new-cbs-125-44(cbs, tok, tok.span))
  else if tok.type == "CASE" then
    tokens.pop();
    state52(new-cbs-125-52(cbs, tok, tok.span))
  else if tok.type == "{" then
    tokens.pop();
    state55(new-cbs-125-55(cbs, tok, tok.span))
  else if tok.type == "(" then
    tokens.pop();
    state71(new-cbs-125-71(cbs, tok, tok.span))
  else if tok.type == "LET" then
    tokens.pop();
    state74(new-cbs-125-74(cbs, tok, tok.span))
  else if tok.type == "END" then
    tokens.pop();
    state62(new-cbs-125-62(cbs, tok, tok.span))
  else if tok.type == "FOR" then
    tokens.pop();
    state63(new-cbs-125-63(cbs, tok, tok.span))
  else if tok.type == "WHILE" then
    tokens.pop();
    state64(new-cbs-125-64(cbs, tok, tok.span))
  else if tok.type == "ID" then
    tokens.pop();
    state65(new-cbs-125-65(cbs, tok, tok.span))
  else if tok.type == "!" then
    tokens.pop();
    state109(new-cbs-125-109(cbs, tok, tok.span))
  else if tok.type == "STRING" then
    tokens.pop();
    state112(new-cbs-125-112(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end end end end end end end end end end end end end end end
end;
state124 = funct(cbs)
  tok = get-token();
  debug = "state124:
exprns := DO FOR letpat IN expr % THEN expr END
expr := expr % ; exprns";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "ID" && (tok.val == "then").0 then
    tokens.pop();
    state125(new-cbs-124-125(cbs, tok, tok.span))
  else if tok.type == ";" then
    tokens.pop();
    state5(new-cbs-124-5(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end end
end;
122-25-3 = funct(cbs, p4, p5, p6, p7, p8, end-) cbs.25-3(p4, p5, p6, p7, p8, end-) end;
new-cbs-122-123 = funct(cbs, val, start) {
  25-4: funct(p4, p5, p6, p7, end-) 122-25-3(cbs, val, p4, p5, p6, p7, end-) end,
} end;
123-25-4 = funct(cbs, p5, p6, p7, p8, end-) cbs.25-4(p5, p6, p7, p8, end-) end;
let new-cbs-123-124 future = (
  123-1-0 = funct(cbs, p1, p2, p3, start, end-)
    span = start.merge(end-);
    val = rule1(p1, p2, p3, span);
    case Thunk(case State124(new-cbs-123-124(cbs, val, start)))
  end;
  funct(cbs, val, start) {
    25-5: funct(p5, p6, p7, end-) 123-25-4(cbs, val, p5, p6, p7, end-) end,
    1-1: funct(p1, p2, end-) 123-1-0(cbs, val, p1, p2, start, end-) end,
  } end
).0;
123-0-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule0(p1, span);
  case Thunk(case State124(new-cbs-123-124(cbs, val, start)))
end;
let new-cbs-123-20 future = (
  123-11-0 = funct(cbs, p1, p2, p3, start, end-)
    span = start.merge(end-);
    val = rule11(p1, p2, p3, span);
    case Thunk(case State20(new-cbs-123-20(cbs, val, start)))
  end;
  123-16-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
    span = start.merge(end-);
    val = rule16(p1, p2, p3, p4, p5, span);
    case Thunk(case State20(new-cbs-123-20(cbs, val, start)))
  end;
  123-17-0 = funct(cbs, p1, p2, start, end-)
    span = start.merge(end-);
    val = rule17(p1, p2, span);
    case Thunk(case State20(new-cbs-123-20(cbs, val, start)))
  end;
  123-18-0 = funct(cbs, p1, p2, p3, p4, start, end-)
    span = start.merge(end-);
    val = rule18(p1, p2, p3, p4, span);
    case Thunk(case State20(new-cbs-123-20(cbs, val, start)))
  end;
  funct(cbs, val, start) {
    0-1: funct(end-) 123-0-0(cbs, val, start, end-) end,
    18-1: funct(p1, p2, p3, end-) 123-18-0(cbs, val, p1, p2, p3, start, end-) end,
    17-1: funct(p1, end-) 123-17-0(cbs, val, p1, start, end-) end,
    16-1: funct(p1, p2, p3, p4, end-) 123-16-0(cbs, val, p1, p2, p3, p4, start, end-) end,
    11-1: funct(p1, p2, end-) 123-11-0(cbs, val, p1, p2, start, end-) end,
  } end
).0;
123-10-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule10(p1, span);
  case Thunk(case State20(new-cbs-123-20(cbs, val, start)))
end;
new-cbs-123-111 = funct(cbs, val, start) {
  10-1: funct(end-) 123-10-0(cbs, val, start, end-) end,
} end;
123-27-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule27(p1, span);
  case Thunk(case State111(new-cbs-123-111(cbs, val, start)))
end;
new-cbs-123-112 = funct(cbs, val, start) {
  27-1: funct(end-) 123-27-0(cbs, val, start, end-) end,
} end;
123-12-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule12(p1, p2, span);
  case Thunk(case State20(new-cbs-123-20(cbs, val, start)))
end;
new-cbs-123-109 = funct(cbs, val, start) {
  12-1: funct(p1, end-) 123-12-0(cbs, val, p1, start, end-) end,
} end;
123-9-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule9(p1, span);
  case Thunk(case State20(new-cbs-123-20(cbs, val, start)))
end;
123-14-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule14(p1, p2, p3, p4, span);
  case Thunk(case State20(new-cbs-123-20(cbs, val, start)))
end;
new-cbs-123-103 = funct(cbs, val, start) {
  14-1: funct(p1, p2, p3, end-) 123-14-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
123-44-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule44(p1, span);
  case Thunk(case State103(new-cbs-123-103(cbs, val, start)))
end;
new-cbs-123-107 = funct(cbs, val, start) {
  44-1: funct(end-) 123-44-0(cbs, val, start, end-) end,
} end;
123-30-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule30(p1, span);
  case Thunk(case State107(new-cbs-123-107(cbs, val, start)))
end;
new-cbs-123-108 = funct(cbs, val, start) {
  30-1: funct(end-) 123-30-0(cbs, val, start, end-) end,
  9-1: funct(end-) 123-9-0(cbs, val, start, end-) end,
} end;
123-5-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule5(p1, span);
  case Thunk(case State108(new-cbs-123-108(cbs, val, start)))
end;
new-cbs-123-65 = funct(cbs, val, start) {
  5-1: funct(end-) 123-5-0(cbs, val, start, end-) end,
} end;
123-6-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule6(p1, span);
  case Thunk(case State108(new-cbs-123-108(cbs, val, start)))
end;
new-cbs-123-64 = funct(cbs, val, start) {
  6-1: funct(end-) 123-6-0(cbs, val, start, end-) end,
} end;
123-7-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule7(p1, span);
  case Thunk(case State108(new-cbs-123-108(cbs, val, start)))
end;
new-cbs-123-63 = funct(cbs, val, start) {
  7-1: funct(end-) 123-7-0(cbs, val, start, end-) end,
} end;
123-8-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule8(p1, span);
  case Thunk(case State108(new-cbs-123-108(cbs, val, start)))
end;
new-cbs-123-62 = funct(cbs, val, start) {
  8-1: funct(end-) 123-8-0(cbs, val, start, end-) end,
} end;
123-45-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule45(p1, p2, span);
  case Thunk(case State103(new-cbs-123-103(cbs, val, start)))
end;
123-15-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
  span = start.merge(end-);
  val = rule15(p1, p2, p3, p4, p5, span);
  case Thunk(case State20(new-cbs-123-20(cbs, val, start)))
end;
new-cbs-123-74 = funct(cbs, val, start) {
  15-1: funct(p1, p2, p3, p4, end-) 123-15-0(cbs, val, p1, p2, p3, p4, start, end-) end,
  45-1: funct(p1, end-) 123-45-0(cbs, val, p1, start, end-) end,
} end;
123-19-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule19(p1, span);
  case Thunk(case State20(new-cbs-123-20(cbs, val, start)))
end;
new-cbs-123-70 = funct(cbs, val, start) {
  19-1: funct(end-) 123-19-0(cbs, val, start, end-) end,
} end;
123-49-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule49(p1, p2, p3, span);
  case Thunk(case State70(new-cbs-123-70(cbs, val, start)))
end;
new-cbs-123-71 = funct(cbs, val, start) {
  49-1: funct(p1, p2, end-) 123-49-0(cbs, val, p1, p2, start, end-) end,
} end;
123-50-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule50(p1, p2, p3, span);
  case Thunk(case State70(new-cbs-123-70(cbs, val, start)))
end;
new-cbs-123-55 = funct(cbs, val, start) {
  50-1: funct(p1, p2, end-) 123-50-0(cbs, val, p1, p2, start, end-) end,
} end;
123-20-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule20(p1, p2, p3, span);
  case Thunk(case State20(new-cbs-123-20(cbs, val, start)))
end;
new-cbs-123-52 = funct(cbs, val, start) {
  20-1: funct(p1, p2, end-) 123-20-0(cbs, val, p1, p2, start, end-) end,
} end;
123-21-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule21(p1, p2, p3, span);
  case Thunk(case State20(new-cbs-123-20(cbs, val, start)))
end;
new-cbs-123-44 = funct(cbs, val, start) {
  21-1: funct(p1, p2, end-) 123-21-0(cbs, val, p1, p2, start, end-) end,
} end;
123-22-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule22(p1, span);
  case Thunk(case State20(new-cbs-123-20(cbs, val, start)))
end;
new-cbs-123-43 = funct(cbs, val, start) {
  22-1: funct(end-) 123-22-0(cbs, val, start, end-) end,
} end;
123-23-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule23(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State20(new-cbs-123-20(cbs, val, start)))
end;
new-cbs-123-35 = funct(cbs, val, start) {
  23-1: funct(p1, p2, p3, p4, p5, end-) 123-23-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
} end;
123-13-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule13(p1, p2, p3, p4, span);
  case Thunk(case State20(new-cbs-123-20(cbs, val, start)))
end;
123-24-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule24(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State20(new-cbs-123-20(cbs, val, start)))
end;
123-25-0 = funct(cbs, p1, p2, p3, p4, p5, p6, p7, p8, start, end-)
  span = start.merge(end-);
  val = rule25(p1, p2, p3, p4, p5, p6, p7, p8, span);
  case Thunk(case State20(new-cbs-123-20(cbs, val, start)))
end;
new-cbs-123-29 = funct(cbs, val, start) {
  25-1: funct(p1, p2, p3, p4, p5, p6, p7, end-) 123-25-0(cbs, val, p1, p2, p3, p4, p5, p6, p7, start, end-) end,
  24-1: funct(p1, p2, p3, p4, p5, end-) 123-24-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
  13-1: funct(p1, p2, p3, end-) 123-13-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
123-26-0 = funct(cbs, p1, p2, p3, p4, p5, p6, p7, p8, start, end-)
  span = start.merge(end-);
  val = rule26(p1, p2, p3, p4, p5, p6, p7, p8, span);
  case Thunk(case State20(new-cbs-123-20(cbs, val, start)))
end;
new-cbs-123-21 = funct(cbs, val, start) {
  26-1: funct(p1, p2, p3, p4, p5, p6, p7, end-) 123-26-0(cbs, val, p1, p2, p3, p4, p5, p6, p7, start, end-) end,
} end;
state123 = funct(cbs)
  tok = get-token();
  debug = "state123:
exprns := DO FOR letpat IN % expr THEN expr END
expr := % expr ; exprns
expr := % exprns
exprns := % FUNCT unsafe_opt thisp_opt ( param_list ) expr END
exprns := % DO FOR letpat IN expr THEN expr END
exprns := % DO WHILE expr THEN expr END
exprns := % IF expr THEN expr elseb_opt END
exprns := % JS
exprns := % [ restexpr_list ]
exprns := % CASE id objlit
exprns := % objlit
objlit := % { keyval_list }
objlit := % ( expr_list )
exprns := % exprns ( expr_list )
exprns := % exprns field_sub
exprns := % exprns . phantom_id = exprns
exprns := % LET varpat FUTURE = exprns
exprns := % letpat = poly_opt exprns
letpat := % LET pattern
letpat := % varpat
varpat := % id
id := % END
id := % FOR
id := % WHILE
id := % ID
exprns := % DO UNSAFE expr END
exprns := % ! exprns
exprns := % exprns BINOP exprns
exprns := % string
string := % STRING
exprns := % id";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "FUNCT" then
    tokens.pop();
    state21(new-cbs-123-21(cbs, tok, tok.span))
  else if tok.type == "DO" then
    tokens.pop();
    state29(new-cbs-123-29(cbs, tok, tok.span))
  else if tok.type == "IF" then
    tokens.pop();
    state35(new-cbs-123-35(cbs, tok, tok.span))
  else if tok.type == "JS" then
    tokens.pop();
    state43(new-cbs-123-43(cbs, tok, tok.span))
  else if tok.type == "[" then
    tokens.pop();
    state44(new-cbs-123-44(cbs, tok, tok.span))
  else if tok.type == "CASE" then
    tokens.pop();
    state52(new-cbs-123-52(cbs, tok, tok.span))
  else if tok.type == "{" then
    tokens.pop();
    state55(new-cbs-123-55(cbs, tok, tok.span))
  else if tok.type == "(" then
    tokens.pop();
    state71(new-cbs-123-71(cbs, tok, tok.span))
  else if tok.type == "LET" then
    tokens.pop();
    state74(new-cbs-123-74(cbs, tok, tok.span))
  else if tok.type == "END" then
    tokens.pop();
    state62(new-cbs-123-62(cbs, tok, tok.span))
  else if tok.type == "FOR" then
    tokens.pop();
    state63(new-cbs-123-63(cbs, tok, tok.span))
  else if tok.type == "WHILE" then
    tokens.pop();
    state64(new-cbs-123-64(cbs, tok, tok.span))
  else if tok.type == "ID" then
    tokens.pop();
    state65(new-cbs-123-65(cbs, tok, tok.span))
  else if tok.type == "!" then
    tokens.pop();
    state109(new-cbs-123-109(cbs, tok, tok.span))
  else if tok.type == "STRING" then
    tokens.pop();
    state112(new-cbs-123-112(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end end end end end end end end end end end end end end end
end;
state122 = funct(cbs)
  tok = get-token();
  debug = "state122:
exprns := DO FOR letpat % IN expr THEN expr END";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "ID" && (tok.val == "in").0 then
    tokens.pop();
    state123(new-cbs-122-123(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end
end;
119-1-1 = funct(cbs, p2, p3, end-) cbs.1-1(p2, p3, end-) end;
new-cbs-119-5 = funct(cbs, val, start) {
  1-2: funct(p2, end-) 119-1-1(cbs, val, p2, end-) end,
} end;
119-13-3 = funct(cbs, p4, end-) cbs.13-3(p4, end-) end;
new-cbs-119-120 = funct(cbs, val, start) {
  13-4: funct(end-) 119-13-3(cbs, val, end-) end,
} end;
state120 = funct(cbs)
  tok = get-token();
  debug = "state120:
exprns := DO UNSAFE expr END %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.13-4(tok.span.start())
  end
end;
state119 = funct(cbs)
  tok = get-token();
  debug = "state119:
exprns := DO UNSAFE expr % END
expr := expr % ; exprns";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "END" then
    tokens.pop();
    state120(new-cbs-119-120(cbs, tok, tok.span))
  else if tok.type == ";" then
    tokens.pop();
    state5(new-cbs-119-5(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end end
end;
state111 = funct(cbs)
  tok = get-token();
  debug = "state111:
exprns := string %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.10-1(tok.span.start())
  end
end;
110-18-1 = funct(cbs, p2, p3, p4, end-) cbs.18-1(p2, p3, p4, end-) end;
new-cbs-110-14 = funct(cbs, val, start) {
  18-2: funct(p2, p3, end-) 110-18-1(cbs, val, p2, p3, end-) end,
} end;
14-18-2 = funct(cbs, p3, p4, end-) cbs.18-2(p3, p4, end-) end;
new-cbs-14-15 = funct(cbs, val, start) {
  18-3: funct(p3, end-) 14-18-2(cbs, val, p3, end-) end,
} end;
14-2-0 = funct(cbs, start, end-)
  span = start.merge(end-);
  val = rule2(span);
  case Thunk(case State15(new-cbs-14-15(cbs, val, start)))
end;
14-3-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule3(p1, span);
  case Thunk(case State15(new-cbs-14-15(cbs, val, start)))
end;
14-4-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule4(p1, p2, p3, span);
  case Thunk(case State15(new-cbs-14-15(cbs, val, start)))
end;
let new-cbs-14-17 future = (
  14-1-0 = funct(cbs, p1, p2, p3, start, end-)
    span = start.merge(end-);
    val = rule1(p1, p2, p3, span);
    case Thunk(case State17(new-cbs-14-17(cbs, val, start)))
  end;
  funct(cbs, val, start) {
    4-1: funct(p1, p2, end-) 14-4-0(cbs, val, p1, p2, start, end-) end,
    1-1: funct(p1, p2, end-) 14-1-0(cbs, val, p1, p2, start, end-) end,
    3-1: funct(end-) 14-3-0(cbs, val, start, end-) end,
  } end
).0;
14-0-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule0(p1, span);
  case Thunk(case State17(new-cbs-14-17(cbs, val, start)))
end;
let new-cbs-14-20 future = (
  14-11-0 = funct(cbs, p1, p2, p3, start, end-)
    span = start.merge(end-);
    val = rule11(p1, p2, p3, span);
    case Thunk(case State20(new-cbs-14-20(cbs, val, start)))
  end;
  14-16-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
    span = start.merge(end-);
    val = rule16(p1, p2, p3, p4, p5, span);
    case Thunk(case State20(new-cbs-14-20(cbs, val, start)))
  end;
  14-17-0 = funct(cbs, p1, p2, start, end-)
    span = start.merge(end-);
    val = rule17(p1, p2, span);
    case Thunk(case State20(new-cbs-14-20(cbs, val, start)))
  end;
  14-18-0 = funct(cbs, p1, p2, p3, p4, start, end-)
    span = start.merge(end-);
    val = rule18(p1, p2, p3, p4, span);
    case Thunk(case State20(new-cbs-14-20(cbs, val, start)))
  end;
  funct(cbs, val, start) {
    0-1: funct(end-) 14-0-0(cbs, val, start, end-) end,
    18-1: funct(p1, p2, p3, end-) 14-18-0(cbs, val, p1, p2, p3, start, end-) end,
    17-1: funct(p1, end-) 14-17-0(cbs, val, p1, start, end-) end,
    16-1: funct(p1, p2, p3, p4, end-) 14-16-0(cbs, val, p1, p2, p3, p4, start, end-) end,
    11-1: funct(p1, p2, end-) 14-11-0(cbs, val, p1, p2, start, end-) end,
  } end
).0;
14-10-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule10(p1, span);
  case Thunk(case State20(new-cbs-14-20(cbs, val, start)))
end;
new-cbs-14-111 = funct(cbs, val, start) {
  10-1: funct(end-) 14-10-0(cbs, val, start, end-) end,
} end;
14-27-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule27(p1, span);
  case Thunk(case State111(new-cbs-14-111(cbs, val, start)))
end;
new-cbs-14-112 = funct(cbs, val, start) {
  27-1: funct(end-) 14-27-0(cbs, val, start, end-) end,
} end;
14-12-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule12(p1, p2, span);
  case Thunk(case State20(new-cbs-14-20(cbs, val, start)))
end;
new-cbs-14-109 = funct(cbs, val, start) {
  12-1: funct(p1, end-) 14-12-0(cbs, val, p1, start, end-) end,
} end;
14-9-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule9(p1, span);
  case Thunk(case State20(new-cbs-14-20(cbs, val, start)))
end;
14-14-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule14(p1, p2, p3, p4, span);
  case Thunk(case State20(new-cbs-14-20(cbs, val, start)))
end;
new-cbs-14-103 = funct(cbs, val, start) {
  14-1: funct(p1, p2, p3, end-) 14-14-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
14-44-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule44(p1, span);
  case Thunk(case State103(new-cbs-14-103(cbs, val, start)))
end;
new-cbs-14-107 = funct(cbs, val, start) {
  44-1: funct(end-) 14-44-0(cbs, val, start, end-) end,
} end;
14-30-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule30(p1, span);
  case Thunk(case State107(new-cbs-14-107(cbs, val, start)))
end;
new-cbs-14-108 = funct(cbs, val, start) {
  30-1: funct(end-) 14-30-0(cbs, val, start, end-) end,
  9-1: funct(end-) 14-9-0(cbs, val, start, end-) end,
} end;
14-5-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule5(p1, span);
  case Thunk(case State108(new-cbs-14-108(cbs, val, start)))
end;
new-cbs-14-65 = funct(cbs, val, start) {
  5-1: funct(end-) 14-5-0(cbs, val, start, end-) end,
} end;
14-6-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule6(p1, span);
  case Thunk(case State108(new-cbs-14-108(cbs, val, start)))
end;
new-cbs-14-64 = funct(cbs, val, start) {
  6-1: funct(end-) 14-6-0(cbs, val, start, end-) end,
} end;
14-7-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule7(p1, span);
  case Thunk(case State108(new-cbs-14-108(cbs, val, start)))
end;
new-cbs-14-63 = funct(cbs, val, start) {
  7-1: funct(end-) 14-7-0(cbs, val, start, end-) end,
} end;
14-8-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule8(p1, span);
  case Thunk(case State108(new-cbs-14-108(cbs, val, start)))
end;
new-cbs-14-62 = funct(cbs, val, start) {
  8-1: funct(end-) 14-8-0(cbs, val, start, end-) end,
} end;
14-45-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule45(p1, p2, span);
  case Thunk(case State103(new-cbs-14-103(cbs, val, start)))
end;
14-15-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
  span = start.merge(end-);
  val = rule15(p1, p2, p3, p4, p5, span);
  case Thunk(case State20(new-cbs-14-20(cbs, val, start)))
end;
new-cbs-14-74 = funct(cbs, val, start) {
  15-1: funct(p1, p2, p3, p4, end-) 14-15-0(cbs, val, p1, p2, p3, p4, start, end-) end,
  45-1: funct(p1, end-) 14-45-0(cbs, val, p1, start, end-) end,
} end;
14-19-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule19(p1, span);
  case Thunk(case State20(new-cbs-14-20(cbs, val, start)))
end;
new-cbs-14-70 = funct(cbs, val, start) {
  19-1: funct(end-) 14-19-0(cbs, val, start, end-) end,
} end;
14-49-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule49(p1, p2, p3, span);
  case Thunk(case State70(new-cbs-14-70(cbs, val, start)))
end;
new-cbs-14-71 = funct(cbs, val, start) {
  49-1: funct(p1, p2, end-) 14-49-0(cbs, val, p1, p2, start, end-) end,
} end;
14-50-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule50(p1, p2, p3, span);
  case Thunk(case State70(new-cbs-14-70(cbs, val, start)))
end;
new-cbs-14-55 = funct(cbs, val, start) {
  50-1: funct(p1, p2, end-) 14-50-0(cbs, val, p1, p2, start, end-) end,
} end;
14-20-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule20(p1, p2, p3, span);
  case Thunk(case State20(new-cbs-14-20(cbs, val, start)))
end;
new-cbs-14-52 = funct(cbs, val, start) {
  20-1: funct(p1, p2, end-) 14-20-0(cbs, val, p1, p2, start, end-) end,
} end;
14-21-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule21(p1, p2, p3, span);
  case Thunk(case State20(new-cbs-14-20(cbs, val, start)))
end;
new-cbs-14-44 = funct(cbs, val, start) {
  21-1: funct(p1, p2, end-) 14-21-0(cbs, val, p1, p2, start, end-) end,
} end;
14-22-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule22(p1, span);
  case Thunk(case State20(new-cbs-14-20(cbs, val, start)))
end;
new-cbs-14-43 = funct(cbs, val, start) {
  22-1: funct(end-) 14-22-0(cbs, val, start, end-) end,
} end;
14-23-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule23(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State20(new-cbs-14-20(cbs, val, start)))
end;
new-cbs-14-35 = funct(cbs, val, start) {
  23-1: funct(p1, p2, p3, p4, p5, end-) 14-23-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
} end;
14-13-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule13(p1, p2, p3, p4, span);
  case Thunk(case State20(new-cbs-14-20(cbs, val, start)))
end;
14-24-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule24(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State20(new-cbs-14-20(cbs, val, start)))
end;
14-25-0 = funct(cbs, p1, p2, p3, p4, p5, p6, p7, p8, start, end-)
  span = start.merge(end-);
  val = rule25(p1, p2, p3, p4, p5, p6, p7, p8, span);
  case Thunk(case State20(new-cbs-14-20(cbs, val, start)))
end;
new-cbs-14-29 = funct(cbs, val, start) {
  25-1: funct(p1, p2, p3, p4, p5, p6, p7, end-) 14-25-0(cbs, val, p1, p2, p3, p4, p5, p6, p7, start, end-) end,
  24-1: funct(p1, p2, p3, p4, p5, end-) 14-24-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
  13-1: funct(p1, p2, p3, end-) 14-13-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
14-26-0 = funct(cbs, p1, p2, p3, p4, p5, p6, p7, p8, start, end-)
  span = start.merge(end-);
  val = rule26(p1, p2, p3, p4, p5, p6, p7, p8, span);
  case Thunk(case State20(new-cbs-14-20(cbs, val, start)))
end;
new-cbs-14-21 = funct(cbs, val, start) {
  26-1: funct(p1, p2, p3, p4, p5, p6, p7, end-) 14-26-0(cbs, val, p1, p2, p3, p4, p5, p6, p7, start, end-) end,
} end;
state14 = funct(cbs)
  tok = get-token();
  debug = "state14:
exprns := exprns ( % expr_list )
expr_list := % expr , expr_list
expr := % expr ; exprns
expr := % exprns
exprns := % FUNCT unsafe_opt thisp_opt ( param_list ) expr END
exprns := % DO FOR letpat IN expr THEN expr END
exprns := % DO WHILE expr THEN expr END
exprns := % IF expr THEN expr elseb_opt END
exprns := % JS
exprns := % [ restexpr_list ]
exprns := % CASE id objlit
exprns := % objlit
objlit := % { keyval_list }
objlit := % ( expr_list )
exprns := % exprns ( expr_list )
exprns := % exprns field_sub
exprns := % exprns . phantom_id = exprns
exprns := % LET varpat FUTURE = exprns
exprns := % letpat = poly_opt exprns
letpat := % LET pattern
letpat := % varpat
varpat := % id
id := % END
id := % FOR
id := % WHILE
id := % ID
exprns := % DO UNSAFE expr END
exprns := % ! exprns
exprns := % exprns BINOP exprns
exprns := % string
string := % STRING
exprns := % id
expr_list := % expr
expr_list := %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "FUNCT" then
    tokens.pop();
    state21(new-cbs-14-21(cbs, tok, tok.span))
  else if tok.type == "DO" then
    tokens.pop();
    state29(new-cbs-14-29(cbs, tok, tok.span))
  else if tok.type == "IF" then
    tokens.pop();
    state35(new-cbs-14-35(cbs, tok, tok.span))
  else if tok.type == "JS" then
    tokens.pop();
    state43(new-cbs-14-43(cbs, tok, tok.span))
  else if tok.type == "[" then
    tokens.pop();
    state44(new-cbs-14-44(cbs, tok, tok.span))
  else if tok.type == "CASE" then
    tokens.pop();
    state52(new-cbs-14-52(cbs, tok, tok.span))
  else if tok.type == "{" then
    tokens.pop();
    state55(new-cbs-14-55(cbs, tok, tok.span))
  else if tok.type == "(" then
    tokens.pop();
    state71(new-cbs-14-71(cbs, tok, tok.span))
  else if tok.type == "LET" then
    tokens.pop();
    state74(new-cbs-14-74(cbs, tok, tok.span))
  else if tok.type == "END" then
    tokens.pop();
    state62(new-cbs-14-62(cbs, tok, tok.span))
  else if tok.type == "FOR" then
    tokens.pop();
    state63(new-cbs-14-63(cbs, tok, tok.span))
  else if tok.type == "WHILE" then
    tokens.pop();
    state64(new-cbs-14-64(cbs, tok, tok.span))
  else if tok.type == "ID" then
    tokens.pop();
    state65(new-cbs-14-65(cbs, tok, tok.span))
  else if tok.type == "!" then
    tokens.pop();
    state109(new-cbs-14-109(cbs, tok, tok.span))
  else if tok.type == "STRING" then
    tokens.pop();
    state112(new-cbs-14-112(cbs, tok, tok.span))
  else
    span = tok.span.start();
    14-2-0(cbs, span, span)
  end end end end end end end end end end end end end end end end
end;
110-16-1 = funct(cbs, p2, p3, p4, p5, end-) cbs.16-1(p2, p3, p4, p5, end-) end;
110-17-1 = funct(cbs, p2, end-) cbs.17-1(p2, end-) end;
new-cbs-110-7 = funct(cbs, val, start) {
  17-2: funct(end-) 110-17-1(cbs, val, end-) end,
} end;
rule48 = funct(p1, p2, span) {name: p2, span} end;
110-48-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule48(p1, p2, span);
  case Thunk(case State7(new-cbs-110-7(cbs, val, start)))
end;
new-cbs-110-8 = funct(cbs, val, start) {
  48-1: funct(p1, end-) 110-48-0(cbs, val, p1, start, end-) end,
  16-2: funct(p2, p3, p4, end-) 110-16-1(cbs, val, p2, p3, p4, end-) end,
} end;
8-48-1 = funct(cbs, p2, end-) cbs.48-1(p2, end-) end;
8-16-2 = funct(cbs, p3, p4, p5, end-) cbs.16-2(p3, p4, p5, end-) end;
new-cbs-8-9 = funct(cbs, val, start) {
  16-3: funct(p3, p4, end-) 8-16-2(cbs, val, p3, p4, end-) end,
  48-2: funct(end-) 8-48-1(cbs, val, end-) end,
} end;
8-28-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule28(p1, span);
  case Thunk(case State9(new-cbs-8-9(cbs, val, start)))
end;
new-cbs-8-137 = funct(cbs, val, start) {
  28-1: funct(end-) 8-28-0(cbs, val, start, end-) end,
} end;
8-5-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule5(p1, span);
  case Thunk(case State137(new-cbs-8-137(cbs, val, start)))
end;
new-cbs-8-65 = funct(cbs, val, start) {
  5-1: funct(end-) 8-5-0(cbs, val, start, end-) end,
} end;
8-6-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule6(p1, span);
  case Thunk(case State137(new-cbs-8-137(cbs, val, start)))
end;
new-cbs-8-64 = funct(cbs, val, start) {
  6-1: funct(end-) 8-6-0(cbs, val, start, end-) end,
} end;
8-7-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule7(p1, span);
  case Thunk(case State137(new-cbs-8-137(cbs, val, start)))
end;
new-cbs-8-63 = funct(cbs, val, start) {
  7-1: funct(end-) 8-7-0(cbs, val, start, end-) end,
} end;
8-8-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule8(p1, span);
  case Thunk(case State137(new-cbs-8-137(cbs, val, start)))
end;
new-cbs-8-62 = funct(cbs, val, start) {
  8-1: funct(end-) 8-8-0(cbs, val, start, end-) end,
} end;
8-29-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule29(p1, span);
  case Thunk(case State9(new-cbs-8-9(cbs, val, start)))
end;
new-cbs-8-98 = funct(cbs, val, start) {
  29-1: funct(end-) 8-29-0(cbs, val, start, end-) end,
} end;
state8 = funct(cbs)
  tok = get-token();
  debug = "state8:
exprns := exprns . % phantom_id = exprns
phantom_id := % PHANTOM_ID
phantom_id := % id
id := % END
id := % FOR
id := % WHILE
id := % ID
field_sub := . % phantom_id";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "PHANTOM_ID" then
    tokens.pop();
    state98(new-cbs-8-98(cbs, tok, tok.span))
  else if tok.type == "END" then
    tokens.pop();
    state62(new-cbs-8-62(cbs, tok, tok.span))
  else if tok.type == "FOR" then
    tokens.pop();
    state63(new-cbs-8-63(cbs, tok, tok.span))
  else if tok.type == "WHILE" then
    tokens.pop();
    state64(new-cbs-8-64(cbs, tok, tok.span))
  else if tok.type == "ID" then
    tokens.pop();
    state65(new-cbs-8-65(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end end end end end
end;
state110 = funct(cbs)
  tok = get-token();
  debug = "state110:
exprns := ! exprns %
exprns := exprns % field_sub
field_sub := % . phantom_id
exprns := exprns % BINOP exprns
exprns := exprns % . phantom_id = exprns
exprns := exprns % ( expr_list )";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "." then
    tokens.pop();
    state8(new-cbs-110-8(cbs, tok, tok.span))
  else if tok.type == "(" then
    tokens.pop();
    state14(new-cbs-110-14(cbs, tok, tok.span))
  else
    cbs.12-2(tok.span.start())
  end end end
end;
state108 = funct(cbs)
  tok = get-token();
  debug = "state108:
varpat := id %
exprns := id %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "=" then
    cbs.30-1(tok.span.start())
  else
    cbs.9-1(tok.span.start())
  end end
end;
state107 = funct(cbs)
  tok = get-token();
  debug = "state107:
letpat := varpat %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.44-1(tok.span.start())
  end
end;
106-18-1 = funct(cbs, p2, p3, p4, end-) cbs.18-1(p2, p3, p4, end-) end;
new-cbs-106-14 = funct(cbs, val, start) {
  18-2: funct(p2, p3, end-) 106-18-1(cbs, val, p2, p3, end-) end,
} end;
106-11-1 = funct(cbs, p2, p3, end-) cbs.11-1(p2, p3, end-) end;
new-cbs-106-12 = funct(cbs, val, start) {
  11-2: funct(p2, end-) 106-11-1(cbs, val, p2, end-) end,
} end;
12-11-2 = funct(cbs, p3, end-) cbs.11-2(p3, end-) end;
let new-cbs-12-13 future = (
  12-11-0 = funct(cbs, p1, p2, p3, start, end-)
    span = start.merge(end-);
    val = rule11(p1, p2, p3, span);
    case Thunk(case State13(new-cbs-12-13(cbs, val, start)))
  end;
  12-16-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
    span = start.merge(end-);
    val = rule16(p1, p2, p3, p4, p5, span);
    case Thunk(case State13(new-cbs-12-13(cbs, val, start)))
  end;
  12-17-0 = funct(cbs, p1, p2, start, end-)
    span = start.merge(end-);
    val = rule17(p1, p2, span);
    case Thunk(case State13(new-cbs-12-13(cbs, val, start)))
  end;
  12-18-0 = funct(cbs, p1, p2, p3, p4, start, end-)
    span = start.merge(end-);
    val = rule18(p1, p2, p3, p4, span);
    case Thunk(case State13(new-cbs-12-13(cbs, val, start)))
  end;
  funct(cbs, val, start) {
    11-3: funct(end-) 12-11-2(cbs, val, end-) end,
    18-1: funct(p1, p2, p3, end-) 12-18-0(cbs, val, p1, p2, p3, start, end-) end,
    17-1: funct(p1, end-) 12-17-0(cbs, val, p1, start, end-) end,
    16-1: funct(p1, p2, p3, p4, end-) 12-16-0(cbs, val, p1, p2, p3, p4, start, end-) end,
    11-1: funct(p1, p2, end-) 12-11-0(cbs, val, p1, p2, start, end-) end,
  } end
).0;
12-10-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule10(p1, span);
  case Thunk(case State13(new-cbs-12-13(cbs, val, start)))
end;
new-cbs-12-111 = funct(cbs, val, start) {
  10-1: funct(end-) 12-10-0(cbs, val, start, end-) end,
} end;
12-27-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule27(p1, span);
  case Thunk(case State111(new-cbs-12-111(cbs, val, start)))
end;
new-cbs-12-112 = funct(cbs, val, start) {
  27-1: funct(end-) 12-27-0(cbs, val, start, end-) end,
} end;
12-12-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule12(p1, p2, span);
  case Thunk(case State13(new-cbs-12-13(cbs, val, start)))
end;
new-cbs-12-109 = funct(cbs, val, start) {
  12-1: funct(p1, end-) 12-12-0(cbs, val, p1, start, end-) end,
} end;
12-9-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule9(p1, span);
  case Thunk(case State13(new-cbs-12-13(cbs, val, start)))
end;
12-14-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule14(p1, p2, p3, p4, span);
  case Thunk(case State13(new-cbs-12-13(cbs, val, start)))
end;
new-cbs-12-103 = funct(cbs, val, start) {
  14-1: funct(p1, p2, p3, end-) 12-14-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
12-44-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule44(p1, span);
  case Thunk(case State103(new-cbs-12-103(cbs, val, start)))
end;
new-cbs-12-107 = funct(cbs, val, start) {
  44-1: funct(end-) 12-44-0(cbs, val, start, end-) end,
} end;
12-30-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule30(p1, span);
  case Thunk(case State107(new-cbs-12-107(cbs, val, start)))
end;
new-cbs-12-108 = funct(cbs, val, start) {
  30-1: funct(end-) 12-30-0(cbs, val, start, end-) end,
  9-1: funct(end-) 12-9-0(cbs, val, start, end-) end,
} end;
12-5-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule5(p1, span);
  case Thunk(case State108(new-cbs-12-108(cbs, val, start)))
end;
new-cbs-12-65 = funct(cbs, val, start) {
  5-1: funct(end-) 12-5-0(cbs, val, start, end-) end,
} end;
12-6-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule6(p1, span);
  case Thunk(case State108(new-cbs-12-108(cbs, val, start)))
end;
new-cbs-12-64 = funct(cbs, val, start) {
  6-1: funct(end-) 12-6-0(cbs, val, start, end-) end,
} end;
12-7-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule7(p1, span);
  case Thunk(case State108(new-cbs-12-108(cbs, val, start)))
end;
new-cbs-12-63 = funct(cbs, val, start) {
  7-1: funct(end-) 12-7-0(cbs, val, start, end-) end,
} end;
12-8-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule8(p1, span);
  case Thunk(case State108(new-cbs-12-108(cbs, val, start)))
end;
new-cbs-12-62 = funct(cbs, val, start) {
  8-1: funct(end-) 12-8-0(cbs, val, start, end-) end,
} end;
12-45-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule45(p1, p2, span);
  case Thunk(case State103(new-cbs-12-103(cbs, val, start)))
end;
12-15-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
  span = start.merge(end-);
  val = rule15(p1, p2, p3, p4, p5, span);
  case Thunk(case State13(new-cbs-12-13(cbs, val, start)))
end;
new-cbs-12-74 = funct(cbs, val, start) {
  15-1: funct(p1, p2, p3, p4, end-) 12-15-0(cbs, val, p1, p2, p3, p4, start, end-) end,
  45-1: funct(p1, end-) 12-45-0(cbs, val, p1, start, end-) end,
} end;
12-19-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule19(p1, span);
  case Thunk(case State13(new-cbs-12-13(cbs, val, start)))
end;
new-cbs-12-70 = funct(cbs, val, start) {
  19-1: funct(end-) 12-19-0(cbs, val, start, end-) end,
} end;
12-49-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule49(p1, p2, p3, span);
  case Thunk(case State70(new-cbs-12-70(cbs, val, start)))
end;
new-cbs-12-71 = funct(cbs, val, start) {
  49-1: funct(p1, p2, end-) 12-49-0(cbs, val, p1, p2, start, end-) end,
} end;
12-50-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule50(p1, p2, p3, span);
  case Thunk(case State70(new-cbs-12-70(cbs, val, start)))
end;
new-cbs-12-55 = funct(cbs, val, start) {
  50-1: funct(p1, p2, end-) 12-50-0(cbs, val, p1, p2, start, end-) end,
} end;
12-20-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule20(p1, p2, p3, span);
  case Thunk(case State13(new-cbs-12-13(cbs, val, start)))
end;
new-cbs-12-52 = funct(cbs, val, start) {
  20-1: funct(p1, p2, end-) 12-20-0(cbs, val, p1, p2, start, end-) end,
} end;
12-21-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule21(p1, p2, p3, span);
  case Thunk(case State13(new-cbs-12-13(cbs, val, start)))
end;
new-cbs-12-44 = funct(cbs, val, start) {
  21-1: funct(p1, p2, end-) 12-21-0(cbs, val, p1, p2, start, end-) end,
} end;
12-22-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule22(p1, span);
  case Thunk(case State13(new-cbs-12-13(cbs, val, start)))
end;
new-cbs-12-43 = funct(cbs, val, start) {
  22-1: funct(end-) 12-22-0(cbs, val, start, end-) end,
} end;
12-23-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule23(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State13(new-cbs-12-13(cbs, val, start)))
end;
new-cbs-12-35 = funct(cbs, val, start) {
  23-1: funct(p1, p2, p3, p4, p5, end-) 12-23-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
} end;
12-13-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule13(p1, p2, p3, p4, span);
  case Thunk(case State13(new-cbs-12-13(cbs, val, start)))
end;
12-24-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule24(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State13(new-cbs-12-13(cbs, val, start)))
end;
12-25-0 = funct(cbs, p1, p2, p3, p4, p5, p6, p7, p8, start, end-)
  span = start.merge(end-);
  val = rule25(p1, p2, p3, p4, p5, p6, p7, p8, span);
  case Thunk(case State13(new-cbs-12-13(cbs, val, start)))
end;
new-cbs-12-29 = funct(cbs, val, start) {
  25-1: funct(p1, p2, p3, p4, p5, p6, p7, end-) 12-25-0(cbs, val, p1, p2, p3, p4, p5, p6, p7, start, end-) end,
  24-1: funct(p1, p2, p3, p4, p5, end-) 12-24-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
  13-1: funct(p1, p2, p3, end-) 12-13-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
12-26-0 = funct(cbs, p1, p2, p3, p4, p5, p6, p7, p8, start, end-)
  span = start.merge(end-);
  val = rule26(p1, p2, p3, p4, p5, p6, p7, p8, span);
  case Thunk(case State13(new-cbs-12-13(cbs, val, start)))
end;
new-cbs-12-21 = funct(cbs, val, start) {
  26-1: funct(p1, p2, p3, p4, p5, p6, p7, end-) 12-26-0(cbs, val, p1, p2, p3, p4, p5, p6, p7, start, end-) end,
} end;
state12 = funct(cbs)
  tok = get-token();
  debug = "state12:
exprns := exprns BINOP % exprns
exprns := % FUNCT unsafe_opt thisp_opt ( param_list ) expr END
exprns := % DO FOR letpat IN expr THEN expr END
exprns := % DO WHILE expr THEN expr END
exprns := % IF expr THEN expr elseb_opt END
exprns := % JS
exprns := % [ restexpr_list ]
exprns := % CASE id objlit
exprns := % objlit
objlit := % { keyval_list }
objlit := % ( expr_list )
exprns := % exprns ( expr_list )
exprns := % exprns field_sub
exprns := % exprns . phantom_id = exprns
exprns := % LET varpat FUTURE = exprns
exprns := % letpat = poly_opt exprns
letpat := % LET pattern
letpat := % varpat
varpat := % id
id := % END
id := % FOR
id := % WHILE
id := % ID
exprns := % DO UNSAFE expr END
exprns := % ! exprns
exprns := % exprns BINOP exprns
exprns := % string
string := % STRING
exprns := % id";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "FUNCT" then
    tokens.pop();
    state21(new-cbs-12-21(cbs, tok, tok.span))
  else if tok.type == "DO" then
    tokens.pop();
    state29(new-cbs-12-29(cbs, tok, tok.span))
  else if tok.type == "IF" then
    tokens.pop();
    state35(new-cbs-12-35(cbs, tok, tok.span))
  else if tok.type == "JS" then
    tokens.pop();
    state43(new-cbs-12-43(cbs, tok, tok.span))
  else if tok.type == "[" then
    tokens.pop();
    state44(new-cbs-12-44(cbs, tok, tok.span))
  else if tok.type == "CASE" then
    tokens.pop();
    state52(new-cbs-12-52(cbs, tok, tok.span))
  else if tok.type == "{" then
    tokens.pop();
    state55(new-cbs-12-55(cbs, tok, tok.span))
  else if tok.type == "(" then
    tokens.pop();
    state71(new-cbs-12-71(cbs, tok, tok.span))
  else if tok.type == "LET" then
    tokens.pop();
    state74(new-cbs-12-74(cbs, tok, tok.span))
  else if tok.type == "END" then
    tokens.pop();
    state62(new-cbs-12-62(cbs, tok, tok.span))
  else if tok.type == "FOR" then
    tokens.pop();
    state63(new-cbs-12-63(cbs, tok, tok.span))
  else if tok.type == "WHILE" then
    tokens.pop();
    state64(new-cbs-12-64(cbs, tok, tok.span))
  else if tok.type == "ID" then
    tokens.pop();
    state65(new-cbs-12-65(cbs, tok, tok.span))
  else if tok.type == "!" then
    tokens.pop();
    state109(new-cbs-12-109(cbs, tok, tok.span))
  else if tok.type == "STRING" then
    tokens.pop();
    state112(new-cbs-12-112(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end end end end end end end end end end end end end end end
end;
106-16-1 = funct(cbs, p2, p3, p4, p5, end-) cbs.16-1(p2, p3, p4, p5, end-) end;
106-17-1 = funct(cbs, p2, end-) cbs.17-1(p2, end-) end;
new-cbs-106-7 = funct(cbs, val, start) {
  17-2: funct(end-) 106-17-1(cbs, val, end-) end,
} end;
106-48-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule48(p1, p2, span);
  case Thunk(case State7(new-cbs-106-7(cbs, val, start)))
end;
new-cbs-106-8 = funct(cbs, val, start) {
  48-1: funct(p1, end-) 106-48-0(cbs, val, p1, start, end-) end,
  16-2: funct(p2, p3, p4, end-) 106-16-1(cbs, val, p2, p3, p4, end-) end,
} end;
state106 = funct(cbs)
  tok = get-token();
  debug = "state106:
exprns := letpat = poly_opt exprns %
exprns := exprns % field_sub
field_sub := % . phantom_id
exprns := exprns % BINOP exprns
exprns := exprns % . phantom_id = exprns
exprns := exprns % ( expr_list )";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "." then
    tokens.pop();
    state8(new-cbs-106-8(cbs, tok, tok.span))
  else if tok.type == "BINOP" then
    tokens.pop();
    state12(new-cbs-106-12(cbs, tok, tok.span))
  else if tok.type == "(" then
    tokens.pop();
    state14(new-cbs-106-14(cbs, tok, tok.span))
  else
    cbs.14-4(tok.span.start())
  end end end end
end;
105-14-3 = funct(cbs, p4, end-) cbs.14-3(p4, end-) end;
let new-cbs-105-106 future = (
  105-11-0 = funct(cbs, p1, p2, p3, start, end-)
    span = start.merge(end-);
    val = rule11(p1, p2, p3, span);
    case Thunk(case State106(new-cbs-105-106(cbs, val, start)))
  end;
  105-16-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
    span = start.merge(end-);
    val = rule16(p1, p2, p3, p4, p5, span);
    case Thunk(case State106(new-cbs-105-106(cbs, val, start)))
  end;
  105-17-0 = funct(cbs, p1, p2, start, end-)
    span = start.merge(end-);
    val = rule17(p1, p2, span);
    case Thunk(case State106(new-cbs-105-106(cbs, val, start)))
  end;
  105-18-0 = funct(cbs, p1, p2, p3, p4, start, end-)
    span = start.merge(end-);
    val = rule18(p1, p2, p3, p4, span);
    case Thunk(case State106(new-cbs-105-106(cbs, val, start)))
  end;
  funct(cbs, val, start) {
    14-4: funct(end-) 105-14-3(cbs, val, end-) end,
    18-1: funct(p1, p2, p3, end-) 105-18-0(cbs, val, p1, p2, p3, start, end-) end,
    17-1: funct(p1, end-) 105-17-0(cbs, val, p1, start, end-) end,
    16-1: funct(p1, p2, p3, p4, end-) 105-16-0(cbs, val, p1, p2, p3, p4, start, end-) end,
    11-1: funct(p1, p2, end-) 105-11-0(cbs, val, p1, p2, start, end-) end,
  } end
).0;
105-10-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule10(p1, span);
  case Thunk(case State106(new-cbs-105-106(cbs, val, start)))
end;
new-cbs-105-111 = funct(cbs, val, start) {
  10-1: funct(end-) 105-10-0(cbs, val, start, end-) end,
} end;
105-27-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule27(p1, span);
  case Thunk(case State111(new-cbs-105-111(cbs, val, start)))
end;
new-cbs-105-112 = funct(cbs, val, start) {
  27-1: funct(end-) 105-27-0(cbs, val, start, end-) end,
} end;
105-12-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule12(p1, p2, span);
  case Thunk(case State106(new-cbs-105-106(cbs, val, start)))
end;
new-cbs-105-109 = funct(cbs, val, start) {
  12-1: funct(p1, end-) 105-12-0(cbs, val, p1, start, end-) end,
} end;
105-9-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule9(p1, span);
  case Thunk(case State106(new-cbs-105-106(cbs, val, start)))
end;
105-14-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule14(p1, p2, p3, p4, span);
  case Thunk(case State106(new-cbs-105-106(cbs, val, start)))
end;
new-cbs-105-103 = funct(cbs, val, start) {
  14-1: funct(p1, p2, p3, end-) 105-14-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
105-44-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule44(p1, span);
  case Thunk(case State103(new-cbs-105-103(cbs, val, start)))
end;
new-cbs-105-107 = funct(cbs, val, start) {
  44-1: funct(end-) 105-44-0(cbs, val, start, end-) end,
} end;
105-30-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule30(p1, span);
  case Thunk(case State107(new-cbs-105-107(cbs, val, start)))
end;
new-cbs-105-108 = funct(cbs, val, start) {
  30-1: funct(end-) 105-30-0(cbs, val, start, end-) end,
  9-1: funct(end-) 105-9-0(cbs, val, start, end-) end,
} end;
105-5-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule5(p1, span);
  case Thunk(case State108(new-cbs-105-108(cbs, val, start)))
end;
new-cbs-105-65 = funct(cbs, val, start) {
  5-1: funct(end-) 105-5-0(cbs, val, start, end-) end,
} end;
105-6-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule6(p1, span);
  case Thunk(case State108(new-cbs-105-108(cbs, val, start)))
end;
new-cbs-105-64 = funct(cbs, val, start) {
  6-1: funct(end-) 105-6-0(cbs, val, start, end-) end,
} end;
105-7-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule7(p1, span);
  case Thunk(case State108(new-cbs-105-108(cbs, val, start)))
end;
new-cbs-105-63 = funct(cbs, val, start) {
  7-1: funct(end-) 105-7-0(cbs, val, start, end-) end,
} end;
105-8-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule8(p1, span);
  case Thunk(case State108(new-cbs-105-108(cbs, val, start)))
end;
new-cbs-105-62 = funct(cbs, val, start) {
  8-1: funct(end-) 105-8-0(cbs, val, start, end-) end,
} end;
105-45-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule45(p1, p2, span);
  case Thunk(case State103(new-cbs-105-103(cbs, val, start)))
end;
105-15-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
  span = start.merge(end-);
  val = rule15(p1, p2, p3, p4, p5, span);
  case Thunk(case State106(new-cbs-105-106(cbs, val, start)))
end;
new-cbs-105-74 = funct(cbs, val, start) {
  15-1: funct(p1, p2, p3, p4, end-) 105-15-0(cbs, val, p1, p2, p3, p4, start, end-) end,
  45-1: funct(p1, end-) 105-45-0(cbs, val, p1, start, end-) end,
} end;
105-19-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule19(p1, span);
  case Thunk(case State106(new-cbs-105-106(cbs, val, start)))
end;
new-cbs-105-70 = funct(cbs, val, start) {
  19-1: funct(end-) 105-19-0(cbs, val, start, end-) end,
} end;
105-49-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule49(p1, p2, p3, span);
  case Thunk(case State70(new-cbs-105-70(cbs, val, start)))
end;
new-cbs-105-71 = funct(cbs, val, start) {
  49-1: funct(p1, p2, end-) 105-49-0(cbs, val, p1, p2, start, end-) end,
} end;
105-50-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule50(p1, p2, p3, span);
  case Thunk(case State70(new-cbs-105-70(cbs, val, start)))
end;
new-cbs-105-55 = funct(cbs, val, start) {
  50-1: funct(p1, p2, end-) 105-50-0(cbs, val, p1, p2, start, end-) end,
} end;
105-20-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule20(p1, p2, p3, span);
  case Thunk(case State106(new-cbs-105-106(cbs, val, start)))
end;
new-cbs-105-52 = funct(cbs, val, start) {
  20-1: funct(p1, p2, end-) 105-20-0(cbs, val, p1, p2, start, end-) end,
} end;
105-21-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule21(p1, p2, p3, span);
  case Thunk(case State106(new-cbs-105-106(cbs, val, start)))
end;
new-cbs-105-44 = funct(cbs, val, start) {
  21-1: funct(p1, p2, end-) 105-21-0(cbs, val, p1, p2, start, end-) end,
} end;
105-22-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule22(p1, span);
  case Thunk(case State106(new-cbs-105-106(cbs, val, start)))
end;
new-cbs-105-43 = funct(cbs, val, start) {
  22-1: funct(end-) 105-22-0(cbs, val, start, end-) end,
} end;
105-23-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule23(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State106(new-cbs-105-106(cbs, val, start)))
end;
new-cbs-105-35 = funct(cbs, val, start) {
  23-1: funct(p1, p2, p3, p4, p5, end-) 105-23-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
} end;
105-13-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule13(p1, p2, p3, p4, span);
  case Thunk(case State106(new-cbs-105-106(cbs, val, start)))
end;
105-24-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule24(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State106(new-cbs-105-106(cbs, val, start)))
end;
105-25-0 = funct(cbs, p1, p2, p3, p4, p5, p6, p7, p8, start, end-)
  span = start.merge(end-);
  val = rule25(p1, p2, p3, p4, p5, p6, p7, p8, span);
  case Thunk(case State106(new-cbs-105-106(cbs, val, start)))
end;
new-cbs-105-29 = funct(cbs, val, start) {
  25-1: funct(p1, p2, p3, p4, p5, p6, p7, end-) 105-25-0(cbs, val, p1, p2, p3, p4, p5, p6, p7, start, end-) end,
  24-1: funct(p1, p2, p3, p4, p5, end-) 105-24-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
  13-1: funct(p1, p2, p3, end-) 105-13-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
105-26-0 = funct(cbs, p1, p2, p3, p4, p5, p6, p7, p8, start, end-)
  span = start.merge(end-);
  val = rule26(p1, p2, p3, p4, p5, p6, p7, p8, span);
  case Thunk(case State106(new-cbs-105-106(cbs, val, start)))
end;
new-cbs-105-21 = funct(cbs, val, start) {
  26-1: funct(p1, p2, p3, p4, p5, p6, p7, end-) 105-26-0(cbs, val, p1, p2, p3, p4, p5, p6, p7, start, end-) end,
} end;
state105 = funct(cbs)
  tok = get-token();
  debug = "state105:
exprns := letpat = poly_opt % exprns
exprns := % FUNCT unsafe_opt thisp_opt ( param_list ) expr END
exprns := % DO FOR letpat IN expr THEN expr END
exprns := % DO WHILE expr THEN expr END
exprns := % IF expr THEN expr elseb_opt END
exprns := % JS
exprns := % [ restexpr_list ]
exprns := % CASE id objlit
exprns := % objlit
objlit := % { keyval_list }
objlit := % ( expr_list )
exprns := % exprns ( expr_list )
exprns := % exprns field_sub
exprns := % exprns . phantom_id = exprns
exprns := % LET varpat FUTURE = exprns
exprns := % letpat = poly_opt exprns
letpat := % LET pattern
letpat := % varpat
varpat := % id
id := % END
id := % FOR
id := % WHILE
id := % ID
exprns := % DO UNSAFE expr END
exprns := % ! exprns
exprns := % exprns BINOP exprns
exprns := % string
string := % STRING
exprns := % id";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "FUNCT" then
    tokens.pop();
    state21(new-cbs-105-21(cbs, tok, tok.span))
  else if tok.type == "DO" then
    tokens.pop();
    state29(new-cbs-105-29(cbs, tok, tok.span))
  else if tok.type == "IF" then
    tokens.pop();
    state35(new-cbs-105-35(cbs, tok, tok.span))
  else if tok.type == "JS" then
    tokens.pop();
    state43(new-cbs-105-43(cbs, tok, tok.span))
  else if tok.type == "[" then
    tokens.pop();
    state44(new-cbs-105-44(cbs, tok, tok.span))
  else if tok.type == "CASE" then
    tokens.pop();
    state52(new-cbs-105-52(cbs, tok, tok.span))
  else if tok.type == "{" then
    tokens.pop();
    state55(new-cbs-105-55(cbs, tok, tok.span))
  else if tok.type == "(" then
    tokens.pop();
    state71(new-cbs-105-71(cbs, tok, tok.span))
  else if tok.type == "LET" then
    tokens.pop();
    state74(new-cbs-105-74(cbs, tok, tok.span))
  else if tok.type == "END" then
    tokens.pop();
    state62(new-cbs-105-62(cbs, tok, tok.span))
  else if tok.type == "FOR" then
    tokens.pop();
    state63(new-cbs-105-63(cbs, tok, tok.span))
  else if tok.type == "WHILE" then
    tokens.pop();
    state64(new-cbs-105-64(cbs, tok, tok.span))
  else if tok.type == "ID" then
    tokens.pop();
    state65(new-cbs-105-65(cbs, tok, tok.span))
  else if tok.type == "!" then
    tokens.pop();
    state109(new-cbs-105-109(cbs, tok, tok.span))
  else if tok.type == "STRING" then
    tokens.pop();
    state112(new-cbs-105-112(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end end end end end end end end end end end end end end end
end;
103-14-1 = funct(cbs, p2, p3, p4, end-) cbs.14-1(p2, p3, p4, end-) end;
new-cbs-103-104 = funct(cbs, val, start) {
  14-2: funct(p2, p3, end-) 103-14-1(cbs, val, p2, p3, end-) end,
} end;
104-14-2 = funct(cbs, p3, p4, end-) cbs.14-2(p3, p4, end-) end;
new-cbs-104-105 = funct(cbs, val, start) {
  14-3: funct(p3, end-) 104-14-2(cbs, val, p3, end-) end,
} end;
rule47 = funct(span) (0, null) end;
104-47-0 = funct(cbs, start, end-)
  span = start.merge(end-);
  val = rule47(span);
  case Thunk(case State105(new-cbs-104-105(cbs, val, start)))
end;
rule46 = funct(p1, span) (len(p1.val), span) end;
104-46-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule46(p1, span);
  case Thunk(case State105(new-cbs-104-105(cbs, val, start)))
end;
new-cbs-104-113 = funct(cbs, val, start) {
  46-1: funct(end-) 104-46-0(cbs, val, start, end-) end,
} end;
state113 = funct(cbs)
  tok = get-token();
  debug = "state113:
poly_opt := POLY %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.46-1(tok.span.start())
  end
end;
state104 = funct(cbs)
  tok = get-token();
  debug = "state104:
exprns := letpat = % poly_opt exprns
poly_opt := %
poly_opt := % POLY";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "POLY" then
    tokens.pop();
    state113(new-cbs-104-113(cbs, tok, tok.span))
  else
    span = tok.span.start();
    104-47-0(cbs, span, span)
  end end
end;
state103 = funct(cbs)
  tok = get-token();
  debug = "state103:
exprns := letpat % = poly_opt exprns";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "=" then
    tokens.pop();
    state104(new-cbs-103-104(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end
end;
102-18-1 = funct(cbs, p2, p3, p4, end-) cbs.18-1(p2, p3, p4, end-) end;
new-cbs-102-14 = funct(cbs, val, start) {
  18-2: funct(p2, p3, end-) 102-18-1(cbs, val, p2, p3, end-) end,
} end;
102-11-1 = funct(cbs, p2, p3, end-) cbs.11-1(p2, p3, end-) end;
new-cbs-102-12 = funct(cbs, val, start) {
  11-2: funct(p2, end-) 102-11-1(cbs, val, p2, end-) end,
} end;
102-16-1 = funct(cbs, p2, p3, p4, p5, end-) cbs.16-1(p2, p3, p4, p5, end-) end;
102-17-1 = funct(cbs, p2, end-) cbs.17-1(p2, end-) end;
new-cbs-102-7 = funct(cbs, val, start) {
  17-2: funct(end-) 102-17-1(cbs, val, end-) end,
} end;
102-48-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule48(p1, p2, span);
  case Thunk(case State7(new-cbs-102-7(cbs, val, start)))
end;
new-cbs-102-8 = funct(cbs, val, start) {
  48-1: funct(p1, end-) 102-48-0(cbs, val, p1, start, end-) end,
  16-2: funct(p2, p3, p4, end-) 102-16-1(cbs, val, p2, p3, p4, end-) end,
} end;
state102 = funct(cbs)
  tok = get-token();
  debug = "state102:
exprns := LET varpat FUTURE = exprns %
exprns := exprns % field_sub
field_sub := % . phantom_id
exprns := exprns % BINOP exprns
exprns := exprns % . phantom_id = exprns
exprns := exprns % ( expr_list )";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "." then
    tokens.pop();
    state8(new-cbs-102-8(cbs, tok, tok.span))
  else if tok.type == "BINOP" then
    tokens.pop();
    state12(new-cbs-102-12(cbs, tok, tok.span))
  else if tok.type == "(" then
    tokens.pop();
    state14(new-cbs-102-14(cbs, tok, tok.span))
  else
    cbs.15-5(tok.span.start())
  end end end end
end;
99-15-2 = funct(cbs, p3, p4, p5, end-) cbs.15-2(p3, p4, p5, end-) end;
new-cbs-99-100 = funct(cbs, val, start) {
  15-3: funct(p3, p4, end-) 99-15-2(cbs, val, p3, p4, end-) end,
} end;
100-15-3 = funct(cbs, p4, p5, end-) cbs.15-3(p4, p5, end-) end;
new-cbs-100-101 = funct(cbs, val, start) {
  15-4: funct(p4, end-) 100-15-3(cbs, val, p4, end-) end,
} end;
101-15-4 = funct(cbs, p5, end-) cbs.15-4(p5, end-) end;
let new-cbs-101-102 future = (
  101-11-0 = funct(cbs, p1, p2, p3, start, end-)
    span = start.merge(end-);
    val = rule11(p1, p2, p3, span);
    case Thunk(case State102(new-cbs-101-102(cbs, val, start)))
  end;
  101-16-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
    span = start.merge(end-);
    val = rule16(p1, p2, p3, p4, p5, span);
    case Thunk(case State102(new-cbs-101-102(cbs, val, start)))
  end;
  101-17-0 = funct(cbs, p1, p2, start, end-)
    span = start.merge(end-);
    val = rule17(p1, p2, span);
    case Thunk(case State102(new-cbs-101-102(cbs, val, start)))
  end;
  101-18-0 = funct(cbs, p1, p2, p3, p4, start, end-)
    span = start.merge(end-);
    val = rule18(p1, p2, p3, p4, span);
    case Thunk(case State102(new-cbs-101-102(cbs, val, start)))
  end;
  funct(cbs, val, start) {
    15-5: funct(end-) 101-15-4(cbs, val, end-) end,
    18-1: funct(p1, p2, p3, end-) 101-18-0(cbs, val, p1, p2, p3, start, end-) end,
    17-1: funct(p1, end-) 101-17-0(cbs, val, p1, start, end-) end,
    16-1: funct(p1, p2, p3, p4, end-) 101-16-0(cbs, val, p1, p2, p3, p4, start, end-) end,
    11-1: funct(p1, p2, end-) 101-11-0(cbs, val, p1, p2, start, end-) end,
  } end
).0;
101-10-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule10(p1, span);
  case Thunk(case State102(new-cbs-101-102(cbs, val, start)))
end;
new-cbs-101-111 = funct(cbs, val, start) {
  10-1: funct(end-) 101-10-0(cbs, val, start, end-) end,
} end;
101-27-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule27(p1, span);
  case Thunk(case State111(new-cbs-101-111(cbs, val, start)))
end;
new-cbs-101-112 = funct(cbs, val, start) {
  27-1: funct(end-) 101-27-0(cbs, val, start, end-) end,
} end;
101-12-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule12(p1, p2, span);
  case Thunk(case State102(new-cbs-101-102(cbs, val, start)))
end;
new-cbs-101-109 = funct(cbs, val, start) {
  12-1: funct(p1, end-) 101-12-0(cbs, val, p1, start, end-) end,
} end;
101-9-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule9(p1, span);
  case Thunk(case State102(new-cbs-101-102(cbs, val, start)))
end;
101-14-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule14(p1, p2, p3, p4, span);
  case Thunk(case State102(new-cbs-101-102(cbs, val, start)))
end;
new-cbs-101-103 = funct(cbs, val, start) {
  14-1: funct(p1, p2, p3, end-) 101-14-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
101-44-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule44(p1, span);
  case Thunk(case State103(new-cbs-101-103(cbs, val, start)))
end;
new-cbs-101-107 = funct(cbs, val, start) {
  44-1: funct(end-) 101-44-0(cbs, val, start, end-) end,
} end;
101-30-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule30(p1, span);
  case Thunk(case State107(new-cbs-101-107(cbs, val, start)))
end;
new-cbs-101-108 = funct(cbs, val, start) {
  30-1: funct(end-) 101-30-0(cbs, val, start, end-) end,
  9-1: funct(end-) 101-9-0(cbs, val, start, end-) end,
} end;
101-5-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule5(p1, span);
  case Thunk(case State108(new-cbs-101-108(cbs, val, start)))
end;
new-cbs-101-65 = funct(cbs, val, start) {
  5-1: funct(end-) 101-5-0(cbs, val, start, end-) end,
} end;
101-6-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule6(p1, span);
  case Thunk(case State108(new-cbs-101-108(cbs, val, start)))
end;
new-cbs-101-64 = funct(cbs, val, start) {
  6-1: funct(end-) 101-6-0(cbs, val, start, end-) end,
} end;
101-7-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule7(p1, span);
  case Thunk(case State108(new-cbs-101-108(cbs, val, start)))
end;
new-cbs-101-63 = funct(cbs, val, start) {
  7-1: funct(end-) 101-7-0(cbs, val, start, end-) end,
} end;
101-8-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule8(p1, span);
  case Thunk(case State108(new-cbs-101-108(cbs, val, start)))
end;
new-cbs-101-62 = funct(cbs, val, start) {
  8-1: funct(end-) 101-8-0(cbs, val, start, end-) end,
} end;
101-45-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule45(p1, p2, span);
  case Thunk(case State103(new-cbs-101-103(cbs, val, start)))
end;
101-15-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
  span = start.merge(end-);
  val = rule15(p1, p2, p3, p4, p5, span);
  case Thunk(case State102(new-cbs-101-102(cbs, val, start)))
end;
new-cbs-101-74 = funct(cbs, val, start) {
  15-1: funct(p1, p2, p3, p4, end-) 101-15-0(cbs, val, p1, p2, p3, p4, start, end-) end,
  45-1: funct(p1, end-) 101-45-0(cbs, val, p1, start, end-) end,
} end;
101-19-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule19(p1, span);
  case Thunk(case State102(new-cbs-101-102(cbs, val, start)))
end;
new-cbs-101-70 = funct(cbs, val, start) {
  19-1: funct(end-) 101-19-0(cbs, val, start, end-) end,
} end;
101-49-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule49(p1, p2, p3, span);
  case Thunk(case State70(new-cbs-101-70(cbs, val, start)))
end;
new-cbs-101-71 = funct(cbs, val, start) {
  49-1: funct(p1, p2, end-) 101-49-0(cbs, val, p1, p2, start, end-) end,
} end;
101-50-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule50(p1, p2, p3, span);
  case Thunk(case State70(new-cbs-101-70(cbs, val, start)))
end;
new-cbs-101-55 = funct(cbs, val, start) {
  50-1: funct(p1, p2, end-) 101-50-0(cbs, val, p1, p2, start, end-) end,
} end;
101-20-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule20(p1, p2, p3, span);
  case Thunk(case State102(new-cbs-101-102(cbs, val, start)))
end;
new-cbs-101-52 = funct(cbs, val, start) {
  20-1: funct(p1, p2, end-) 101-20-0(cbs, val, p1, p2, start, end-) end,
} end;
101-21-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule21(p1, p2, p3, span);
  case Thunk(case State102(new-cbs-101-102(cbs, val, start)))
end;
new-cbs-101-44 = funct(cbs, val, start) {
  21-1: funct(p1, p2, end-) 101-21-0(cbs, val, p1, p2, start, end-) end,
} end;
101-22-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule22(p1, span);
  case Thunk(case State102(new-cbs-101-102(cbs, val, start)))
end;
new-cbs-101-43 = funct(cbs, val, start) {
  22-1: funct(end-) 101-22-0(cbs, val, start, end-) end,
} end;
101-23-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule23(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State102(new-cbs-101-102(cbs, val, start)))
end;
new-cbs-101-35 = funct(cbs, val, start) {
  23-1: funct(p1, p2, p3, p4, p5, end-) 101-23-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
} end;
101-13-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule13(p1, p2, p3, p4, span);
  case Thunk(case State102(new-cbs-101-102(cbs, val, start)))
end;
101-24-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule24(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State102(new-cbs-101-102(cbs, val, start)))
end;
101-25-0 = funct(cbs, p1, p2, p3, p4, p5, p6, p7, p8, start, end-)
  span = start.merge(end-);
  val = rule25(p1, p2, p3, p4, p5, p6, p7, p8, span);
  case Thunk(case State102(new-cbs-101-102(cbs, val, start)))
end;
new-cbs-101-29 = funct(cbs, val, start) {
  25-1: funct(p1, p2, p3, p4, p5, p6, p7, end-) 101-25-0(cbs, val, p1, p2, p3, p4, p5, p6, p7, start, end-) end,
  24-1: funct(p1, p2, p3, p4, p5, end-) 101-24-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
  13-1: funct(p1, p2, p3, end-) 101-13-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
101-26-0 = funct(cbs, p1, p2, p3, p4, p5, p6, p7, p8, start, end-)
  span = start.merge(end-);
  val = rule26(p1, p2, p3, p4, p5, p6, p7, p8, span);
  case Thunk(case State102(new-cbs-101-102(cbs, val, start)))
end;
new-cbs-101-21 = funct(cbs, val, start) {
  26-1: funct(p1, p2, p3, p4, p5, p6, p7, end-) 101-26-0(cbs, val, p1, p2, p3, p4, p5, p6, p7, start, end-) end,
} end;
state101 = funct(cbs)
  tok = get-token();
  debug = "state101:
exprns := LET varpat FUTURE = % exprns
exprns := % FUNCT unsafe_opt thisp_opt ( param_list ) expr END
exprns := % DO FOR letpat IN expr THEN expr END
exprns := % DO WHILE expr THEN expr END
exprns := % IF expr THEN expr elseb_opt END
exprns := % JS
exprns := % [ restexpr_list ]
exprns := % CASE id objlit
exprns := % objlit
objlit := % { keyval_list }
objlit := % ( expr_list )
exprns := % exprns ( expr_list )
exprns := % exprns field_sub
exprns := % exprns . phantom_id = exprns
exprns := % LET varpat FUTURE = exprns
exprns := % letpat = poly_opt exprns
letpat := % LET pattern
letpat := % varpat
varpat := % id
id := % END
id := % FOR
id := % WHILE
id := % ID
exprns := % DO UNSAFE expr END
exprns := % ! exprns
exprns := % exprns BINOP exprns
exprns := % string
string := % STRING
exprns := % id";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "FUNCT" then
    tokens.pop();
    state21(new-cbs-101-21(cbs, tok, tok.span))
  else if tok.type == "DO" then
    tokens.pop();
    state29(new-cbs-101-29(cbs, tok, tok.span))
  else if tok.type == "IF" then
    tokens.pop();
    state35(new-cbs-101-35(cbs, tok, tok.span))
  else if tok.type == "JS" then
    tokens.pop();
    state43(new-cbs-101-43(cbs, tok, tok.span))
  else if tok.type == "[" then
    tokens.pop();
    state44(new-cbs-101-44(cbs, tok, tok.span))
  else if tok.type == "CASE" then
    tokens.pop();
    state52(new-cbs-101-52(cbs, tok, tok.span))
  else if tok.type == "{" then
    tokens.pop();
    state55(new-cbs-101-55(cbs, tok, tok.span))
  else if tok.type == "(" then
    tokens.pop();
    state71(new-cbs-101-71(cbs, tok, tok.span))
  else if tok.type == "LET" then
    tokens.pop();
    state74(new-cbs-101-74(cbs, tok, tok.span))
  else if tok.type == "END" then
    tokens.pop();
    state62(new-cbs-101-62(cbs, tok, tok.span))
  else if tok.type == "FOR" then
    tokens.pop();
    state63(new-cbs-101-63(cbs, tok, tok.span))
  else if tok.type == "WHILE" then
    tokens.pop();
    state64(new-cbs-101-64(cbs, tok, tok.span))
  else if tok.type == "ID" then
    tokens.pop();
    state65(new-cbs-101-65(cbs, tok, tok.span))
  else if tok.type == "!" then
    tokens.pop();
    state109(new-cbs-101-109(cbs, tok, tok.span))
  else if tok.type == "STRING" then
    tokens.pop();
    state112(new-cbs-101-112(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end end end end end end end end end end end end end end end
end;
state100 = funct(cbs)
  tok = get-token();
  debug = "state100:
exprns := LET varpat FUTURE % = exprns";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "=" then
    tokens.pop();
    state101(new-cbs-100-101(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end
end;
state99 = funct(cbs)
  tok = get-token();
  debug = "state99:
exprns := LET varpat % FUTURE = exprns
pattern := varpat %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "ID" && (tok.val == "future").0 then
    tokens.pop();
    state100(new-cbs-99-100(cbs, tok, tok.span))
  else
    cbs.39-1(tok.span.start())
  end end
end;
state97 = funct(cbs)
  tok = get-token();
  debug = "state97:
pattern := CASE id objpat %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.38-3(tok.span.start())
  end
end;
96-38-2 = funct(cbs, p3, end-) cbs.38-2(p3, end-) end;
new-cbs-96-97 = funct(cbs, val, start) {
  38-3: funct(end-) 96-38-2(cbs, val, end-) end,
} end;
96-31-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule31(p1, p2, p3, span);
  case Thunk(case State97(new-cbs-96-97(cbs, val, start)))
end;
new-cbs-96-87 = funct(cbs, val, start) {
  31-1: funct(p1, p2, end-) 96-31-0(cbs, val, p1, p2, start, end-) end,
} end;
96-32-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule32(p1, p2, p3, span);
  case Thunk(case State97(new-cbs-96-97(cbs, val, start)))
end;
new-cbs-96-77 = funct(cbs, val, start) {
  32-1: funct(p1, p2, end-) 96-32-0(cbs, val, p1, p2, start, end-) end,
} end;
state96 = funct(cbs)
  tok = get-token();
  debug = "state96:
pattern := CASE id % objpat
objpat := % { keypat_list }
objpat := % ( pattern_list )";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "{" then
    tokens.pop();
    state77(new-cbs-96-77(cbs, tok, tok.span))
  else if tok.type == "(" then
    tokens.pop();
    state87(new-cbs-96-87(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end end
end;
state94 = funct(cbs)
  tok = get-token();
  debug = "state94:
varpat := id %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.30-1(tok.span.start())
  end
end;
state93 = funct(cbs)
  tok = get-token();
  debug = "state93:
pattern := varpat %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.39-1(tok.span.start())
  end
end;
state92 = funct(cbs)
  tok = get-token();
  debug = "state92:
pattern_list := pattern , pattern_list %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.43-3(tok.span.start())
  end
end;
90-43-1 = funct(cbs, p2, p3, end-) cbs.43-1(p2, p3, end-) end;
new-cbs-90-91 = funct(cbs, val, start) {
  43-2: funct(p2, end-) 90-43-1(cbs, val, p2, end-) end,
} end;
91-43-2 = funct(cbs, p3, end-) cbs.43-2(p3, end-) end;
new-cbs-91-92 = funct(cbs, val, start) {
  43-3: funct(end-) 91-43-2(cbs, val, end-) end,
} end;
91-41-0 = funct(cbs, start, end-)
  span = start.merge(end-);
  val = rule41(span);
  case Thunk(case State92(new-cbs-91-92(cbs, val, start)))
end;
91-42-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule42(p1, span);
  case Thunk(case State92(new-cbs-91-92(cbs, val, start)))
end;
91-43-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule43(p1, p2, p3, span);
  case Thunk(case State92(new-cbs-91-92(cbs, val, start)))
end;
new-cbs-91-90 = funct(cbs, val, start) {
  43-1: funct(p1, p2, end-) 91-43-0(cbs, val, p1, p2, start, end-) end,
  42-1: funct(end-) 91-42-0(cbs, val, start, end-) end,
} end;
91-38-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule38(p1, p2, p3, span);
  case Thunk(case State90(new-cbs-91-90(cbs, val, start)))
end;
new-cbs-91-95 = funct(cbs, val, start) {
  38-1: funct(p1, p2, end-) 91-38-0(cbs, val, p1, p2, start, end-) end,
} end;
91-39-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule39(p1, span);
  case Thunk(case State90(new-cbs-91-90(cbs, val, start)))
end;
new-cbs-91-93 = funct(cbs, val, start) {
  39-1: funct(end-) 91-39-0(cbs, val, start, end-) end,
} end;
91-30-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule30(p1, span);
  case Thunk(case State93(new-cbs-91-93(cbs, val, start)))
end;
new-cbs-91-94 = funct(cbs, val, start) {
  30-1: funct(end-) 91-30-0(cbs, val, start, end-) end,
} end;
91-5-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule5(p1, span);
  case Thunk(case State94(new-cbs-91-94(cbs, val, start)))
end;
new-cbs-91-65 = funct(cbs, val, start) {
  5-1: funct(end-) 91-5-0(cbs, val, start, end-) end,
} end;
91-6-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule6(p1, span);
  case Thunk(case State94(new-cbs-91-94(cbs, val, start)))
end;
new-cbs-91-64 = funct(cbs, val, start) {
  6-1: funct(end-) 91-6-0(cbs, val, start, end-) end,
} end;
91-7-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule7(p1, span);
  case Thunk(case State94(new-cbs-91-94(cbs, val, start)))
end;
new-cbs-91-63 = funct(cbs, val, start) {
  7-1: funct(end-) 91-7-0(cbs, val, start, end-) end,
} end;
91-8-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule8(p1, span);
  case Thunk(case State94(new-cbs-91-94(cbs, val, start)))
end;
new-cbs-91-62 = funct(cbs, val, start) {
  8-1: funct(end-) 91-8-0(cbs, val, start, end-) end,
} end;
91-40-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule40(p1, span);
  case Thunk(case State90(new-cbs-91-90(cbs, val, start)))
end;
new-cbs-91-76 = funct(cbs, val, start) {
  40-1: funct(end-) 91-40-0(cbs, val, start, end-) end,
} end;
91-31-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule31(p1, p2, p3, span);
  case Thunk(case State76(new-cbs-91-76(cbs, val, start)))
end;
new-cbs-91-87 = funct(cbs, val, start) {
  31-1: funct(p1, p2, end-) 91-31-0(cbs, val, p1, p2, start, end-) end,
} end;
91-32-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule32(p1, p2, p3, span);
  case Thunk(case State76(new-cbs-91-76(cbs, val, start)))
end;
new-cbs-91-77 = funct(cbs, val, start) {
  32-1: funct(p1, p2, end-) 91-32-0(cbs, val, p1, p2, start, end-) end,
} end;
state91 = funct(cbs)
  tok = get-token();
  debug = "state91:
pattern_list := pattern , % pattern_list
pattern_list := % pattern , pattern_list
pattern := % objpat
objpat := % { keypat_list }
objpat := % ( pattern_list )
pattern := % varpat
varpat := % id
id := % END
id := % FOR
id := % WHILE
id := % ID
pattern := % CASE id objpat
pattern_list := % pattern
pattern_list := %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "{" then
    tokens.pop();
    state77(new-cbs-91-77(cbs, tok, tok.span))
  else if tok.type == "(" then
    tokens.pop();
    state87(new-cbs-91-87(cbs, tok, tok.span))
  else if tok.type == "END" then
    tokens.pop();
    state62(new-cbs-91-62(cbs, tok, tok.span))
  else if tok.type == "FOR" then
    tokens.pop();
    state63(new-cbs-91-63(cbs, tok, tok.span))
  else if tok.type == "WHILE" then
    tokens.pop();
    state64(new-cbs-91-64(cbs, tok, tok.span))
  else if tok.type == "ID" then
    tokens.pop();
    state65(new-cbs-91-65(cbs, tok, tok.span))
  else if tok.type == "CASE" then
    tokens.pop();
    state95(new-cbs-91-95(cbs, tok, tok.span))
  else
    span = tok.span.start();
    91-41-0(cbs, span, span)
  end end end end end end end end
end;
state90 = funct(cbs)
  tok = get-token();
  debug = "state90:
pattern_list := pattern % , pattern_list
pattern_list := pattern %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "," then
    tokens.pop();
    state91(new-cbs-90-91(cbs, tok, tok.span))
  else
    cbs.42-1(tok.span.start())
  end end
end;
88-31-2 = funct(cbs, p3, end-) cbs.31-2(p3, end-) end;
new-cbs-88-89 = funct(cbs, val, start) {
  31-3: funct(end-) 88-31-2(cbs, val, end-) end,
} end;
state89 = funct(cbs)
  tok = get-token();
  debug = "state89:
objpat := ( pattern_list ) %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.31-3(tok.span.start())
  end
end;
state88 = funct(cbs)
  tok = get-token();
  debug = "state88:
objpat := ( pattern_list % )";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == ")" then
    tokens.pop();
    state89(new-cbs-88-89(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end
end;
state86 = funct(cbs)
  tok = get-token();
  debug = "state86:
keypat := phantom_id : pattern %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.33-3(tok.span.start())
  end
end;
84-33-1 = funct(cbs, p2, p3, end-) cbs.33-1(p2, p3, end-) end;
new-cbs-84-85 = funct(cbs, val, start) {
  33-2: funct(p2, end-) 84-33-1(cbs, val, p2, end-) end,
} end;
85-33-2 = funct(cbs, p3, end-) cbs.33-2(p3, end-) end;
new-cbs-85-86 = funct(cbs, val, start) {
  33-3: funct(end-) 85-33-2(cbs, val, end-) end,
} end;
85-38-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule38(p1, p2, p3, span);
  case Thunk(case State86(new-cbs-85-86(cbs, val, start)))
end;
new-cbs-85-95 = funct(cbs, val, start) {
  38-1: funct(p1, p2, end-) 85-38-0(cbs, val, p1, p2, start, end-) end,
} end;
85-39-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule39(p1, span);
  case Thunk(case State86(new-cbs-85-86(cbs, val, start)))
end;
new-cbs-85-93 = funct(cbs, val, start) {
  39-1: funct(end-) 85-39-0(cbs, val, start, end-) end,
} end;
85-30-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule30(p1, span);
  case Thunk(case State93(new-cbs-85-93(cbs, val, start)))
end;
new-cbs-85-94 = funct(cbs, val, start) {
  30-1: funct(end-) 85-30-0(cbs, val, start, end-) end,
} end;
85-5-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule5(p1, span);
  case Thunk(case State94(new-cbs-85-94(cbs, val, start)))
end;
new-cbs-85-65 = funct(cbs, val, start) {
  5-1: funct(end-) 85-5-0(cbs, val, start, end-) end,
} end;
85-6-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule6(p1, span);
  case Thunk(case State94(new-cbs-85-94(cbs, val, start)))
end;
new-cbs-85-64 = funct(cbs, val, start) {
  6-1: funct(end-) 85-6-0(cbs, val, start, end-) end,
} end;
85-7-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule7(p1, span);
  case Thunk(case State94(new-cbs-85-94(cbs, val, start)))
end;
new-cbs-85-63 = funct(cbs, val, start) {
  7-1: funct(end-) 85-7-0(cbs, val, start, end-) end,
} end;
85-8-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule8(p1, span);
  case Thunk(case State94(new-cbs-85-94(cbs, val, start)))
end;
new-cbs-85-62 = funct(cbs, val, start) {
  8-1: funct(end-) 85-8-0(cbs, val, start, end-) end,
} end;
85-40-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule40(p1, span);
  case Thunk(case State86(new-cbs-85-86(cbs, val, start)))
end;
new-cbs-85-76 = funct(cbs, val, start) {
  40-1: funct(end-) 85-40-0(cbs, val, start, end-) end,
} end;
85-31-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule31(p1, p2, p3, span);
  case Thunk(case State76(new-cbs-85-76(cbs, val, start)))
end;
new-cbs-85-87 = funct(cbs, val, start) {
  31-1: funct(p1, p2, end-) 85-31-0(cbs, val, p1, p2, start, end-) end,
} end;
85-32-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule32(p1, p2, p3, span);
  case Thunk(case State76(new-cbs-85-76(cbs, val, start)))
end;
new-cbs-85-77 = funct(cbs, val, start) {
  32-1: funct(p1, p2, end-) 85-32-0(cbs, val, p1, p2, start, end-) end,
} end;
state85 = funct(cbs)
  tok = get-token();
  debug = "state85:
keypat := phantom_id : % pattern
pattern := % objpat
objpat := % { keypat_list }
objpat := % ( pattern_list )
pattern := % varpat
varpat := % id
id := % END
id := % FOR
id := % WHILE
id := % ID
pattern := % CASE id objpat";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "{" then
    tokens.pop();
    state77(new-cbs-85-77(cbs, tok, tok.span))
  else if tok.type == "(" then
    tokens.pop();
    state87(new-cbs-85-87(cbs, tok, tok.span))
  else if tok.type == "END" then
    tokens.pop();
    state62(new-cbs-85-62(cbs, tok, tok.span))
  else if tok.type == "FOR" then
    tokens.pop();
    state63(new-cbs-85-63(cbs, tok, tok.span))
  else if tok.type == "WHILE" then
    tokens.pop();
    state64(new-cbs-85-64(cbs, tok, tok.span))
  else if tok.type == "ID" then
    tokens.pop();
    state65(new-cbs-85-65(cbs, tok, tok.span))
  else if tok.type == "CASE" then
    tokens.pop();
    state95(new-cbs-85-95(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end end end end end end end
end;
state84 = funct(cbs)
  tok = get-token();
  debug = "state84:
keypat := phantom_id % : pattern";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == ":" then
    tokens.pop();
    state85(new-cbs-84-85(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end
end;
state83 = funct(cbs)
  tok = get-token();
  debug = "state83:
phantom_id := id %
keypat := id %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == ":" then
    cbs.28-1(tok.span.start())
  else
    cbs.34-1(tok.span.start())
  end end
end;
state82 = funct(cbs)
  tok = get-token();
  debug = "state82:
keypat_list := keypat , keypat_list %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.37-3(tok.span.start())
  end
end;
80-37-1 = funct(cbs, p2, p3, end-) cbs.37-1(p2, p3, end-) end;
new-cbs-80-81 = funct(cbs, val, start) {
  37-2: funct(p2, end-) 80-37-1(cbs, val, p2, end-) end,
} end;
81-37-2 = funct(cbs, p3, end-) cbs.37-2(p3, end-) end;
new-cbs-81-82 = funct(cbs, val, start) {
  37-3: funct(end-) 81-37-2(cbs, val, end-) end,
} end;
81-35-0 = funct(cbs, start, end-)
  span = start.merge(end-);
  val = rule35(span);
  case Thunk(case State82(new-cbs-81-82(cbs, val, start)))
end;
81-36-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule36(p1, span);
  case Thunk(case State82(new-cbs-81-82(cbs, val, start)))
end;
81-37-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule37(p1, p2, p3, span);
  case Thunk(case State82(new-cbs-81-82(cbs, val, start)))
end;
new-cbs-81-80 = funct(cbs, val, start) {
  37-1: funct(p1, p2, end-) 81-37-0(cbs, val, p1, p2, start, end-) end,
  36-1: funct(end-) 81-36-0(cbs, val, start, end-) end,
} end;
81-33-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule33(p1, p2, p3, span);
  case Thunk(case State80(new-cbs-81-80(cbs, val, start)))
end;
new-cbs-81-84 = funct(cbs, val, start) {
  33-1: funct(p1, p2, end-) 81-33-0(cbs, val, p1, p2, start, end-) end,
} end;
81-29-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule29(p1, span);
  case Thunk(case State84(new-cbs-81-84(cbs, val, start)))
end;
new-cbs-81-98 = funct(cbs, val, start) {
  29-1: funct(end-) 81-29-0(cbs, val, start, end-) end,
} end;
81-28-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule28(p1, span);
  case Thunk(case State84(new-cbs-81-84(cbs, val, start)))
end;
81-34-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule34(p1, span);
  case Thunk(case State80(new-cbs-81-80(cbs, val, start)))
end;
new-cbs-81-83 = funct(cbs, val, start) {
  34-1: funct(end-) 81-34-0(cbs, val, start, end-) end,
  28-1: funct(end-) 81-28-0(cbs, val, start, end-) end,
} end;
81-5-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule5(p1, span);
  case Thunk(case State83(new-cbs-81-83(cbs, val, start)))
end;
new-cbs-81-65 = funct(cbs, val, start) {
  5-1: funct(end-) 81-5-0(cbs, val, start, end-) end,
} end;
81-6-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule6(p1, span);
  case Thunk(case State83(new-cbs-81-83(cbs, val, start)))
end;
new-cbs-81-64 = funct(cbs, val, start) {
  6-1: funct(end-) 81-6-0(cbs, val, start, end-) end,
} end;
81-7-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule7(p1, span);
  case Thunk(case State83(new-cbs-81-83(cbs, val, start)))
end;
new-cbs-81-63 = funct(cbs, val, start) {
  7-1: funct(end-) 81-7-0(cbs, val, start, end-) end,
} end;
81-8-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule8(p1, span);
  case Thunk(case State83(new-cbs-81-83(cbs, val, start)))
end;
new-cbs-81-62 = funct(cbs, val, start) {
  8-1: funct(end-) 81-8-0(cbs, val, start, end-) end,
} end;
state81 = funct(cbs)
  tok = get-token();
  debug = "state81:
keypat_list := keypat , % keypat_list
keypat_list := % keypat , keypat_list
keypat := % id
id := % END
id := % FOR
id := % WHILE
id := % ID
keypat := % phantom_id : pattern
phantom_id := % PHANTOM_ID
phantom_id := % id
keypat_list := % keypat
keypat_list := %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "END" then
    tokens.pop();
    state62(new-cbs-81-62(cbs, tok, tok.span))
  else if tok.type == "FOR" then
    tokens.pop();
    state63(new-cbs-81-63(cbs, tok, tok.span))
  else if tok.type == "WHILE" then
    tokens.pop();
    state64(new-cbs-81-64(cbs, tok, tok.span))
  else if tok.type == "ID" then
    tokens.pop();
    state65(new-cbs-81-65(cbs, tok, tok.span))
  else if tok.type == "PHANTOM_ID" then
    tokens.pop();
    state98(new-cbs-81-98(cbs, tok, tok.span))
  else
    span = tok.span.start();
    81-35-0(cbs, span, span)
  end end end end end end
end;
state80 = funct(cbs)
  tok = get-token();
  debug = "state80:
keypat_list := keypat % , keypat_list
keypat_list := keypat %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "," then
    tokens.pop();
    state81(new-cbs-80-81(cbs, tok, tok.span))
  else
    cbs.36-1(tok.span.start())
  end end
end;
78-32-2 = funct(cbs, p3, end-) cbs.32-2(p3, end-) end;
new-cbs-78-79 = funct(cbs, val, start) {
  32-3: funct(end-) 78-32-2(cbs, val, end-) end,
} end;
state79 = funct(cbs)
  tok = get-token();
  debug = "state79:
objpat := { keypat_list } %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.32-3(tok.span.start())
  end
end;
state78 = funct(cbs)
  tok = get-token();
  debug = "state78:
objpat := { keypat_list % }";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "}" then
    tokens.pop();
    state79(new-cbs-78-79(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end
end;
state76 = funct(cbs)
  tok = get-token();
  debug = "state76:
pattern := objpat %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.40-1(tok.span.start())
  end
end;
state75 = funct(cbs)
  tok = get-token();
  debug = "state75:
letpat := LET pattern %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.45-2(tok.span.start())
  end
end;
72-49-2 = funct(cbs, p3, end-) cbs.49-2(p3, end-) end;
new-cbs-72-73 = funct(cbs, val, start) {
  49-3: funct(end-) 72-49-2(cbs, val, end-) end,
} end;
state73 = funct(cbs)
  tok = get-token();
  debug = "state73:
objlit := ( expr_list ) %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.49-3(tok.span.start())
  end
end;
state72 = funct(cbs)
  tok = get-token();
  debug = "state72:
objlit := ( expr_list % )";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == ")" then
    tokens.pop();
    state73(new-cbs-72-73(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end
end;
state70 = funct(cbs)
  tok = get-token();
  debug = "state70:
exprns := objlit %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.19-1(tok.span.start())
  end
end;
69-1-1 = funct(cbs, p2, p3, end-) cbs.1-1(p2, p3, end-) end;
new-cbs-69-5 = funct(cbs, val, start) {
  1-2: funct(p2, end-) 69-1-1(cbs, val, p2, end-) end,
} end;
state69 = funct(cbs)
  tok = get-token();
  debug = "state69:
keyval := phantom_id mut_opt : expr %
expr := expr % ; exprns";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == ";" then
    tokens.pop();
    state5(new-cbs-69-5(cbs, tok, tok.span))
  else
    cbs.53-4(tok.span.start())
  end end
end;
67-53-2 = funct(cbs, p3, p4, end-) cbs.53-2(p3, p4, end-) end;
new-cbs-67-68 = funct(cbs, val, start) {
  53-3: funct(p3, end-) 67-53-2(cbs, val, p3, end-) end,
} end;
68-53-3 = funct(cbs, p4, end-) cbs.53-3(p4, end-) end;
let new-cbs-68-69 future = (
  68-1-0 = funct(cbs, p1, p2, p3, start, end-)
    span = start.merge(end-);
    val = rule1(p1, p2, p3, span);
    case Thunk(case State69(new-cbs-68-69(cbs, val, start)))
  end;
  funct(cbs, val, start) {
    53-4: funct(end-) 68-53-3(cbs, val, end-) end,
    1-1: funct(p1, p2, end-) 68-1-0(cbs, val, p1, p2, start, end-) end,
  } end
).0;
68-0-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule0(p1, span);
  case Thunk(case State69(new-cbs-68-69(cbs, val, start)))
end;
let new-cbs-68-20 future = (
  68-11-0 = funct(cbs, p1, p2, p3, start, end-)
    span = start.merge(end-);
    val = rule11(p1, p2, p3, span);
    case Thunk(case State20(new-cbs-68-20(cbs, val, start)))
  end;
  68-16-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
    span = start.merge(end-);
    val = rule16(p1, p2, p3, p4, p5, span);
    case Thunk(case State20(new-cbs-68-20(cbs, val, start)))
  end;
  68-17-0 = funct(cbs, p1, p2, start, end-)
    span = start.merge(end-);
    val = rule17(p1, p2, span);
    case Thunk(case State20(new-cbs-68-20(cbs, val, start)))
  end;
  68-18-0 = funct(cbs, p1, p2, p3, p4, start, end-)
    span = start.merge(end-);
    val = rule18(p1, p2, p3, p4, span);
    case Thunk(case State20(new-cbs-68-20(cbs, val, start)))
  end;
  funct(cbs, val, start) {
    0-1: funct(end-) 68-0-0(cbs, val, start, end-) end,
    18-1: funct(p1, p2, p3, end-) 68-18-0(cbs, val, p1, p2, p3, start, end-) end,
    17-1: funct(p1, end-) 68-17-0(cbs, val, p1, start, end-) end,
    16-1: funct(p1, p2, p3, p4, end-) 68-16-0(cbs, val, p1, p2, p3, p4, start, end-) end,
    11-1: funct(p1, p2, end-) 68-11-0(cbs, val, p1, p2, start, end-) end,
  } end
).0;
68-10-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule10(p1, span);
  case Thunk(case State20(new-cbs-68-20(cbs, val, start)))
end;
new-cbs-68-111 = funct(cbs, val, start) {
  10-1: funct(end-) 68-10-0(cbs, val, start, end-) end,
} end;
68-27-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule27(p1, span);
  case Thunk(case State111(new-cbs-68-111(cbs, val, start)))
end;
new-cbs-68-112 = funct(cbs, val, start) {
  27-1: funct(end-) 68-27-0(cbs, val, start, end-) end,
} end;
68-12-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule12(p1, p2, span);
  case Thunk(case State20(new-cbs-68-20(cbs, val, start)))
end;
new-cbs-68-109 = funct(cbs, val, start) {
  12-1: funct(p1, end-) 68-12-0(cbs, val, p1, start, end-) end,
} end;
68-9-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule9(p1, span);
  case Thunk(case State20(new-cbs-68-20(cbs, val, start)))
end;
68-14-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule14(p1, p2, p3, p4, span);
  case Thunk(case State20(new-cbs-68-20(cbs, val, start)))
end;
new-cbs-68-103 = funct(cbs, val, start) {
  14-1: funct(p1, p2, p3, end-) 68-14-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
68-44-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule44(p1, span);
  case Thunk(case State103(new-cbs-68-103(cbs, val, start)))
end;
new-cbs-68-107 = funct(cbs, val, start) {
  44-1: funct(end-) 68-44-0(cbs, val, start, end-) end,
} end;
68-30-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule30(p1, span);
  case Thunk(case State107(new-cbs-68-107(cbs, val, start)))
end;
new-cbs-68-108 = funct(cbs, val, start) {
  30-1: funct(end-) 68-30-0(cbs, val, start, end-) end,
  9-1: funct(end-) 68-9-0(cbs, val, start, end-) end,
} end;
68-5-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule5(p1, span);
  case Thunk(case State108(new-cbs-68-108(cbs, val, start)))
end;
new-cbs-68-65 = funct(cbs, val, start) {
  5-1: funct(end-) 68-5-0(cbs, val, start, end-) end,
} end;
68-6-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule6(p1, span);
  case Thunk(case State108(new-cbs-68-108(cbs, val, start)))
end;
new-cbs-68-64 = funct(cbs, val, start) {
  6-1: funct(end-) 68-6-0(cbs, val, start, end-) end,
} end;
68-7-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule7(p1, span);
  case Thunk(case State108(new-cbs-68-108(cbs, val, start)))
end;
new-cbs-68-63 = funct(cbs, val, start) {
  7-1: funct(end-) 68-7-0(cbs, val, start, end-) end,
} end;
68-8-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule8(p1, span);
  case Thunk(case State108(new-cbs-68-108(cbs, val, start)))
end;
new-cbs-68-62 = funct(cbs, val, start) {
  8-1: funct(end-) 68-8-0(cbs, val, start, end-) end,
} end;
68-45-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule45(p1, p2, span);
  case Thunk(case State103(new-cbs-68-103(cbs, val, start)))
end;
68-15-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
  span = start.merge(end-);
  val = rule15(p1, p2, p3, p4, p5, span);
  case Thunk(case State20(new-cbs-68-20(cbs, val, start)))
end;
new-cbs-68-74 = funct(cbs, val, start) {
  15-1: funct(p1, p2, p3, p4, end-) 68-15-0(cbs, val, p1, p2, p3, p4, start, end-) end,
  45-1: funct(p1, end-) 68-45-0(cbs, val, p1, start, end-) end,
} end;
68-19-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule19(p1, span);
  case Thunk(case State20(new-cbs-68-20(cbs, val, start)))
end;
new-cbs-68-70 = funct(cbs, val, start) {
  19-1: funct(end-) 68-19-0(cbs, val, start, end-) end,
} end;
68-49-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule49(p1, p2, p3, span);
  case Thunk(case State70(new-cbs-68-70(cbs, val, start)))
end;
new-cbs-68-71 = funct(cbs, val, start) {
  49-1: funct(p1, p2, end-) 68-49-0(cbs, val, p1, p2, start, end-) end,
} end;
68-50-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule50(p1, p2, p3, span);
  case Thunk(case State70(new-cbs-68-70(cbs, val, start)))
end;
new-cbs-68-55 = funct(cbs, val, start) {
  50-1: funct(p1, p2, end-) 68-50-0(cbs, val, p1, p2, start, end-) end,
} end;
68-20-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule20(p1, p2, p3, span);
  case Thunk(case State20(new-cbs-68-20(cbs, val, start)))
end;
new-cbs-68-52 = funct(cbs, val, start) {
  20-1: funct(p1, p2, end-) 68-20-0(cbs, val, p1, p2, start, end-) end,
} end;
68-21-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule21(p1, p2, p3, span);
  case Thunk(case State20(new-cbs-68-20(cbs, val, start)))
end;
new-cbs-68-44 = funct(cbs, val, start) {
  21-1: funct(p1, p2, end-) 68-21-0(cbs, val, p1, p2, start, end-) end,
} end;
68-22-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule22(p1, span);
  case Thunk(case State20(new-cbs-68-20(cbs, val, start)))
end;
new-cbs-68-43 = funct(cbs, val, start) {
  22-1: funct(end-) 68-22-0(cbs, val, start, end-) end,
} end;
68-23-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule23(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State20(new-cbs-68-20(cbs, val, start)))
end;
new-cbs-68-35 = funct(cbs, val, start) {
  23-1: funct(p1, p2, p3, p4, p5, end-) 68-23-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
} end;
68-13-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule13(p1, p2, p3, p4, span);
  case Thunk(case State20(new-cbs-68-20(cbs, val, start)))
end;
68-24-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule24(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State20(new-cbs-68-20(cbs, val, start)))
end;
68-25-0 = funct(cbs, p1, p2, p3, p4, p5, p6, p7, p8, start, end-)
  span = start.merge(end-);
  val = rule25(p1, p2, p3, p4, p5, p6, p7, p8, span);
  case Thunk(case State20(new-cbs-68-20(cbs, val, start)))
end;
new-cbs-68-29 = funct(cbs, val, start) {
  25-1: funct(p1, p2, p3, p4, p5, p6, p7, end-) 68-25-0(cbs, val, p1, p2, p3, p4, p5, p6, p7, start, end-) end,
  24-1: funct(p1, p2, p3, p4, p5, end-) 68-24-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
  13-1: funct(p1, p2, p3, end-) 68-13-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
68-26-0 = funct(cbs, p1, p2, p3, p4, p5, p6, p7, p8, start, end-)
  span = start.merge(end-);
  val = rule26(p1, p2, p3, p4, p5, p6, p7, p8, span);
  case Thunk(case State20(new-cbs-68-20(cbs, val, start)))
end;
new-cbs-68-21 = funct(cbs, val, start) {
  26-1: funct(p1, p2, p3, p4, p5, p6, p7, end-) 68-26-0(cbs, val, p1, p2, p3, p4, p5, p6, p7, start, end-) end,
} end;
state68 = funct(cbs)
  tok = get-token();
  debug = "state68:
keyval := phantom_id mut_opt : % expr
expr := % expr ; exprns
expr := % exprns
exprns := % FUNCT unsafe_opt thisp_opt ( param_list ) expr END
exprns := % DO FOR letpat IN expr THEN expr END
exprns := % DO WHILE expr THEN expr END
exprns := % IF expr THEN expr elseb_opt END
exprns := % JS
exprns := % [ restexpr_list ]
exprns := % CASE id objlit
exprns := % objlit
objlit := % { keyval_list }
objlit := % ( expr_list )
exprns := % exprns ( expr_list )
exprns := % exprns field_sub
exprns := % exprns . phantom_id = exprns
exprns := % LET varpat FUTURE = exprns
exprns := % letpat = poly_opt exprns
letpat := % LET pattern
letpat := % varpat
varpat := % id
id := % END
id := % FOR
id := % WHILE
id := % ID
exprns := % DO UNSAFE expr END
exprns := % ! exprns
exprns := % exprns BINOP exprns
exprns := % string
string := % STRING
exprns := % id";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "FUNCT" then
    tokens.pop();
    state21(new-cbs-68-21(cbs, tok, tok.span))
  else if tok.type == "DO" then
    tokens.pop();
    state29(new-cbs-68-29(cbs, tok, tok.span))
  else if tok.type == "IF" then
    tokens.pop();
    state35(new-cbs-68-35(cbs, tok, tok.span))
  else if tok.type == "JS" then
    tokens.pop();
    state43(new-cbs-68-43(cbs, tok, tok.span))
  else if tok.type == "[" then
    tokens.pop();
    state44(new-cbs-68-44(cbs, tok, tok.span))
  else if tok.type == "CASE" then
    tokens.pop();
    state52(new-cbs-68-52(cbs, tok, tok.span))
  else if tok.type == "{" then
    tokens.pop();
    state55(new-cbs-68-55(cbs, tok, tok.span))
  else if tok.type == "(" then
    tokens.pop();
    state71(new-cbs-68-71(cbs, tok, tok.span))
  else if tok.type == "LET" then
    tokens.pop();
    state74(new-cbs-68-74(cbs, tok, tok.span))
  else if tok.type == "END" then
    tokens.pop();
    state62(new-cbs-68-62(cbs, tok, tok.span))
  else if tok.type == "FOR" then
    tokens.pop();
    state63(new-cbs-68-63(cbs, tok, tok.span))
  else if tok.type == "WHILE" then
    tokens.pop();
    state64(new-cbs-68-64(cbs, tok, tok.span))
  else if tok.type == "ID" then
    tokens.pop();
    state65(new-cbs-68-65(cbs, tok, tok.span))
  else if tok.type == "!" then
    tokens.pop();
    state109(new-cbs-68-109(cbs, tok, tok.span))
  else if tok.type == "STRING" then
    tokens.pop();
    state112(new-cbs-68-112(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end end end end end end end end end end end end end end end
end;
state67 = funct(cbs)
  tok = get-token();
  debug = "state67:
keyval := phantom_id mut_opt % : expr";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == ":" then
    tokens.pop();
    state68(new-cbs-67-68(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end
end;
66-53-1 = funct(cbs, p2, p3, p4, end-) cbs.53-1(p2, p3, p4, end-) end;
new-cbs-66-67 = funct(cbs, val, start) {
  53-2: funct(p2, p3, end-) 66-53-1(cbs, val, p2, p3, end-) end,
} end;
rule52 = funct(span) false end;
66-52-0 = funct(cbs, start, end-)
  span = start.merge(end-);
  val = rule52(span);
  case Thunk(case State67(new-cbs-66-67(cbs, val, start)))
end;
rule51 = funct(p1, span) true end;
66-51-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule51(p1, span);
  case Thunk(case State67(new-cbs-66-67(cbs, val, start)))
end;
new-cbs-66-114 = funct(cbs, val, start) {
  51-1: funct(end-) 66-51-0(cbs, val, start, end-) end,
} end;
state114 = funct(cbs)
  tok = get-token();
  debug = "state114:
mut_opt := MUT %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.51-1(tok.span.start())
  end
end;
state66 = funct(cbs)
  tok = get-token();
  debug = "state66:
keyval := phantom_id % mut_opt : expr
mut_opt := %
mut_opt := % MUT";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "ID" && (tok.val == "mut").0 then
    tokens.pop();
    state114(new-cbs-66-114(cbs, tok, tok.span))
  else
    span = tok.span.start();
    66-52-0(cbs, span, span)
  end end
end;
state61 = funct(cbs)
  tok = get-token();
  debug = "state61:
phantom_id := id %
keyval := id %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "," then
    cbs.54-1(tok.span.start())
  else if tok.type == "}" then
    cbs.54-1(tok.span.start())
  else
    cbs.28-1(tok.span.start())
  end end end
end;
state60 = funct(cbs)
  tok = get-token();
  debug = "state60:
keyval_list := keyval , keyval_list %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.57-3(tok.span.start())
  end
end;
58-57-1 = funct(cbs, p2, p3, end-) cbs.57-1(p2, p3, end-) end;
new-cbs-58-59 = funct(cbs, val, start) {
  57-2: funct(p2, end-) 58-57-1(cbs, val, p2, end-) end,
} end;
59-57-2 = funct(cbs, p3, end-) cbs.57-2(p3, end-) end;
new-cbs-59-60 = funct(cbs, val, start) {
  57-3: funct(end-) 59-57-2(cbs, val, end-) end,
} end;
59-55-0 = funct(cbs, start, end-)
  span = start.merge(end-);
  val = rule55(span);
  case Thunk(case State60(new-cbs-59-60(cbs, val, start)))
end;
59-56-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule56(p1, span);
  case Thunk(case State60(new-cbs-59-60(cbs, val, start)))
end;
59-57-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule57(p1, p2, p3, span);
  case Thunk(case State60(new-cbs-59-60(cbs, val, start)))
end;
new-cbs-59-58 = funct(cbs, val, start) {
  57-1: funct(p1, p2, end-) 59-57-0(cbs, val, p1, p2, start, end-) end,
  56-1: funct(end-) 59-56-0(cbs, val, start, end-) end,
} end;
59-53-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule53(p1, p2, p3, p4, span);
  case Thunk(case State58(new-cbs-59-58(cbs, val, start)))
end;
new-cbs-59-66 = funct(cbs, val, start) {
  53-1: funct(p1, p2, p3, end-) 59-53-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
59-29-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule29(p1, span);
  case Thunk(case State66(new-cbs-59-66(cbs, val, start)))
end;
new-cbs-59-98 = funct(cbs, val, start) {
  29-1: funct(end-) 59-29-0(cbs, val, start, end-) end,
} end;
59-28-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule28(p1, span);
  case Thunk(case State66(new-cbs-59-66(cbs, val, start)))
end;
59-54-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule54(p1, span);
  case Thunk(case State58(new-cbs-59-58(cbs, val, start)))
end;
new-cbs-59-61 = funct(cbs, val, start) {
  54-1: funct(end-) 59-54-0(cbs, val, start, end-) end,
  28-1: funct(end-) 59-28-0(cbs, val, start, end-) end,
} end;
59-5-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule5(p1, span);
  case Thunk(case State61(new-cbs-59-61(cbs, val, start)))
end;
new-cbs-59-65 = funct(cbs, val, start) {
  5-1: funct(end-) 59-5-0(cbs, val, start, end-) end,
} end;
59-6-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule6(p1, span);
  case Thunk(case State61(new-cbs-59-61(cbs, val, start)))
end;
new-cbs-59-64 = funct(cbs, val, start) {
  6-1: funct(end-) 59-6-0(cbs, val, start, end-) end,
} end;
59-7-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule7(p1, span);
  case Thunk(case State61(new-cbs-59-61(cbs, val, start)))
end;
new-cbs-59-63 = funct(cbs, val, start) {
  7-1: funct(end-) 59-7-0(cbs, val, start, end-) end,
} end;
59-8-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule8(p1, span);
  case Thunk(case State61(new-cbs-59-61(cbs, val, start)))
end;
new-cbs-59-62 = funct(cbs, val, start) {
  8-1: funct(end-) 59-8-0(cbs, val, start, end-) end,
} end;
state59 = funct(cbs)
  tok = get-token();
  debug = "state59:
keyval_list := keyval , % keyval_list
keyval_list := % keyval , keyval_list
keyval := % id
id := % END
id := % FOR
id := % WHILE
id := % ID
keyval := % phantom_id mut_opt : expr
phantom_id := % PHANTOM_ID
phantom_id := % id
keyval_list := % keyval
keyval_list := %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "END" then
    tokens.pop();
    state62(new-cbs-59-62(cbs, tok, tok.span))
  else if tok.type == "FOR" then
    tokens.pop();
    state63(new-cbs-59-63(cbs, tok, tok.span))
  else if tok.type == "WHILE" then
    tokens.pop();
    state64(new-cbs-59-64(cbs, tok, tok.span))
  else if tok.type == "ID" then
    tokens.pop();
    state65(new-cbs-59-65(cbs, tok, tok.span))
  else if tok.type == "PHANTOM_ID" then
    tokens.pop();
    state98(new-cbs-59-98(cbs, tok, tok.span))
  else
    span = tok.span.start();
    59-55-0(cbs, span, span)
  end end end end end end
end;
state58 = funct(cbs)
  tok = get-token();
  debug = "state58:
keyval_list := keyval % , keyval_list
keyval_list := keyval %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "," then
    tokens.pop();
    state59(new-cbs-58-59(cbs, tok, tok.span))
  else
    cbs.56-1(tok.span.start())
  end end
end;
56-50-2 = funct(cbs, p3, end-) cbs.50-2(p3, end-) end;
new-cbs-56-57 = funct(cbs, val, start) {
  50-3: funct(end-) 56-50-2(cbs, val, end-) end,
} end;
state57 = funct(cbs)
  tok = get-token();
  debug = "state57:
objlit := { keyval_list } %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.50-3(tok.span.start())
  end
end;
state56 = funct(cbs)
  tok = get-token();
  debug = "state56:
objlit := { keyval_list % }";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "}" then
    tokens.pop();
    state57(new-cbs-56-57(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end
end;
state54 = funct(cbs)
  tok = get-token();
  debug = "state54:
exprns := CASE id objlit %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.20-3(tok.span.start())
  end
end;
53-20-2 = funct(cbs, p3, end-) cbs.20-2(p3, end-) end;
new-cbs-53-54 = funct(cbs, val, start) {
  20-3: funct(end-) 53-20-2(cbs, val, end-) end,
} end;
53-49-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule49(p1, p2, p3, span);
  case Thunk(case State54(new-cbs-53-54(cbs, val, start)))
end;
new-cbs-53-71 = funct(cbs, val, start) {
  49-1: funct(p1, p2, end-) 53-49-0(cbs, val, p1, p2, start, end-) end,
} end;
53-50-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule50(p1, p2, p3, span);
  case Thunk(case State54(new-cbs-53-54(cbs, val, start)))
end;
new-cbs-53-55 = funct(cbs, val, start) {
  50-1: funct(p1, p2, end-) 53-50-0(cbs, val, p1, p2, start, end-) end,
} end;
state53 = funct(cbs)
  tok = get-token();
  debug = "state53:
exprns := CASE id % objlit
objlit := % { keyval_list }
objlit := % ( expr_list )";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "{" then
    tokens.pop();
    state55(new-cbs-53-55(cbs, tok, tok.span))
  else if tok.type == "(" then
    tokens.pop();
    state71(new-cbs-53-71(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end end
end;
51-1-1 = funct(cbs, p2, p3, end-) cbs.1-1(p2, p3, end-) end;
new-cbs-51-5 = funct(cbs, val, start) {
  1-2: funct(p2, end-) 51-1-1(cbs, val, p2, end-) end,
} end;
state51 = funct(cbs)
  tok = get-token();
  debug = "state51:
restexpr := spread_opt expr %
expr := expr % ; exprns";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == ";" then
    tokens.pop();
    state5(new-cbs-51-5(cbs, tok, tok.span))
  else
    cbs.60-2(tok.span.start())
  end end
end;
50-60-1 = funct(cbs, p2, end-) cbs.60-1(p2, end-) end;
let new-cbs-50-51 future = (
  50-1-0 = funct(cbs, p1, p2, p3, start, end-)
    span = start.merge(end-);
    val = rule1(p1, p2, p3, span);
    case Thunk(case State51(new-cbs-50-51(cbs, val, start)))
  end;
  funct(cbs, val, start) {
    60-2: funct(end-) 50-60-1(cbs, val, end-) end,
    1-1: funct(p1, p2, end-) 50-1-0(cbs, val, p1, p2, start, end-) end,
  } end
).0;
50-0-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule0(p1, span);
  case Thunk(case State51(new-cbs-50-51(cbs, val, start)))
end;
let new-cbs-50-20 future = (
  50-11-0 = funct(cbs, p1, p2, p3, start, end-)
    span = start.merge(end-);
    val = rule11(p1, p2, p3, span);
    case Thunk(case State20(new-cbs-50-20(cbs, val, start)))
  end;
  50-16-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
    span = start.merge(end-);
    val = rule16(p1, p2, p3, p4, p5, span);
    case Thunk(case State20(new-cbs-50-20(cbs, val, start)))
  end;
  50-17-0 = funct(cbs, p1, p2, start, end-)
    span = start.merge(end-);
    val = rule17(p1, p2, span);
    case Thunk(case State20(new-cbs-50-20(cbs, val, start)))
  end;
  50-18-0 = funct(cbs, p1, p2, p3, p4, start, end-)
    span = start.merge(end-);
    val = rule18(p1, p2, p3, p4, span);
    case Thunk(case State20(new-cbs-50-20(cbs, val, start)))
  end;
  funct(cbs, val, start) {
    0-1: funct(end-) 50-0-0(cbs, val, start, end-) end,
    18-1: funct(p1, p2, p3, end-) 50-18-0(cbs, val, p1, p2, p3, start, end-) end,
    17-1: funct(p1, end-) 50-17-0(cbs, val, p1, start, end-) end,
    16-1: funct(p1, p2, p3, p4, end-) 50-16-0(cbs, val, p1, p2, p3, p4, start, end-) end,
    11-1: funct(p1, p2, end-) 50-11-0(cbs, val, p1, p2, start, end-) end,
  } end
).0;
50-10-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule10(p1, span);
  case Thunk(case State20(new-cbs-50-20(cbs, val, start)))
end;
new-cbs-50-111 = funct(cbs, val, start) {
  10-1: funct(end-) 50-10-0(cbs, val, start, end-) end,
} end;
50-27-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule27(p1, span);
  case Thunk(case State111(new-cbs-50-111(cbs, val, start)))
end;
new-cbs-50-112 = funct(cbs, val, start) {
  27-1: funct(end-) 50-27-0(cbs, val, start, end-) end,
} end;
50-12-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule12(p1, p2, span);
  case Thunk(case State20(new-cbs-50-20(cbs, val, start)))
end;
new-cbs-50-109 = funct(cbs, val, start) {
  12-1: funct(p1, end-) 50-12-0(cbs, val, p1, start, end-) end,
} end;
50-9-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule9(p1, span);
  case Thunk(case State20(new-cbs-50-20(cbs, val, start)))
end;
50-14-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule14(p1, p2, p3, p4, span);
  case Thunk(case State20(new-cbs-50-20(cbs, val, start)))
end;
new-cbs-50-103 = funct(cbs, val, start) {
  14-1: funct(p1, p2, p3, end-) 50-14-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
50-44-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule44(p1, span);
  case Thunk(case State103(new-cbs-50-103(cbs, val, start)))
end;
new-cbs-50-107 = funct(cbs, val, start) {
  44-1: funct(end-) 50-44-0(cbs, val, start, end-) end,
} end;
50-30-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule30(p1, span);
  case Thunk(case State107(new-cbs-50-107(cbs, val, start)))
end;
new-cbs-50-108 = funct(cbs, val, start) {
  30-1: funct(end-) 50-30-0(cbs, val, start, end-) end,
  9-1: funct(end-) 50-9-0(cbs, val, start, end-) end,
} end;
50-5-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule5(p1, span);
  case Thunk(case State108(new-cbs-50-108(cbs, val, start)))
end;
new-cbs-50-65 = funct(cbs, val, start) {
  5-1: funct(end-) 50-5-0(cbs, val, start, end-) end,
} end;
50-6-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule6(p1, span);
  case Thunk(case State108(new-cbs-50-108(cbs, val, start)))
end;
new-cbs-50-64 = funct(cbs, val, start) {
  6-1: funct(end-) 50-6-0(cbs, val, start, end-) end,
} end;
50-7-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule7(p1, span);
  case Thunk(case State108(new-cbs-50-108(cbs, val, start)))
end;
new-cbs-50-63 = funct(cbs, val, start) {
  7-1: funct(end-) 50-7-0(cbs, val, start, end-) end,
} end;
50-8-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule8(p1, span);
  case Thunk(case State108(new-cbs-50-108(cbs, val, start)))
end;
new-cbs-50-62 = funct(cbs, val, start) {
  8-1: funct(end-) 50-8-0(cbs, val, start, end-) end,
} end;
50-45-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule45(p1, p2, span);
  case Thunk(case State103(new-cbs-50-103(cbs, val, start)))
end;
50-15-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
  span = start.merge(end-);
  val = rule15(p1, p2, p3, p4, p5, span);
  case Thunk(case State20(new-cbs-50-20(cbs, val, start)))
end;
new-cbs-50-74 = funct(cbs, val, start) {
  15-1: funct(p1, p2, p3, p4, end-) 50-15-0(cbs, val, p1, p2, p3, p4, start, end-) end,
  45-1: funct(p1, end-) 50-45-0(cbs, val, p1, start, end-) end,
} end;
50-19-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule19(p1, span);
  case Thunk(case State20(new-cbs-50-20(cbs, val, start)))
end;
new-cbs-50-70 = funct(cbs, val, start) {
  19-1: funct(end-) 50-19-0(cbs, val, start, end-) end,
} end;
50-49-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule49(p1, p2, p3, span);
  case Thunk(case State70(new-cbs-50-70(cbs, val, start)))
end;
new-cbs-50-71 = funct(cbs, val, start) {
  49-1: funct(p1, p2, end-) 50-49-0(cbs, val, p1, p2, start, end-) end,
} end;
50-50-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule50(p1, p2, p3, span);
  case Thunk(case State70(new-cbs-50-70(cbs, val, start)))
end;
new-cbs-50-55 = funct(cbs, val, start) {
  50-1: funct(p1, p2, end-) 50-50-0(cbs, val, p1, p2, start, end-) end,
} end;
50-20-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule20(p1, p2, p3, span);
  case Thunk(case State20(new-cbs-50-20(cbs, val, start)))
end;
new-cbs-50-52 = funct(cbs, val, start) {
  20-1: funct(p1, p2, end-) 50-20-0(cbs, val, p1, p2, start, end-) end,
} end;
50-21-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule21(p1, p2, p3, span);
  case Thunk(case State20(new-cbs-50-20(cbs, val, start)))
end;
new-cbs-50-44 = funct(cbs, val, start) {
  21-1: funct(p1, p2, end-) 50-21-0(cbs, val, p1, p2, start, end-) end,
} end;
50-22-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule22(p1, span);
  case Thunk(case State20(new-cbs-50-20(cbs, val, start)))
end;
new-cbs-50-43 = funct(cbs, val, start) {
  22-1: funct(end-) 50-22-0(cbs, val, start, end-) end,
} end;
50-23-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule23(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State20(new-cbs-50-20(cbs, val, start)))
end;
new-cbs-50-35 = funct(cbs, val, start) {
  23-1: funct(p1, p2, p3, p4, p5, end-) 50-23-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
} end;
50-13-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule13(p1, p2, p3, p4, span);
  case Thunk(case State20(new-cbs-50-20(cbs, val, start)))
end;
50-24-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule24(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State20(new-cbs-50-20(cbs, val, start)))
end;
50-25-0 = funct(cbs, p1, p2, p3, p4, p5, p6, p7, p8, start, end-)
  span = start.merge(end-);
  val = rule25(p1, p2, p3, p4, p5, p6, p7, p8, span);
  case Thunk(case State20(new-cbs-50-20(cbs, val, start)))
end;
new-cbs-50-29 = funct(cbs, val, start) {
  25-1: funct(p1, p2, p3, p4, p5, p6, p7, end-) 50-25-0(cbs, val, p1, p2, p3, p4, p5, p6, p7, start, end-) end,
  24-1: funct(p1, p2, p3, p4, p5, end-) 50-24-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
  13-1: funct(p1, p2, p3, end-) 50-13-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
50-26-0 = funct(cbs, p1, p2, p3, p4, p5, p6, p7, p8, start, end-)
  span = start.merge(end-);
  val = rule26(p1, p2, p3, p4, p5, p6, p7, p8, span);
  case Thunk(case State20(new-cbs-50-20(cbs, val, start)))
end;
new-cbs-50-21 = funct(cbs, val, start) {
  26-1: funct(p1, p2, p3, p4, p5, p6, p7, end-) 50-26-0(cbs, val, p1, p2, p3, p4, p5, p6, p7, start, end-) end,
} end;
state50 = funct(cbs)
  tok = get-token();
  debug = "state50:
restexpr := spread_opt % expr
expr := % expr ; exprns
expr := % exprns
exprns := % FUNCT unsafe_opt thisp_opt ( param_list ) expr END
exprns := % DO FOR letpat IN expr THEN expr END
exprns := % DO WHILE expr THEN expr END
exprns := % IF expr THEN expr elseb_opt END
exprns := % JS
exprns := % [ restexpr_list ]
exprns := % CASE id objlit
exprns := % objlit
objlit := % { keyval_list }
objlit := % ( expr_list )
exprns := % exprns ( expr_list )
exprns := % exprns field_sub
exprns := % exprns . phantom_id = exprns
exprns := % LET varpat FUTURE = exprns
exprns := % letpat = poly_opt exprns
letpat := % LET pattern
letpat := % varpat
varpat := % id
id := % END
id := % FOR
id := % WHILE
id := % ID
exprns := % DO UNSAFE expr END
exprns := % ! exprns
exprns := % exprns BINOP exprns
exprns := % string
string := % STRING
exprns := % id";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "FUNCT" then
    tokens.pop();
    state21(new-cbs-50-21(cbs, tok, tok.span))
  else if tok.type == "DO" then
    tokens.pop();
    state29(new-cbs-50-29(cbs, tok, tok.span))
  else if tok.type == "IF" then
    tokens.pop();
    state35(new-cbs-50-35(cbs, tok, tok.span))
  else if tok.type == "JS" then
    tokens.pop();
    state43(new-cbs-50-43(cbs, tok, tok.span))
  else if tok.type == "[" then
    tokens.pop();
    state44(new-cbs-50-44(cbs, tok, tok.span))
  else if tok.type == "CASE" then
    tokens.pop();
    state52(new-cbs-50-52(cbs, tok, tok.span))
  else if tok.type == "{" then
    tokens.pop();
    state55(new-cbs-50-55(cbs, tok, tok.span))
  else if tok.type == "(" then
    tokens.pop();
    state71(new-cbs-50-71(cbs, tok, tok.span))
  else if tok.type == "LET" then
    tokens.pop();
    state74(new-cbs-50-74(cbs, tok, tok.span))
  else if tok.type == "END" then
    tokens.pop();
    state62(new-cbs-50-62(cbs, tok, tok.span))
  else if tok.type == "FOR" then
    tokens.pop();
    state63(new-cbs-50-63(cbs, tok, tok.span))
  else if tok.type == "WHILE" then
    tokens.pop();
    state64(new-cbs-50-64(cbs, tok, tok.span))
  else if tok.type == "ID" then
    tokens.pop();
    state65(new-cbs-50-65(cbs, tok, tok.span))
  else if tok.type == "!" then
    tokens.pop();
    state109(new-cbs-50-109(cbs, tok, tok.span))
  else if tok.type == "STRING" then
    tokens.pop();
    state112(new-cbs-50-112(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end end end end end end end end end end end end end end end
end;
state49 = funct(cbs)
  tok = get-token();
  debug = "state49:
restexpr_list := restexpr , restexpr_list %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.63-3(tok.span.start())
  end
end;
47-63-1 = funct(cbs, p2, p3, end-) cbs.63-1(p2, p3, end-) end;
new-cbs-47-48 = funct(cbs, val, start) {
  63-2: funct(p2, end-) 47-63-1(cbs, val, p2, end-) end,
} end;
48-63-2 = funct(cbs, p3, end-) cbs.63-2(p3, end-) end;
new-cbs-48-49 = funct(cbs, val, start) {
  63-3: funct(end-) 48-63-2(cbs, val, end-) end,
} end;
48-62-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule62(p1, span);
  case Thunk(case State49(new-cbs-48-49(cbs, val, start)))
end;
48-63-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule63(p1, p2, p3, span);
  case Thunk(case State49(new-cbs-48-49(cbs, val, start)))
end;
new-cbs-48-47 = funct(cbs, val, start) {
  63-1: funct(p1, p2, end-) 48-63-0(cbs, val, p1, p2, start, end-) end,
  62-1: funct(end-) 48-62-0(cbs, val, start, end-) end,
} end;
48-60-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule60(p1, p2, span);
  case Thunk(case State47(new-cbs-48-47(cbs, val, start)))
end;
new-cbs-48-50 = funct(cbs, val, start) {
  60-1: funct(p1, end-) 48-60-0(cbs, val, p1, start, end-) end,
} end;
48-58-0 = funct(cbs, start, end-)
  span = start.merge(end-);
  val = rule58(span);
  case Thunk(case State50(new-cbs-48-50(cbs, val, start)))
end;
48-61-0 = funct(cbs, start, end-)
  span = start.merge(end-);
  val = rule61(span);
  case Thunk(case State49(new-cbs-48-49(cbs, val, start)))
end;
48-59-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule59(p1, p2, p3, span);
  case Thunk(case State50(new-cbs-48-50(cbs, val, start)))
end;
new-cbs-48-115 = funct(cbs, val, start) {
  59-1: funct(p1, p2, end-) 48-59-0(cbs, val, p1, p2, start, end-) end,
} end;
state48 = funct(cbs)
  tok = get-token();
  debug = "state48:
restexpr_list := restexpr , % restexpr_list
restexpr_list := % restexpr , restexpr_list
restexpr := % spread_opt expr
spread_opt := % . . .
spread_opt := %
restexpr_list := % restexpr
restexpr_list := %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "." then
    tokens.pop();
    state115(new-cbs-48-115(cbs, tok, tok.span))
  else if tok.type == "]" then
    span = tok.span.start();
    48-61-0(cbs, span, span)
  else
    span = tok.span.start();
    48-58-0(cbs, span, span)
  end end end
end;
state47 = funct(cbs)
  tok = get-token();
  debug = "state47:
restexpr_list := restexpr % , restexpr_list
restexpr_list := restexpr %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "," then
    tokens.pop();
    state48(new-cbs-47-48(cbs, tok, tok.span))
  else
    cbs.62-1(tok.span.start())
  end end
end;
45-21-2 = funct(cbs, p3, end-) cbs.21-2(p3, end-) end;
new-cbs-45-46 = funct(cbs, val, start) {
  21-3: funct(end-) 45-21-2(cbs, val, end-) end,
} end;
state46 = funct(cbs)
  tok = get-token();
  debug = "state46:
exprns := [ restexpr_list ] %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.21-3(tok.span.start())
  end
end;
state45 = funct(cbs)
  tok = get-token();
  debug = "state45:
exprns := [ restexpr_list % ]";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "]" then
    tokens.pop();
    state46(new-cbs-45-46(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end
end;
42-1-1 = funct(cbs, p2, p3, end-) cbs.1-1(p2, p3, end-) end;
new-cbs-42-5 = funct(cbs, val, start) {
  1-2: funct(p2, end-) 42-1-1(cbs, val, p2, end-) end,
} end;
state42 = funct(cbs)
  tok = get-token();
  debug = "state42:
elseb_opt := ELSE expr %
expr := expr % ; exprns";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == ";" then
    tokens.pop();
    state5(new-cbs-42-5(cbs, tok, tok.span))
  else
    cbs.64-2(tok.span.start())
  end end
end;
39-23-5 = funct(cbs, p6, end-) cbs.23-5(p6, end-) end;
new-cbs-39-40 = funct(cbs, val, start) {
  23-6: funct(end-) 39-23-5(cbs, val, end-) end,
} end;
state40 = funct(cbs)
  tok = get-token();
  debug = "state40:
exprns := IF expr THEN expr elseb_opt END %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.23-6(tok.span.start())
  end
end;
state39 = funct(cbs)
  tok = get-token();
  debug = "state39:
exprns := IF expr THEN expr elseb_opt % END";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "END" then
    tokens.pop();
    state40(new-cbs-39-40(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end
end;
38-23-4 = funct(cbs, p5, p6, end-) cbs.23-4(p5, p6, end-) end;
new-cbs-38-39 = funct(cbs, val, start) {
  23-5: funct(p5, end-) 38-23-4(cbs, val, p5, end-) end,
} end;
rule65 = funct(span) null end;
38-65-0 = funct(cbs, start, end-)
  span = start.merge(end-);
  val = rule65(span);
  case Thunk(case State39(new-cbs-38-39(cbs, val, start)))
end;
38-1-1 = funct(cbs, p2, p3, end-) cbs.1-1(p2, p3, end-) end;
new-cbs-38-5 = funct(cbs, val, start) {
  1-2: funct(p2, end-) 38-1-1(cbs, val, p2, end-) end,
} end;
rule64 = funct(p1, p2, span) p2 end;
38-64-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule64(p1, p2, span);
  case Thunk(case State39(new-cbs-38-39(cbs, val, start)))
end;
new-cbs-38-41 = funct(cbs, val, start) {
  64-1: funct(p1, end-) 38-64-0(cbs, val, p1, start, end-) end,
} end;
41-64-1 = funct(cbs, p2, end-) cbs.64-1(p2, end-) end;
let new-cbs-41-42 future = (
  41-1-0 = funct(cbs, p1, p2, p3, start, end-)
    span = start.merge(end-);
    val = rule1(p1, p2, p3, span);
    case Thunk(case State42(new-cbs-41-42(cbs, val, start)))
  end;
  funct(cbs, val, start) {
    64-2: funct(end-) 41-64-1(cbs, val, end-) end,
    1-1: funct(p1, p2, end-) 41-1-0(cbs, val, p1, p2, start, end-) end,
  } end
).0;
41-0-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule0(p1, span);
  case Thunk(case State42(new-cbs-41-42(cbs, val, start)))
end;
let new-cbs-41-20 future = (
  41-11-0 = funct(cbs, p1, p2, p3, start, end-)
    span = start.merge(end-);
    val = rule11(p1, p2, p3, span);
    case Thunk(case State20(new-cbs-41-20(cbs, val, start)))
  end;
  41-16-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
    span = start.merge(end-);
    val = rule16(p1, p2, p3, p4, p5, span);
    case Thunk(case State20(new-cbs-41-20(cbs, val, start)))
  end;
  41-17-0 = funct(cbs, p1, p2, start, end-)
    span = start.merge(end-);
    val = rule17(p1, p2, span);
    case Thunk(case State20(new-cbs-41-20(cbs, val, start)))
  end;
  41-18-0 = funct(cbs, p1, p2, p3, p4, start, end-)
    span = start.merge(end-);
    val = rule18(p1, p2, p3, p4, span);
    case Thunk(case State20(new-cbs-41-20(cbs, val, start)))
  end;
  funct(cbs, val, start) {
    0-1: funct(end-) 41-0-0(cbs, val, start, end-) end,
    18-1: funct(p1, p2, p3, end-) 41-18-0(cbs, val, p1, p2, p3, start, end-) end,
    17-1: funct(p1, end-) 41-17-0(cbs, val, p1, start, end-) end,
    16-1: funct(p1, p2, p3, p4, end-) 41-16-0(cbs, val, p1, p2, p3, p4, start, end-) end,
    11-1: funct(p1, p2, end-) 41-11-0(cbs, val, p1, p2, start, end-) end,
  } end
).0;
41-10-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule10(p1, span);
  case Thunk(case State20(new-cbs-41-20(cbs, val, start)))
end;
new-cbs-41-111 = funct(cbs, val, start) {
  10-1: funct(end-) 41-10-0(cbs, val, start, end-) end,
} end;
41-27-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule27(p1, span);
  case Thunk(case State111(new-cbs-41-111(cbs, val, start)))
end;
new-cbs-41-112 = funct(cbs, val, start) {
  27-1: funct(end-) 41-27-0(cbs, val, start, end-) end,
} end;
41-12-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule12(p1, p2, span);
  case Thunk(case State20(new-cbs-41-20(cbs, val, start)))
end;
new-cbs-41-109 = funct(cbs, val, start) {
  12-1: funct(p1, end-) 41-12-0(cbs, val, p1, start, end-) end,
} end;
41-9-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule9(p1, span);
  case Thunk(case State20(new-cbs-41-20(cbs, val, start)))
end;
41-14-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule14(p1, p2, p3, p4, span);
  case Thunk(case State20(new-cbs-41-20(cbs, val, start)))
end;
new-cbs-41-103 = funct(cbs, val, start) {
  14-1: funct(p1, p2, p3, end-) 41-14-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
41-44-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule44(p1, span);
  case Thunk(case State103(new-cbs-41-103(cbs, val, start)))
end;
new-cbs-41-107 = funct(cbs, val, start) {
  44-1: funct(end-) 41-44-0(cbs, val, start, end-) end,
} end;
41-30-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule30(p1, span);
  case Thunk(case State107(new-cbs-41-107(cbs, val, start)))
end;
new-cbs-41-108 = funct(cbs, val, start) {
  30-1: funct(end-) 41-30-0(cbs, val, start, end-) end,
  9-1: funct(end-) 41-9-0(cbs, val, start, end-) end,
} end;
41-5-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule5(p1, span);
  case Thunk(case State108(new-cbs-41-108(cbs, val, start)))
end;
new-cbs-41-65 = funct(cbs, val, start) {
  5-1: funct(end-) 41-5-0(cbs, val, start, end-) end,
} end;
41-6-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule6(p1, span);
  case Thunk(case State108(new-cbs-41-108(cbs, val, start)))
end;
new-cbs-41-64 = funct(cbs, val, start) {
  6-1: funct(end-) 41-6-0(cbs, val, start, end-) end,
} end;
41-7-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule7(p1, span);
  case Thunk(case State108(new-cbs-41-108(cbs, val, start)))
end;
new-cbs-41-63 = funct(cbs, val, start) {
  7-1: funct(end-) 41-7-0(cbs, val, start, end-) end,
} end;
41-8-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule8(p1, span);
  case Thunk(case State108(new-cbs-41-108(cbs, val, start)))
end;
new-cbs-41-62 = funct(cbs, val, start) {
  8-1: funct(end-) 41-8-0(cbs, val, start, end-) end,
} end;
41-45-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule45(p1, p2, span);
  case Thunk(case State103(new-cbs-41-103(cbs, val, start)))
end;
41-15-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
  span = start.merge(end-);
  val = rule15(p1, p2, p3, p4, p5, span);
  case Thunk(case State20(new-cbs-41-20(cbs, val, start)))
end;
new-cbs-41-74 = funct(cbs, val, start) {
  15-1: funct(p1, p2, p3, p4, end-) 41-15-0(cbs, val, p1, p2, p3, p4, start, end-) end,
  45-1: funct(p1, end-) 41-45-0(cbs, val, p1, start, end-) end,
} end;
41-19-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule19(p1, span);
  case Thunk(case State20(new-cbs-41-20(cbs, val, start)))
end;
new-cbs-41-70 = funct(cbs, val, start) {
  19-1: funct(end-) 41-19-0(cbs, val, start, end-) end,
} end;
41-49-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule49(p1, p2, p3, span);
  case Thunk(case State70(new-cbs-41-70(cbs, val, start)))
end;
new-cbs-41-71 = funct(cbs, val, start) {
  49-1: funct(p1, p2, end-) 41-49-0(cbs, val, p1, p2, start, end-) end,
} end;
41-50-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule50(p1, p2, p3, span);
  case Thunk(case State70(new-cbs-41-70(cbs, val, start)))
end;
new-cbs-41-55 = funct(cbs, val, start) {
  50-1: funct(p1, p2, end-) 41-50-0(cbs, val, p1, p2, start, end-) end,
} end;
41-20-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule20(p1, p2, p3, span);
  case Thunk(case State20(new-cbs-41-20(cbs, val, start)))
end;
new-cbs-41-52 = funct(cbs, val, start) {
  20-1: funct(p1, p2, end-) 41-20-0(cbs, val, p1, p2, start, end-) end,
} end;
41-21-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule21(p1, p2, p3, span);
  case Thunk(case State20(new-cbs-41-20(cbs, val, start)))
end;
new-cbs-41-44 = funct(cbs, val, start) {
  21-1: funct(p1, p2, end-) 41-21-0(cbs, val, p1, p2, start, end-) end,
} end;
41-22-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule22(p1, span);
  case Thunk(case State20(new-cbs-41-20(cbs, val, start)))
end;
new-cbs-41-43 = funct(cbs, val, start) {
  22-1: funct(end-) 41-22-0(cbs, val, start, end-) end,
} end;
41-23-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule23(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State20(new-cbs-41-20(cbs, val, start)))
end;
new-cbs-41-35 = funct(cbs, val, start) {
  23-1: funct(p1, p2, p3, p4, p5, end-) 41-23-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
} end;
41-13-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule13(p1, p2, p3, p4, span);
  case Thunk(case State20(new-cbs-41-20(cbs, val, start)))
end;
41-24-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule24(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State20(new-cbs-41-20(cbs, val, start)))
end;
41-25-0 = funct(cbs, p1, p2, p3, p4, p5, p6, p7, p8, start, end-)
  span = start.merge(end-);
  val = rule25(p1, p2, p3, p4, p5, p6, p7, p8, span);
  case Thunk(case State20(new-cbs-41-20(cbs, val, start)))
end;
new-cbs-41-29 = funct(cbs, val, start) {
  25-1: funct(p1, p2, p3, p4, p5, p6, p7, end-) 41-25-0(cbs, val, p1, p2, p3, p4, p5, p6, p7, start, end-) end,
  24-1: funct(p1, p2, p3, p4, p5, end-) 41-24-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
  13-1: funct(p1, p2, p3, end-) 41-13-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
41-26-0 = funct(cbs, p1, p2, p3, p4, p5, p6, p7, p8, start, end-)
  span = start.merge(end-);
  val = rule26(p1, p2, p3, p4, p5, p6, p7, p8, span);
  case Thunk(case State20(new-cbs-41-20(cbs, val, start)))
end;
new-cbs-41-21 = funct(cbs, val, start) {
  26-1: funct(p1, p2, p3, p4, p5, p6, p7, end-) 41-26-0(cbs, val, p1, p2, p3, p4, p5, p6, p7, start, end-) end,
} end;
state41 = funct(cbs)
  tok = get-token();
  debug = "state41:
elseb_opt := ELSE % expr
expr := % expr ; exprns
expr := % exprns
exprns := % FUNCT unsafe_opt thisp_opt ( param_list ) expr END
exprns := % DO FOR letpat IN expr THEN expr END
exprns := % DO WHILE expr THEN expr END
exprns := % IF expr THEN expr elseb_opt END
exprns := % JS
exprns := % [ restexpr_list ]
exprns := % CASE id objlit
exprns := % objlit
objlit := % { keyval_list }
objlit := % ( expr_list )
exprns := % exprns ( expr_list )
exprns := % exprns field_sub
exprns := % exprns . phantom_id = exprns
exprns := % LET varpat FUTURE = exprns
exprns := % letpat = poly_opt exprns
letpat := % LET pattern
letpat := % varpat
varpat := % id
id := % END
id := % FOR
id := % WHILE
id := % ID
exprns := % DO UNSAFE expr END
exprns := % ! exprns
exprns := % exprns BINOP exprns
exprns := % string
string := % STRING
exprns := % id";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "FUNCT" then
    tokens.pop();
    state21(new-cbs-41-21(cbs, tok, tok.span))
  else if tok.type == "DO" then
    tokens.pop();
    state29(new-cbs-41-29(cbs, tok, tok.span))
  else if tok.type == "IF" then
    tokens.pop();
    state35(new-cbs-41-35(cbs, tok, tok.span))
  else if tok.type == "JS" then
    tokens.pop();
    state43(new-cbs-41-43(cbs, tok, tok.span))
  else if tok.type == "[" then
    tokens.pop();
    state44(new-cbs-41-44(cbs, tok, tok.span))
  else if tok.type == "CASE" then
    tokens.pop();
    state52(new-cbs-41-52(cbs, tok, tok.span))
  else if tok.type == "{" then
    tokens.pop();
    state55(new-cbs-41-55(cbs, tok, tok.span))
  else if tok.type == "(" then
    tokens.pop();
    state71(new-cbs-41-71(cbs, tok, tok.span))
  else if tok.type == "LET" then
    tokens.pop();
    state74(new-cbs-41-74(cbs, tok, tok.span))
  else if tok.type == "END" then
    tokens.pop();
    state62(new-cbs-41-62(cbs, tok, tok.span))
  else if tok.type == "FOR" then
    tokens.pop();
    state63(new-cbs-41-63(cbs, tok, tok.span))
  else if tok.type == "WHILE" then
    tokens.pop();
    state64(new-cbs-41-64(cbs, tok, tok.span))
  else if tok.type == "ID" then
    tokens.pop();
    state65(new-cbs-41-65(cbs, tok, tok.span))
  else if tok.type == "!" then
    tokens.pop();
    state109(new-cbs-41-109(cbs, tok, tok.span))
  else if tok.type == "STRING" then
    tokens.pop();
    state112(new-cbs-41-112(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end end end end end end end end end end end end end end end
end;
state38 = funct(cbs)
  tok = get-token();
  debug = "state38:
exprns := IF expr THEN expr % elseb_opt END
elseb_opt := %
elseb_opt := % ELSE expr
expr := expr % ; exprns";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "ID" && (tok.val == "else").0 then
    tokens.pop();
    state41(new-cbs-38-41(cbs, tok, tok.span))
  else if tok.type == ";" then
    tokens.pop();
    state5(new-cbs-38-5(cbs, tok, tok.span))
  else
    span = tok.span.start();
    38-65-0(cbs, span, span)
  end end end
end;
36-1-1 = funct(cbs, p2, p3, end-) cbs.1-1(p2, p3, end-) end;
new-cbs-36-5 = funct(cbs, val, start) {
  1-2: funct(p2, end-) 36-1-1(cbs, val, p2, end-) end,
} end;
36-23-2 = funct(cbs, p3, p4, p5, p6, end-) cbs.23-2(p3, p4, p5, p6, end-) end;
new-cbs-36-37 = funct(cbs, val, start) {
  23-3: funct(p3, p4, p5, end-) 36-23-2(cbs, val, p3, p4, p5, end-) end,
} end;
37-23-3 = funct(cbs, p4, p5, p6, end-) cbs.23-3(p4, p5, p6, end-) end;
let new-cbs-37-38 future = (
  37-1-0 = funct(cbs, p1, p2, p3, start, end-)
    span = start.merge(end-);
    val = rule1(p1, p2, p3, span);
    case Thunk(case State38(new-cbs-37-38(cbs, val, start)))
  end;
  funct(cbs, val, start) {
    23-4: funct(p4, p5, end-) 37-23-3(cbs, val, p4, p5, end-) end,
    1-1: funct(p1, p2, end-) 37-1-0(cbs, val, p1, p2, start, end-) end,
  } end
).0;
37-0-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule0(p1, span);
  case Thunk(case State38(new-cbs-37-38(cbs, val, start)))
end;
let new-cbs-37-20 future = (
  37-11-0 = funct(cbs, p1, p2, p3, start, end-)
    span = start.merge(end-);
    val = rule11(p1, p2, p3, span);
    case Thunk(case State20(new-cbs-37-20(cbs, val, start)))
  end;
  37-16-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
    span = start.merge(end-);
    val = rule16(p1, p2, p3, p4, p5, span);
    case Thunk(case State20(new-cbs-37-20(cbs, val, start)))
  end;
  37-17-0 = funct(cbs, p1, p2, start, end-)
    span = start.merge(end-);
    val = rule17(p1, p2, span);
    case Thunk(case State20(new-cbs-37-20(cbs, val, start)))
  end;
  37-18-0 = funct(cbs, p1, p2, p3, p4, start, end-)
    span = start.merge(end-);
    val = rule18(p1, p2, p3, p4, span);
    case Thunk(case State20(new-cbs-37-20(cbs, val, start)))
  end;
  funct(cbs, val, start) {
    0-1: funct(end-) 37-0-0(cbs, val, start, end-) end,
    18-1: funct(p1, p2, p3, end-) 37-18-0(cbs, val, p1, p2, p3, start, end-) end,
    17-1: funct(p1, end-) 37-17-0(cbs, val, p1, start, end-) end,
    16-1: funct(p1, p2, p3, p4, end-) 37-16-0(cbs, val, p1, p2, p3, p4, start, end-) end,
    11-1: funct(p1, p2, end-) 37-11-0(cbs, val, p1, p2, start, end-) end,
  } end
).0;
37-10-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule10(p1, span);
  case Thunk(case State20(new-cbs-37-20(cbs, val, start)))
end;
new-cbs-37-111 = funct(cbs, val, start) {
  10-1: funct(end-) 37-10-0(cbs, val, start, end-) end,
} end;
37-27-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule27(p1, span);
  case Thunk(case State111(new-cbs-37-111(cbs, val, start)))
end;
new-cbs-37-112 = funct(cbs, val, start) {
  27-1: funct(end-) 37-27-0(cbs, val, start, end-) end,
} end;
37-12-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule12(p1, p2, span);
  case Thunk(case State20(new-cbs-37-20(cbs, val, start)))
end;
new-cbs-37-109 = funct(cbs, val, start) {
  12-1: funct(p1, end-) 37-12-0(cbs, val, p1, start, end-) end,
} end;
37-9-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule9(p1, span);
  case Thunk(case State20(new-cbs-37-20(cbs, val, start)))
end;
37-14-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule14(p1, p2, p3, p4, span);
  case Thunk(case State20(new-cbs-37-20(cbs, val, start)))
end;
new-cbs-37-103 = funct(cbs, val, start) {
  14-1: funct(p1, p2, p3, end-) 37-14-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
37-44-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule44(p1, span);
  case Thunk(case State103(new-cbs-37-103(cbs, val, start)))
end;
new-cbs-37-107 = funct(cbs, val, start) {
  44-1: funct(end-) 37-44-0(cbs, val, start, end-) end,
} end;
37-30-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule30(p1, span);
  case Thunk(case State107(new-cbs-37-107(cbs, val, start)))
end;
new-cbs-37-108 = funct(cbs, val, start) {
  30-1: funct(end-) 37-30-0(cbs, val, start, end-) end,
  9-1: funct(end-) 37-9-0(cbs, val, start, end-) end,
} end;
37-5-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule5(p1, span);
  case Thunk(case State108(new-cbs-37-108(cbs, val, start)))
end;
new-cbs-37-65 = funct(cbs, val, start) {
  5-1: funct(end-) 37-5-0(cbs, val, start, end-) end,
} end;
37-6-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule6(p1, span);
  case Thunk(case State108(new-cbs-37-108(cbs, val, start)))
end;
new-cbs-37-64 = funct(cbs, val, start) {
  6-1: funct(end-) 37-6-0(cbs, val, start, end-) end,
} end;
37-7-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule7(p1, span);
  case Thunk(case State108(new-cbs-37-108(cbs, val, start)))
end;
new-cbs-37-63 = funct(cbs, val, start) {
  7-1: funct(end-) 37-7-0(cbs, val, start, end-) end,
} end;
37-8-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule8(p1, span);
  case Thunk(case State108(new-cbs-37-108(cbs, val, start)))
end;
new-cbs-37-62 = funct(cbs, val, start) {
  8-1: funct(end-) 37-8-0(cbs, val, start, end-) end,
} end;
37-45-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule45(p1, p2, span);
  case Thunk(case State103(new-cbs-37-103(cbs, val, start)))
end;
37-15-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
  span = start.merge(end-);
  val = rule15(p1, p2, p3, p4, p5, span);
  case Thunk(case State20(new-cbs-37-20(cbs, val, start)))
end;
new-cbs-37-74 = funct(cbs, val, start) {
  15-1: funct(p1, p2, p3, p4, end-) 37-15-0(cbs, val, p1, p2, p3, p4, start, end-) end,
  45-1: funct(p1, end-) 37-45-0(cbs, val, p1, start, end-) end,
} end;
37-19-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule19(p1, span);
  case Thunk(case State20(new-cbs-37-20(cbs, val, start)))
end;
new-cbs-37-70 = funct(cbs, val, start) {
  19-1: funct(end-) 37-19-0(cbs, val, start, end-) end,
} end;
37-49-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule49(p1, p2, p3, span);
  case Thunk(case State70(new-cbs-37-70(cbs, val, start)))
end;
new-cbs-37-71 = funct(cbs, val, start) {
  49-1: funct(p1, p2, end-) 37-49-0(cbs, val, p1, p2, start, end-) end,
} end;
37-50-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule50(p1, p2, p3, span);
  case Thunk(case State70(new-cbs-37-70(cbs, val, start)))
end;
new-cbs-37-55 = funct(cbs, val, start) {
  50-1: funct(p1, p2, end-) 37-50-0(cbs, val, p1, p2, start, end-) end,
} end;
37-20-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule20(p1, p2, p3, span);
  case Thunk(case State20(new-cbs-37-20(cbs, val, start)))
end;
new-cbs-37-52 = funct(cbs, val, start) {
  20-1: funct(p1, p2, end-) 37-20-0(cbs, val, p1, p2, start, end-) end,
} end;
37-21-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule21(p1, p2, p3, span);
  case Thunk(case State20(new-cbs-37-20(cbs, val, start)))
end;
new-cbs-37-44 = funct(cbs, val, start) {
  21-1: funct(p1, p2, end-) 37-21-0(cbs, val, p1, p2, start, end-) end,
} end;
37-22-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule22(p1, span);
  case Thunk(case State20(new-cbs-37-20(cbs, val, start)))
end;
new-cbs-37-43 = funct(cbs, val, start) {
  22-1: funct(end-) 37-22-0(cbs, val, start, end-) end,
} end;
37-23-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule23(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State20(new-cbs-37-20(cbs, val, start)))
end;
new-cbs-37-35 = funct(cbs, val, start) {
  23-1: funct(p1, p2, p3, p4, p5, end-) 37-23-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
} end;
37-13-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule13(p1, p2, p3, p4, span);
  case Thunk(case State20(new-cbs-37-20(cbs, val, start)))
end;
37-24-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule24(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State20(new-cbs-37-20(cbs, val, start)))
end;
37-25-0 = funct(cbs, p1, p2, p3, p4, p5, p6, p7, p8, start, end-)
  span = start.merge(end-);
  val = rule25(p1, p2, p3, p4, p5, p6, p7, p8, span);
  case Thunk(case State20(new-cbs-37-20(cbs, val, start)))
end;
new-cbs-37-29 = funct(cbs, val, start) {
  25-1: funct(p1, p2, p3, p4, p5, p6, p7, end-) 37-25-0(cbs, val, p1, p2, p3, p4, p5, p6, p7, start, end-) end,
  24-1: funct(p1, p2, p3, p4, p5, end-) 37-24-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
  13-1: funct(p1, p2, p3, end-) 37-13-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
37-26-0 = funct(cbs, p1, p2, p3, p4, p5, p6, p7, p8, start, end-)
  span = start.merge(end-);
  val = rule26(p1, p2, p3, p4, p5, p6, p7, p8, span);
  case Thunk(case State20(new-cbs-37-20(cbs, val, start)))
end;
new-cbs-37-21 = funct(cbs, val, start) {
  26-1: funct(p1, p2, p3, p4, p5, p6, p7, end-) 37-26-0(cbs, val, p1, p2, p3, p4, p5, p6, p7, start, end-) end,
} end;
state37 = funct(cbs)
  tok = get-token();
  debug = "state37:
exprns := IF expr THEN % expr elseb_opt END
expr := % expr ; exprns
expr := % exprns
exprns := % FUNCT unsafe_opt thisp_opt ( param_list ) expr END
exprns := % DO FOR letpat IN expr THEN expr END
exprns := % DO WHILE expr THEN expr END
exprns := % IF expr THEN expr elseb_opt END
exprns := % JS
exprns := % [ restexpr_list ]
exprns := % CASE id objlit
exprns := % objlit
objlit := % { keyval_list }
objlit := % ( expr_list )
exprns := % exprns ( expr_list )
exprns := % exprns field_sub
exprns := % exprns . phantom_id = exprns
exprns := % LET varpat FUTURE = exprns
exprns := % letpat = poly_opt exprns
letpat := % LET pattern
letpat := % varpat
varpat := % id
id := % END
id := % FOR
id := % WHILE
id := % ID
exprns := % DO UNSAFE expr END
exprns := % ! exprns
exprns := % exprns BINOP exprns
exprns := % string
string := % STRING
exprns := % id";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "FUNCT" then
    tokens.pop();
    state21(new-cbs-37-21(cbs, tok, tok.span))
  else if tok.type == "DO" then
    tokens.pop();
    state29(new-cbs-37-29(cbs, tok, tok.span))
  else if tok.type == "IF" then
    tokens.pop();
    state35(new-cbs-37-35(cbs, tok, tok.span))
  else if tok.type == "JS" then
    tokens.pop();
    state43(new-cbs-37-43(cbs, tok, tok.span))
  else if tok.type == "[" then
    tokens.pop();
    state44(new-cbs-37-44(cbs, tok, tok.span))
  else if tok.type == "CASE" then
    tokens.pop();
    state52(new-cbs-37-52(cbs, tok, tok.span))
  else if tok.type == "{" then
    tokens.pop();
    state55(new-cbs-37-55(cbs, tok, tok.span))
  else if tok.type == "(" then
    tokens.pop();
    state71(new-cbs-37-71(cbs, tok, tok.span))
  else if tok.type == "LET" then
    tokens.pop();
    state74(new-cbs-37-74(cbs, tok, tok.span))
  else if tok.type == "END" then
    tokens.pop();
    state62(new-cbs-37-62(cbs, tok, tok.span))
  else if tok.type == "FOR" then
    tokens.pop();
    state63(new-cbs-37-63(cbs, tok, tok.span))
  else if tok.type == "WHILE" then
    tokens.pop();
    state64(new-cbs-37-64(cbs, tok, tok.span))
  else if tok.type == "ID" then
    tokens.pop();
    state65(new-cbs-37-65(cbs, tok, tok.span))
  else if tok.type == "!" then
    tokens.pop();
    state109(new-cbs-37-109(cbs, tok, tok.span))
  else if tok.type == "STRING" then
    tokens.pop();
    state112(new-cbs-37-112(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end end end end end end end end end end end end end end end
end;
state36 = funct(cbs)
  tok = get-token();
  debug = "state36:
exprns := IF expr % THEN expr elseb_opt END
expr := expr % ; exprns";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "ID" && (tok.val == "then").0 then
    tokens.pop();
    state37(new-cbs-36-37(cbs, tok, tok.span))
  else if tok.type == ";" then
    tokens.pop();
    state5(new-cbs-36-5(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end end
end;
33-1-1 = funct(cbs, p2, p3, end-) cbs.1-1(p2, p3, end-) end;
new-cbs-33-5 = funct(cbs, val, start) {
  1-2: funct(p2, end-) 33-1-1(cbs, val, p2, end-) end,
} end;
33-24-5 = funct(cbs, p6, end-) cbs.24-5(p6, end-) end;
new-cbs-33-34 = funct(cbs, val, start) {
  24-6: funct(end-) 33-24-5(cbs, val, end-) end,
} end;
state34 = funct(cbs)
  tok = get-token();
  debug = "state34:
exprns := DO WHILE expr THEN expr END %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.24-6(tok.span.start())
  end
end;
state33 = funct(cbs)
  tok = get-token();
  debug = "state33:
exprns := DO WHILE expr THEN expr % END
expr := expr % ; exprns";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "END" then
    tokens.pop();
    state34(new-cbs-33-34(cbs, tok, tok.span))
  else if tok.type == ";" then
    tokens.pop();
    state5(new-cbs-33-5(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end end
end;
31-1-1 = funct(cbs, p2, p3, end-) cbs.1-1(p2, p3, end-) end;
new-cbs-31-5 = funct(cbs, val, start) {
  1-2: funct(p2, end-) 31-1-1(cbs, val, p2, end-) end,
} end;
31-24-3 = funct(cbs, p4, p5, p6, end-) cbs.24-3(p4, p5, p6, end-) end;
new-cbs-31-32 = funct(cbs, val, start) {
  24-4: funct(p4, p5, end-) 31-24-3(cbs, val, p4, p5, end-) end,
} end;
32-24-4 = funct(cbs, p5, p6, end-) cbs.24-4(p5, p6, end-) end;
let new-cbs-32-33 future = (
  32-1-0 = funct(cbs, p1, p2, p3, start, end-)
    span = start.merge(end-);
    val = rule1(p1, p2, p3, span);
    case Thunk(case State33(new-cbs-32-33(cbs, val, start)))
  end;
  funct(cbs, val, start) {
    24-5: funct(p5, end-) 32-24-4(cbs, val, p5, end-) end,
    1-1: funct(p1, p2, end-) 32-1-0(cbs, val, p1, p2, start, end-) end,
  } end
).0;
32-0-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule0(p1, span);
  case Thunk(case State33(new-cbs-32-33(cbs, val, start)))
end;
let new-cbs-32-20 future = (
  32-11-0 = funct(cbs, p1, p2, p3, start, end-)
    span = start.merge(end-);
    val = rule11(p1, p2, p3, span);
    case Thunk(case State20(new-cbs-32-20(cbs, val, start)))
  end;
  32-16-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
    span = start.merge(end-);
    val = rule16(p1, p2, p3, p4, p5, span);
    case Thunk(case State20(new-cbs-32-20(cbs, val, start)))
  end;
  32-17-0 = funct(cbs, p1, p2, start, end-)
    span = start.merge(end-);
    val = rule17(p1, p2, span);
    case Thunk(case State20(new-cbs-32-20(cbs, val, start)))
  end;
  32-18-0 = funct(cbs, p1, p2, p3, p4, start, end-)
    span = start.merge(end-);
    val = rule18(p1, p2, p3, p4, span);
    case Thunk(case State20(new-cbs-32-20(cbs, val, start)))
  end;
  funct(cbs, val, start) {
    0-1: funct(end-) 32-0-0(cbs, val, start, end-) end,
    18-1: funct(p1, p2, p3, end-) 32-18-0(cbs, val, p1, p2, p3, start, end-) end,
    17-1: funct(p1, end-) 32-17-0(cbs, val, p1, start, end-) end,
    16-1: funct(p1, p2, p3, p4, end-) 32-16-0(cbs, val, p1, p2, p3, p4, start, end-) end,
    11-1: funct(p1, p2, end-) 32-11-0(cbs, val, p1, p2, start, end-) end,
  } end
).0;
32-10-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule10(p1, span);
  case Thunk(case State20(new-cbs-32-20(cbs, val, start)))
end;
new-cbs-32-111 = funct(cbs, val, start) {
  10-1: funct(end-) 32-10-0(cbs, val, start, end-) end,
} end;
32-27-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule27(p1, span);
  case Thunk(case State111(new-cbs-32-111(cbs, val, start)))
end;
new-cbs-32-112 = funct(cbs, val, start) {
  27-1: funct(end-) 32-27-0(cbs, val, start, end-) end,
} end;
32-12-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule12(p1, p2, span);
  case Thunk(case State20(new-cbs-32-20(cbs, val, start)))
end;
new-cbs-32-109 = funct(cbs, val, start) {
  12-1: funct(p1, end-) 32-12-0(cbs, val, p1, start, end-) end,
} end;
32-9-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule9(p1, span);
  case Thunk(case State20(new-cbs-32-20(cbs, val, start)))
end;
32-14-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule14(p1, p2, p3, p4, span);
  case Thunk(case State20(new-cbs-32-20(cbs, val, start)))
end;
new-cbs-32-103 = funct(cbs, val, start) {
  14-1: funct(p1, p2, p3, end-) 32-14-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
32-44-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule44(p1, span);
  case Thunk(case State103(new-cbs-32-103(cbs, val, start)))
end;
new-cbs-32-107 = funct(cbs, val, start) {
  44-1: funct(end-) 32-44-0(cbs, val, start, end-) end,
} end;
32-30-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule30(p1, span);
  case Thunk(case State107(new-cbs-32-107(cbs, val, start)))
end;
new-cbs-32-108 = funct(cbs, val, start) {
  30-1: funct(end-) 32-30-0(cbs, val, start, end-) end,
  9-1: funct(end-) 32-9-0(cbs, val, start, end-) end,
} end;
32-5-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule5(p1, span);
  case Thunk(case State108(new-cbs-32-108(cbs, val, start)))
end;
new-cbs-32-65 = funct(cbs, val, start) {
  5-1: funct(end-) 32-5-0(cbs, val, start, end-) end,
} end;
32-6-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule6(p1, span);
  case Thunk(case State108(new-cbs-32-108(cbs, val, start)))
end;
new-cbs-32-64 = funct(cbs, val, start) {
  6-1: funct(end-) 32-6-0(cbs, val, start, end-) end,
} end;
32-7-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule7(p1, span);
  case Thunk(case State108(new-cbs-32-108(cbs, val, start)))
end;
new-cbs-32-63 = funct(cbs, val, start) {
  7-1: funct(end-) 32-7-0(cbs, val, start, end-) end,
} end;
32-8-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule8(p1, span);
  case Thunk(case State108(new-cbs-32-108(cbs, val, start)))
end;
new-cbs-32-62 = funct(cbs, val, start) {
  8-1: funct(end-) 32-8-0(cbs, val, start, end-) end,
} end;
32-45-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule45(p1, p2, span);
  case Thunk(case State103(new-cbs-32-103(cbs, val, start)))
end;
32-15-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
  span = start.merge(end-);
  val = rule15(p1, p2, p3, p4, p5, span);
  case Thunk(case State20(new-cbs-32-20(cbs, val, start)))
end;
new-cbs-32-74 = funct(cbs, val, start) {
  15-1: funct(p1, p2, p3, p4, end-) 32-15-0(cbs, val, p1, p2, p3, p4, start, end-) end,
  45-1: funct(p1, end-) 32-45-0(cbs, val, p1, start, end-) end,
} end;
32-19-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule19(p1, span);
  case Thunk(case State20(new-cbs-32-20(cbs, val, start)))
end;
new-cbs-32-70 = funct(cbs, val, start) {
  19-1: funct(end-) 32-19-0(cbs, val, start, end-) end,
} end;
32-49-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule49(p1, p2, p3, span);
  case Thunk(case State70(new-cbs-32-70(cbs, val, start)))
end;
new-cbs-32-71 = funct(cbs, val, start) {
  49-1: funct(p1, p2, end-) 32-49-0(cbs, val, p1, p2, start, end-) end,
} end;
32-50-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule50(p1, p2, p3, span);
  case Thunk(case State70(new-cbs-32-70(cbs, val, start)))
end;
new-cbs-32-55 = funct(cbs, val, start) {
  50-1: funct(p1, p2, end-) 32-50-0(cbs, val, p1, p2, start, end-) end,
} end;
32-20-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule20(p1, p2, p3, span);
  case Thunk(case State20(new-cbs-32-20(cbs, val, start)))
end;
new-cbs-32-52 = funct(cbs, val, start) {
  20-1: funct(p1, p2, end-) 32-20-0(cbs, val, p1, p2, start, end-) end,
} end;
32-21-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule21(p1, p2, p3, span);
  case Thunk(case State20(new-cbs-32-20(cbs, val, start)))
end;
new-cbs-32-44 = funct(cbs, val, start) {
  21-1: funct(p1, p2, end-) 32-21-0(cbs, val, p1, p2, start, end-) end,
} end;
32-22-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule22(p1, span);
  case Thunk(case State20(new-cbs-32-20(cbs, val, start)))
end;
new-cbs-32-43 = funct(cbs, val, start) {
  22-1: funct(end-) 32-22-0(cbs, val, start, end-) end,
} end;
32-23-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule23(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State20(new-cbs-32-20(cbs, val, start)))
end;
new-cbs-32-35 = funct(cbs, val, start) {
  23-1: funct(p1, p2, p3, p4, p5, end-) 32-23-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
} end;
32-13-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule13(p1, p2, p3, p4, span);
  case Thunk(case State20(new-cbs-32-20(cbs, val, start)))
end;
32-24-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule24(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State20(new-cbs-32-20(cbs, val, start)))
end;
32-25-0 = funct(cbs, p1, p2, p3, p4, p5, p6, p7, p8, start, end-)
  span = start.merge(end-);
  val = rule25(p1, p2, p3, p4, p5, p6, p7, p8, span);
  case Thunk(case State20(new-cbs-32-20(cbs, val, start)))
end;
new-cbs-32-29 = funct(cbs, val, start) {
  25-1: funct(p1, p2, p3, p4, p5, p6, p7, end-) 32-25-0(cbs, val, p1, p2, p3, p4, p5, p6, p7, start, end-) end,
  24-1: funct(p1, p2, p3, p4, p5, end-) 32-24-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
  13-1: funct(p1, p2, p3, end-) 32-13-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
32-26-0 = funct(cbs, p1, p2, p3, p4, p5, p6, p7, p8, start, end-)
  span = start.merge(end-);
  val = rule26(p1, p2, p3, p4, p5, p6, p7, p8, span);
  case Thunk(case State20(new-cbs-32-20(cbs, val, start)))
end;
new-cbs-32-21 = funct(cbs, val, start) {
  26-1: funct(p1, p2, p3, p4, p5, p6, p7, end-) 32-26-0(cbs, val, p1, p2, p3, p4, p5, p6, p7, start, end-) end,
} end;
state32 = funct(cbs)
  tok = get-token();
  debug = "state32:
exprns := DO WHILE expr THEN % expr END
expr := % expr ; exprns
expr := % exprns
exprns := % FUNCT unsafe_opt thisp_opt ( param_list ) expr END
exprns := % DO FOR letpat IN expr THEN expr END
exprns := % DO WHILE expr THEN expr END
exprns := % IF expr THEN expr elseb_opt END
exprns := % JS
exprns := % [ restexpr_list ]
exprns := % CASE id objlit
exprns := % objlit
objlit := % { keyval_list }
objlit := % ( expr_list )
exprns := % exprns ( expr_list )
exprns := % exprns field_sub
exprns := % exprns . phantom_id = exprns
exprns := % LET varpat FUTURE = exprns
exprns := % letpat = poly_opt exprns
letpat := % LET pattern
letpat := % varpat
varpat := % id
id := % END
id := % FOR
id := % WHILE
id := % ID
exprns := % DO UNSAFE expr END
exprns := % ! exprns
exprns := % exprns BINOP exprns
exprns := % string
string := % STRING
exprns := % id";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "FUNCT" then
    tokens.pop();
    state21(new-cbs-32-21(cbs, tok, tok.span))
  else if tok.type == "DO" then
    tokens.pop();
    state29(new-cbs-32-29(cbs, tok, tok.span))
  else if tok.type == "IF" then
    tokens.pop();
    state35(new-cbs-32-35(cbs, tok, tok.span))
  else if tok.type == "JS" then
    tokens.pop();
    state43(new-cbs-32-43(cbs, tok, tok.span))
  else if tok.type == "[" then
    tokens.pop();
    state44(new-cbs-32-44(cbs, tok, tok.span))
  else if tok.type == "CASE" then
    tokens.pop();
    state52(new-cbs-32-52(cbs, tok, tok.span))
  else if tok.type == "{" then
    tokens.pop();
    state55(new-cbs-32-55(cbs, tok, tok.span))
  else if tok.type == "(" then
    tokens.pop();
    state71(new-cbs-32-71(cbs, tok, tok.span))
  else if tok.type == "LET" then
    tokens.pop();
    state74(new-cbs-32-74(cbs, tok, tok.span))
  else if tok.type == "END" then
    tokens.pop();
    state62(new-cbs-32-62(cbs, tok, tok.span))
  else if tok.type == "FOR" then
    tokens.pop();
    state63(new-cbs-32-63(cbs, tok, tok.span))
  else if tok.type == "WHILE" then
    tokens.pop();
    state64(new-cbs-32-64(cbs, tok, tok.span))
  else if tok.type == "ID" then
    tokens.pop();
    state65(new-cbs-32-65(cbs, tok, tok.span))
  else if tok.type == "!" then
    tokens.pop();
    state109(new-cbs-32-109(cbs, tok, tok.span))
  else if tok.type == "STRING" then
    tokens.pop();
    state112(new-cbs-32-112(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end end end end end end end end end end end end end end end
end;
state31 = funct(cbs)
  tok = get-token();
  debug = "state31:
exprns := DO WHILE expr % THEN expr END
expr := expr % ; exprns";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "ID" && (tok.val == "then").0 then
    tokens.pop();
    state32(new-cbs-31-32(cbs, tok, tok.span))
  else if tok.type == ";" then
    tokens.pop();
    state5(new-cbs-31-5(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end end
end;
27-1-1 = funct(cbs, p2, p3, end-) cbs.1-1(p2, p3, end-) end;
new-cbs-27-5 = funct(cbs, val, start) {
  1-2: funct(p2, end-) 27-1-1(cbs, val, p2, end-) end,
} end;
27-26-7 = funct(cbs, p8, end-) cbs.26-7(p8, end-) end;
new-cbs-27-28 = funct(cbs, val, start) {
  26-8: funct(end-) 27-26-7(cbs, val, end-) end,
} end;
state28 = funct(cbs)
  tok = get-token();
  debug = "state28:
exprns := FUNCT unsafe_opt thisp_opt ( param_list ) expr END %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.26-8(tok.span.start())
  end
end;
state27 = funct(cbs)
  tok = get-token();
  debug = "state27:
exprns := FUNCT unsafe_opt thisp_opt ( param_list ) expr % END
expr := expr % ; exprns";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "END" then
    tokens.pop();
    state28(new-cbs-27-28(cbs, tok, tok.span))
  else if tok.type == ";" then
    tokens.pop();
    state5(new-cbs-27-5(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end end
end;
25-26-5 = funct(cbs, p6, p7, p8, end-) cbs.26-5(p6, p7, p8, end-) end;
new-cbs-25-26 = funct(cbs, val, start) {
  26-6: funct(p6, p7, end-) 25-26-5(cbs, val, p6, p7, end-) end,
} end;
26-26-6 = funct(cbs, p7, p8, end-) cbs.26-6(p7, p8, end-) end;
let new-cbs-26-27 future = (
  26-1-0 = funct(cbs, p1, p2, p3, start, end-)
    span = start.merge(end-);
    val = rule1(p1, p2, p3, span);
    case Thunk(case State27(new-cbs-26-27(cbs, val, start)))
  end;
  funct(cbs, val, start) {
    26-7: funct(p7, end-) 26-26-6(cbs, val, p7, end-) end,
    1-1: funct(p1, p2, end-) 26-1-0(cbs, val, p1, p2, start, end-) end,
  } end
).0;
26-0-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule0(p1, span);
  case Thunk(case State27(new-cbs-26-27(cbs, val, start)))
end;
let new-cbs-26-20 future = (
  26-11-0 = funct(cbs, p1, p2, p3, start, end-)
    span = start.merge(end-);
    val = rule11(p1, p2, p3, span);
    case Thunk(case State20(new-cbs-26-20(cbs, val, start)))
  end;
  26-16-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
    span = start.merge(end-);
    val = rule16(p1, p2, p3, p4, p5, span);
    case Thunk(case State20(new-cbs-26-20(cbs, val, start)))
  end;
  26-17-0 = funct(cbs, p1, p2, start, end-)
    span = start.merge(end-);
    val = rule17(p1, p2, span);
    case Thunk(case State20(new-cbs-26-20(cbs, val, start)))
  end;
  26-18-0 = funct(cbs, p1, p2, p3, p4, start, end-)
    span = start.merge(end-);
    val = rule18(p1, p2, p3, p4, span);
    case Thunk(case State20(new-cbs-26-20(cbs, val, start)))
  end;
  funct(cbs, val, start) {
    0-1: funct(end-) 26-0-0(cbs, val, start, end-) end,
    18-1: funct(p1, p2, p3, end-) 26-18-0(cbs, val, p1, p2, p3, start, end-) end,
    17-1: funct(p1, end-) 26-17-0(cbs, val, p1, start, end-) end,
    16-1: funct(p1, p2, p3, p4, end-) 26-16-0(cbs, val, p1, p2, p3, p4, start, end-) end,
    11-1: funct(p1, p2, end-) 26-11-0(cbs, val, p1, p2, start, end-) end,
  } end
).0;
26-10-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule10(p1, span);
  case Thunk(case State20(new-cbs-26-20(cbs, val, start)))
end;
new-cbs-26-111 = funct(cbs, val, start) {
  10-1: funct(end-) 26-10-0(cbs, val, start, end-) end,
} end;
26-27-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule27(p1, span);
  case Thunk(case State111(new-cbs-26-111(cbs, val, start)))
end;
new-cbs-26-112 = funct(cbs, val, start) {
  27-1: funct(end-) 26-27-0(cbs, val, start, end-) end,
} end;
26-12-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule12(p1, p2, span);
  case Thunk(case State20(new-cbs-26-20(cbs, val, start)))
end;
new-cbs-26-109 = funct(cbs, val, start) {
  12-1: funct(p1, end-) 26-12-0(cbs, val, p1, start, end-) end,
} end;
26-9-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule9(p1, span);
  case Thunk(case State20(new-cbs-26-20(cbs, val, start)))
end;
26-14-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule14(p1, p2, p3, p4, span);
  case Thunk(case State20(new-cbs-26-20(cbs, val, start)))
end;
new-cbs-26-103 = funct(cbs, val, start) {
  14-1: funct(p1, p2, p3, end-) 26-14-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
26-44-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule44(p1, span);
  case Thunk(case State103(new-cbs-26-103(cbs, val, start)))
end;
new-cbs-26-107 = funct(cbs, val, start) {
  44-1: funct(end-) 26-44-0(cbs, val, start, end-) end,
} end;
26-30-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule30(p1, span);
  case Thunk(case State107(new-cbs-26-107(cbs, val, start)))
end;
new-cbs-26-108 = funct(cbs, val, start) {
  30-1: funct(end-) 26-30-0(cbs, val, start, end-) end,
  9-1: funct(end-) 26-9-0(cbs, val, start, end-) end,
} end;
26-5-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule5(p1, span);
  case Thunk(case State108(new-cbs-26-108(cbs, val, start)))
end;
new-cbs-26-65 = funct(cbs, val, start) {
  5-1: funct(end-) 26-5-0(cbs, val, start, end-) end,
} end;
26-6-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule6(p1, span);
  case Thunk(case State108(new-cbs-26-108(cbs, val, start)))
end;
new-cbs-26-64 = funct(cbs, val, start) {
  6-1: funct(end-) 26-6-0(cbs, val, start, end-) end,
} end;
26-7-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule7(p1, span);
  case Thunk(case State108(new-cbs-26-108(cbs, val, start)))
end;
new-cbs-26-63 = funct(cbs, val, start) {
  7-1: funct(end-) 26-7-0(cbs, val, start, end-) end,
} end;
26-8-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule8(p1, span);
  case Thunk(case State108(new-cbs-26-108(cbs, val, start)))
end;
new-cbs-26-62 = funct(cbs, val, start) {
  8-1: funct(end-) 26-8-0(cbs, val, start, end-) end,
} end;
26-45-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule45(p1, p2, span);
  case Thunk(case State103(new-cbs-26-103(cbs, val, start)))
end;
26-15-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
  span = start.merge(end-);
  val = rule15(p1, p2, p3, p4, p5, span);
  case Thunk(case State20(new-cbs-26-20(cbs, val, start)))
end;
new-cbs-26-74 = funct(cbs, val, start) {
  15-1: funct(p1, p2, p3, p4, end-) 26-15-0(cbs, val, p1, p2, p3, p4, start, end-) end,
  45-1: funct(p1, end-) 26-45-0(cbs, val, p1, start, end-) end,
} end;
26-19-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule19(p1, span);
  case Thunk(case State20(new-cbs-26-20(cbs, val, start)))
end;
new-cbs-26-70 = funct(cbs, val, start) {
  19-1: funct(end-) 26-19-0(cbs, val, start, end-) end,
} end;
26-49-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule49(p1, p2, p3, span);
  case Thunk(case State70(new-cbs-26-70(cbs, val, start)))
end;
new-cbs-26-71 = funct(cbs, val, start) {
  49-1: funct(p1, p2, end-) 26-49-0(cbs, val, p1, p2, start, end-) end,
} end;
26-50-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule50(p1, p2, p3, span);
  case Thunk(case State70(new-cbs-26-70(cbs, val, start)))
end;
new-cbs-26-55 = funct(cbs, val, start) {
  50-1: funct(p1, p2, end-) 26-50-0(cbs, val, p1, p2, start, end-) end,
} end;
26-20-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule20(p1, p2, p3, span);
  case Thunk(case State20(new-cbs-26-20(cbs, val, start)))
end;
new-cbs-26-52 = funct(cbs, val, start) {
  20-1: funct(p1, p2, end-) 26-20-0(cbs, val, p1, p2, start, end-) end,
} end;
26-21-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule21(p1, p2, p3, span);
  case Thunk(case State20(new-cbs-26-20(cbs, val, start)))
end;
new-cbs-26-44 = funct(cbs, val, start) {
  21-1: funct(p1, p2, end-) 26-21-0(cbs, val, p1, p2, start, end-) end,
} end;
26-22-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule22(p1, span);
  case Thunk(case State20(new-cbs-26-20(cbs, val, start)))
end;
new-cbs-26-43 = funct(cbs, val, start) {
  22-1: funct(end-) 26-22-0(cbs, val, start, end-) end,
} end;
26-23-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule23(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State20(new-cbs-26-20(cbs, val, start)))
end;
new-cbs-26-35 = funct(cbs, val, start) {
  23-1: funct(p1, p2, p3, p4, p5, end-) 26-23-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
} end;
26-13-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule13(p1, p2, p3, p4, span);
  case Thunk(case State20(new-cbs-26-20(cbs, val, start)))
end;
26-24-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule24(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State20(new-cbs-26-20(cbs, val, start)))
end;
26-25-0 = funct(cbs, p1, p2, p3, p4, p5, p6, p7, p8, start, end-)
  span = start.merge(end-);
  val = rule25(p1, p2, p3, p4, p5, p6, p7, p8, span);
  case Thunk(case State20(new-cbs-26-20(cbs, val, start)))
end;
new-cbs-26-29 = funct(cbs, val, start) {
  25-1: funct(p1, p2, p3, p4, p5, p6, p7, end-) 26-25-0(cbs, val, p1, p2, p3, p4, p5, p6, p7, start, end-) end,
  24-1: funct(p1, p2, p3, p4, p5, end-) 26-24-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
  13-1: funct(p1, p2, p3, end-) 26-13-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
26-26-0 = funct(cbs, p1, p2, p3, p4, p5, p6, p7, p8, start, end-)
  span = start.merge(end-);
  val = rule26(p1, p2, p3, p4, p5, p6, p7, p8, span);
  case Thunk(case State20(new-cbs-26-20(cbs, val, start)))
end;
new-cbs-26-21 = funct(cbs, val, start) {
  26-1: funct(p1, p2, p3, p4, p5, p6, p7, end-) 26-26-0(cbs, val, p1, p2, p3, p4, p5, p6, p7, start, end-) end,
} end;
state26 = funct(cbs)
  tok = get-token();
  debug = "state26:
exprns := FUNCT unsafe_opt thisp_opt ( param_list ) % expr END
expr := % expr ; exprns
expr := % exprns
exprns := % FUNCT unsafe_opt thisp_opt ( param_list ) expr END
exprns := % DO FOR letpat IN expr THEN expr END
exprns := % DO WHILE expr THEN expr END
exprns := % IF expr THEN expr elseb_opt END
exprns := % JS
exprns := % [ restexpr_list ]
exprns := % CASE id objlit
exprns := % objlit
objlit := % { keyval_list }
objlit := % ( expr_list )
exprns := % exprns ( expr_list )
exprns := % exprns field_sub
exprns := % exprns . phantom_id = exprns
exprns := % LET varpat FUTURE = exprns
exprns := % letpat = poly_opt exprns
letpat := % LET pattern
letpat := % varpat
varpat := % id
id := % END
id := % FOR
id := % WHILE
id := % ID
exprns := % DO UNSAFE expr END
exprns := % ! exprns
exprns := % exprns BINOP exprns
exprns := % string
string := % STRING
exprns := % id";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "FUNCT" then
    tokens.pop();
    state21(new-cbs-26-21(cbs, tok, tok.span))
  else if tok.type == "DO" then
    tokens.pop();
    state29(new-cbs-26-29(cbs, tok, tok.span))
  else if tok.type == "IF" then
    tokens.pop();
    state35(new-cbs-26-35(cbs, tok, tok.span))
  else if tok.type == "JS" then
    tokens.pop();
    state43(new-cbs-26-43(cbs, tok, tok.span))
  else if tok.type == "[" then
    tokens.pop();
    state44(new-cbs-26-44(cbs, tok, tok.span))
  else if tok.type == "CASE" then
    tokens.pop();
    state52(new-cbs-26-52(cbs, tok, tok.span))
  else if tok.type == "{" then
    tokens.pop();
    state55(new-cbs-26-55(cbs, tok, tok.span))
  else if tok.type == "(" then
    tokens.pop();
    state71(new-cbs-26-71(cbs, tok, tok.span))
  else if tok.type == "LET" then
    tokens.pop();
    state74(new-cbs-26-74(cbs, tok, tok.span))
  else if tok.type == "END" then
    tokens.pop();
    state62(new-cbs-26-62(cbs, tok, tok.span))
  else if tok.type == "FOR" then
    tokens.pop();
    state63(new-cbs-26-63(cbs, tok, tok.span))
  else if tok.type == "WHILE" then
    tokens.pop();
    state64(new-cbs-26-64(cbs, tok, tok.span))
  else if tok.type == "ID" then
    tokens.pop();
    state65(new-cbs-26-65(cbs, tok, tok.span))
  else if tok.type == "!" then
    tokens.pop();
    state109(new-cbs-26-109(cbs, tok, tok.span))
  else if tok.type == "STRING" then
    tokens.pop();
    state112(new-cbs-26-112(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end end end end end end end end end end end end end end end
end;
state25 = funct(cbs)
  tok = get-token();
  debug = "state25:
exprns := FUNCT unsafe_opt thisp_opt ( param_list % ) expr END";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == ")" then
    tokens.pop();
    state26(new-cbs-25-26(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end
end;
23-26-3 = funct(cbs, p4, p5, p6, p7, p8, end-) cbs.26-3(p4, p5, p6, p7, p8, end-) end;
new-cbs-23-24 = funct(cbs, val, start) {
  26-4: funct(p4, p5, p6, p7, end-) 23-26-3(cbs, val, p4, p5, p6, p7, end-) end,
} end;
24-26-4 = funct(cbs, p5, p6, p7, p8, end-) cbs.26-4(p5, p6, p7, p8, end-) end;
new-cbs-24-25 = funct(cbs, val, start) {
  26-5: funct(p5, p6, p7, end-) 24-26-4(cbs, val, p5, p6, p7, end-) end,
} end;
24-67-0 = funct(cbs, start, end-)
  span = start.merge(end-);
  val = rule67(span);
  case Thunk(case State25(new-cbs-24-25(cbs, val, start)))
end;
24-68-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule68(p1, span);
  case Thunk(case State25(new-cbs-24-25(cbs, val, start)))
end;
24-69-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule69(p1, p2, p3, span);
  case Thunk(case State25(new-cbs-24-25(cbs, val, start)))
end;
new-cbs-24-129 = funct(cbs, val, start) {
  69-1: funct(p1, p2, end-) 24-69-0(cbs, val, p1, p2, start, end-) end,
  68-1: funct(end-) 24-68-0(cbs, val, start, end-) end,
} end;
24-66-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule66(p1, span);
  case Thunk(case State129(new-cbs-24-129(cbs, val, start)))
end;
new-cbs-24-132 = funct(cbs, val, start) {
  66-1: funct(end-) 24-66-0(cbs, val, start, end-) end,
} end;
24-5-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule5(p1, span);
  case Thunk(case State132(new-cbs-24-132(cbs, val, start)))
end;
new-cbs-24-65 = funct(cbs, val, start) {
  5-1: funct(end-) 24-5-0(cbs, val, start, end-) end,
} end;
24-6-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule6(p1, span);
  case Thunk(case State132(new-cbs-24-132(cbs, val, start)))
end;
new-cbs-24-64 = funct(cbs, val, start) {
  6-1: funct(end-) 24-6-0(cbs, val, start, end-) end,
} end;
24-7-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule7(p1, span);
  case Thunk(case State132(new-cbs-24-132(cbs, val, start)))
end;
new-cbs-24-63 = funct(cbs, val, start) {
  7-1: funct(end-) 24-7-0(cbs, val, start, end-) end,
} end;
24-8-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule8(p1, span);
  case Thunk(case State132(new-cbs-24-132(cbs, val, start)))
end;
new-cbs-24-62 = funct(cbs, val, start) {
  8-1: funct(end-) 24-8-0(cbs, val, start, end-) end,
} end;
state24 = funct(cbs)
  tok = get-token();
  debug = "state24:
exprns := FUNCT unsafe_opt thisp_opt ( % param_list ) expr END
param_list := % param , param_list
param := % id
id := % END
id := % FOR
id := % WHILE
id := % ID
param_list := % param
param_list := %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "END" then
    tokens.pop();
    state62(new-cbs-24-62(cbs, tok, tok.span))
  else if tok.type == "FOR" then
    tokens.pop();
    state63(new-cbs-24-63(cbs, tok, tok.span))
  else if tok.type == "WHILE" then
    tokens.pop();
    state64(new-cbs-24-64(cbs, tok, tok.span))
  else if tok.type == "ID" then
    tokens.pop();
    state65(new-cbs-24-65(cbs, tok, tok.span))
  else
    span = tok.span.start();
    24-67-0(cbs, span, span)
  end end end end end
end;
state23 = funct(cbs)
  tok = get-token();
  debug = "state23:
exprns := FUNCT unsafe_opt thisp_opt % ( param_list ) expr END";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "(" then
    tokens.pop();
    state24(new-cbs-23-24(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end
end;
22-26-2 = funct(cbs, p3, p4, p5, p6, p7, p8, end-) cbs.26-2(p3, p4, p5, p6, p7, p8, end-) end;
new-cbs-22-23 = funct(cbs, val, start) {
  26-3: funct(p3, p4, p5, p6, p7, end-) 22-26-2(cbs, val, p3, p4, p5, p6, p7, end-) end,
} end;
rule72 = funct(span) null end;
22-72-0 = funct(cbs, start, end-)
  span = start.merge(end-);
  val = rule72(span);
  case Thunk(case State23(new-cbs-22-23(cbs, val, start)))
end;
rule73 = funct(p1, span) p1 end;
22-73-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule73(p1, span);
  case Thunk(case State23(new-cbs-22-23(cbs, val, start)))
end;
new-cbs-22-133 = funct(cbs, val, start) {
  73-1: funct(end-) 22-73-0(cbs, val, start, end-) end,
} end;
22-66-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule66(p1, span);
  case Thunk(case State133(new-cbs-22-133(cbs, val, start)))
end;
new-cbs-22-132 = funct(cbs, val, start) {
  66-1: funct(end-) 22-66-0(cbs, val, start, end-) end,
} end;
22-5-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule5(p1, span);
  case Thunk(case State132(new-cbs-22-132(cbs, val, start)))
end;
new-cbs-22-65 = funct(cbs, val, start) {
  5-1: funct(end-) 22-5-0(cbs, val, start, end-) end,
} end;
22-6-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule6(p1, span);
  case Thunk(case State132(new-cbs-22-132(cbs, val, start)))
end;
new-cbs-22-64 = funct(cbs, val, start) {
  6-1: funct(end-) 22-6-0(cbs, val, start, end-) end,
} end;
22-7-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule7(p1, span);
  case Thunk(case State132(new-cbs-22-132(cbs, val, start)))
end;
new-cbs-22-63 = funct(cbs, val, start) {
  7-1: funct(end-) 22-7-0(cbs, val, start, end-) end,
} end;
22-8-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule8(p1, span);
  case Thunk(case State132(new-cbs-22-132(cbs, val, start)))
end;
new-cbs-22-62 = funct(cbs, val, start) {
  8-1: funct(end-) 22-8-0(cbs, val, start, end-) end,
} end;
state22 = funct(cbs)
  tok = get-token();
  debug = "state22:
exprns := FUNCT unsafe_opt % thisp_opt ( param_list ) expr END
thisp_opt := % param
param := % id
id := % END
id := % FOR
id := % WHILE
id := % ID
thisp_opt := %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "END" then
    tokens.pop();
    state62(new-cbs-22-62(cbs, tok, tok.span))
  else if tok.type == "FOR" then
    tokens.pop();
    state63(new-cbs-22-63(cbs, tok, tok.span))
  else if tok.type == "WHILE" then
    tokens.pop();
    state64(new-cbs-22-64(cbs, tok, tok.span))
  else if tok.type == "ID" then
    tokens.pop();
    state65(new-cbs-22-65(cbs, tok, tok.span))
  else
    span = tok.span.start();
    22-72-0(cbs, span, span)
  end end end end end
end;
20-18-1 = funct(cbs, p2, p3, p4, end-) cbs.18-1(p2, p3, p4, end-) end;
new-cbs-20-14 = funct(cbs, val, start) {
  18-2: funct(p2, p3, end-) 20-18-1(cbs, val, p2, p3, end-) end,
} end;
20-11-1 = funct(cbs, p2, p3, end-) cbs.11-1(p2, p3, end-) end;
new-cbs-20-12 = funct(cbs, val, start) {
  11-2: funct(p2, end-) 20-11-1(cbs, val, p2, end-) end,
} end;
20-16-1 = funct(cbs, p2, p3, p4, p5, end-) cbs.16-1(p2, p3, p4, p5, end-) end;
20-17-1 = funct(cbs, p2, end-) cbs.17-1(p2, end-) end;
new-cbs-20-7 = funct(cbs, val, start) {
  17-2: funct(end-) 20-17-1(cbs, val, end-) end,
} end;
20-48-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule48(p1, p2, span);
  case Thunk(case State7(new-cbs-20-7(cbs, val, start)))
end;
new-cbs-20-8 = funct(cbs, val, start) {
  48-1: funct(p1, end-) 20-48-0(cbs, val, p1, start, end-) end,
  16-2: funct(p2, p3, p4, end-) 20-16-1(cbs, val, p2, p3, p4, end-) end,
} end;
state20 = funct(cbs)
  tok = get-token();
  debug = "state20:
exprns := exprns % field_sub
field_sub := % . phantom_id
exprns := exprns % BINOP exprns
exprns := exprns % . phantom_id = exprns
exprns := exprns % ( expr_list )
expr := exprns %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "." then
    tokens.pop();
    state8(new-cbs-20-8(cbs, tok, tok.span))
  else if tok.type == "BINOP" then
    tokens.pop();
    state12(new-cbs-20-12(cbs, tok, tok.span))
  else if tok.type == "(" then
    tokens.pop();
    state14(new-cbs-20-14(cbs, tok, tok.span))
  else
    cbs.0-1(tok.span.start())
  end end end end
end;
state19 = funct(cbs)
  tok = get-token();
  debug = "state19:
expr_list := expr , expr_list %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.4-3(tok.span.start())
  end
end;
17-1-1 = funct(cbs, p2, p3, end-) cbs.1-1(p2, p3, end-) end;
new-cbs-17-5 = funct(cbs, val, start) {
  1-2: funct(p2, end-) 17-1-1(cbs, val, p2, end-) end,
} end;
17-4-1 = funct(cbs, p2, p3, end-) cbs.4-1(p2, p3, end-) end;
new-cbs-17-18 = funct(cbs, val, start) {
  4-2: funct(p2, end-) 17-4-1(cbs, val, p2, end-) end,
} end;
18-4-2 = funct(cbs, p3, end-) cbs.4-2(p3, end-) end;
new-cbs-18-19 = funct(cbs, val, start) {
  4-3: funct(end-) 18-4-2(cbs, val, end-) end,
} end;
18-2-0 = funct(cbs, start, end-)
  span = start.merge(end-);
  val = rule2(span);
  case Thunk(case State19(new-cbs-18-19(cbs, val, start)))
end;
18-3-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule3(p1, span);
  case Thunk(case State19(new-cbs-18-19(cbs, val, start)))
end;
18-4-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule4(p1, p2, p3, span);
  case Thunk(case State19(new-cbs-18-19(cbs, val, start)))
end;
let new-cbs-18-17 future = (
  18-1-0 = funct(cbs, p1, p2, p3, start, end-)
    span = start.merge(end-);
    val = rule1(p1, p2, p3, span);
    case Thunk(case State17(new-cbs-18-17(cbs, val, start)))
  end;
  funct(cbs, val, start) {
    4-1: funct(p1, p2, end-) 18-4-0(cbs, val, p1, p2, start, end-) end,
    1-1: funct(p1, p2, end-) 18-1-0(cbs, val, p1, p2, start, end-) end,
    3-1: funct(end-) 18-3-0(cbs, val, start, end-) end,
  } end
).0;
18-0-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule0(p1, span);
  case Thunk(case State17(new-cbs-18-17(cbs, val, start)))
end;
let new-cbs-18-20 future = (
  18-11-0 = funct(cbs, p1, p2, p3, start, end-)
    span = start.merge(end-);
    val = rule11(p1, p2, p3, span);
    case Thunk(case State20(new-cbs-18-20(cbs, val, start)))
  end;
  18-16-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
    span = start.merge(end-);
    val = rule16(p1, p2, p3, p4, p5, span);
    case Thunk(case State20(new-cbs-18-20(cbs, val, start)))
  end;
  18-17-0 = funct(cbs, p1, p2, start, end-)
    span = start.merge(end-);
    val = rule17(p1, p2, span);
    case Thunk(case State20(new-cbs-18-20(cbs, val, start)))
  end;
  18-18-0 = funct(cbs, p1, p2, p3, p4, start, end-)
    span = start.merge(end-);
    val = rule18(p1, p2, p3, p4, span);
    case Thunk(case State20(new-cbs-18-20(cbs, val, start)))
  end;
  funct(cbs, val, start) {
    0-1: funct(end-) 18-0-0(cbs, val, start, end-) end,
    18-1: funct(p1, p2, p3, end-) 18-18-0(cbs, val, p1, p2, p3, start, end-) end,
    17-1: funct(p1, end-) 18-17-0(cbs, val, p1, start, end-) end,
    16-1: funct(p1, p2, p3, p4, end-) 18-16-0(cbs, val, p1, p2, p3, p4, start, end-) end,
    11-1: funct(p1, p2, end-) 18-11-0(cbs, val, p1, p2, start, end-) end,
  } end
).0;
18-10-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule10(p1, span);
  case Thunk(case State20(new-cbs-18-20(cbs, val, start)))
end;
new-cbs-18-111 = funct(cbs, val, start) {
  10-1: funct(end-) 18-10-0(cbs, val, start, end-) end,
} end;
18-27-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule27(p1, span);
  case Thunk(case State111(new-cbs-18-111(cbs, val, start)))
end;
new-cbs-18-112 = funct(cbs, val, start) {
  27-1: funct(end-) 18-27-0(cbs, val, start, end-) end,
} end;
18-12-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule12(p1, p2, span);
  case Thunk(case State20(new-cbs-18-20(cbs, val, start)))
end;
new-cbs-18-109 = funct(cbs, val, start) {
  12-1: funct(p1, end-) 18-12-0(cbs, val, p1, start, end-) end,
} end;
18-9-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule9(p1, span);
  case Thunk(case State20(new-cbs-18-20(cbs, val, start)))
end;
18-14-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule14(p1, p2, p3, p4, span);
  case Thunk(case State20(new-cbs-18-20(cbs, val, start)))
end;
new-cbs-18-103 = funct(cbs, val, start) {
  14-1: funct(p1, p2, p3, end-) 18-14-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
18-44-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule44(p1, span);
  case Thunk(case State103(new-cbs-18-103(cbs, val, start)))
end;
new-cbs-18-107 = funct(cbs, val, start) {
  44-1: funct(end-) 18-44-0(cbs, val, start, end-) end,
} end;
18-30-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule30(p1, span);
  case Thunk(case State107(new-cbs-18-107(cbs, val, start)))
end;
new-cbs-18-108 = funct(cbs, val, start) {
  30-1: funct(end-) 18-30-0(cbs, val, start, end-) end,
  9-1: funct(end-) 18-9-0(cbs, val, start, end-) end,
} end;
18-5-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule5(p1, span);
  case Thunk(case State108(new-cbs-18-108(cbs, val, start)))
end;
new-cbs-18-65 = funct(cbs, val, start) {
  5-1: funct(end-) 18-5-0(cbs, val, start, end-) end,
} end;
18-6-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule6(p1, span);
  case Thunk(case State108(new-cbs-18-108(cbs, val, start)))
end;
new-cbs-18-64 = funct(cbs, val, start) {
  6-1: funct(end-) 18-6-0(cbs, val, start, end-) end,
} end;
18-7-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule7(p1, span);
  case Thunk(case State108(new-cbs-18-108(cbs, val, start)))
end;
new-cbs-18-63 = funct(cbs, val, start) {
  7-1: funct(end-) 18-7-0(cbs, val, start, end-) end,
} end;
18-8-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule8(p1, span);
  case Thunk(case State108(new-cbs-18-108(cbs, val, start)))
end;
new-cbs-18-62 = funct(cbs, val, start) {
  8-1: funct(end-) 18-8-0(cbs, val, start, end-) end,
} end;
18-45-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule45(p1, p2, span);
  case Thunk(case State103(new-cbs-18-103(cbs, val, start)))
end;
18-15-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
  span = start.merge(end-);
  val = rule15(p1, p2, p3, p4, p5, span);
  case Thunk(case State20(new-cbs-18-20(cbs, val, start)))
end;
new-cbs-18-74 = funct(cbs, val, start) {
  15-1: funct(p1, p2, p3, p4, end-) 18-15-0(cbs, val, p1, p2, p3, p4, start, end-) end,
  45-1: funct(p1, end-) 18-45-0(cbs, val, p1, start, end-) end,
} end;
18-19-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule19(p1, span);
  case Thunk(case State20(new-cbs-18-20(cbs, val, start)))
end;
new-cbs-18-70 = funct(cbs, val, start) {
  19-1: funct(end-) 18-19-0(cbs, val, start, end-) end,
} end;
18-49-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule49(p1, p2, p3, span);
  case Thunk(case State70(new-cbs-18-70(cbs, val, start)))
end;
new-cbs-18-71 = funct(cbs, val, start) {
  49-1: funct(p1, p2, end-) 18-49-0(cbs, val, p1, p2, start, end-) end,
} end;
18-50-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule50(p1, p2, p3, span);
  case Thunk(case State70(new-cbs-18-70(cbs, val, start)))
end;
new-cbs-18-55 = funct(cbs, val, start) {
  50-1: funct(p1, p2, end-) 18-50-0(cbs, val, p1, p2, start, end-) end,
} end;
18-20-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule20(p1, p2, p3, span);
  case Thunk(case State20(new-cbs-18-20(cbs, val, start)))
end;
new-cbs-18-52 = funct(cbs, val, start) {
  20-1: funct(p1, p2, end-) 18-20-0(cbs, val, p1, p2, start, end-) end,
} end;
18-21-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule21(p1, p2, p3, span);
  case Thunk(case State20(new-cbs-18-20(cbs, val, start)))
end;
new-cbs-18-44 = funct(cbs, val, start) {
  21-1: funct(p1, p2, end-) 18-21-0(cbs, val, p1, p2, start, end-) end,
} end;
18-22-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule22(p1, span);
  case Thunk(case State20(new-cbs-18-20(cbs, val, start)))
end;
new-cbs-18-43 = funct(cbs, val, start) {
  22-1: funct(end-) 18-22-0(cbs, val, start, end-) end,
} end;
18-23-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule23(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State20(new-cbs-18-20(cbs, val, start)))
end;
new-cbs-18-35 = funct(cbs, val, start) {
  23-1: funct(p1, p2, p3, p4, p5, end-) 18-23-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
} end;
18-13-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule13(p1, p2, p3, p4, span);
  case Thunk(case State20(new-cbs-18-20(cbs, val, start)))
end;
18-24-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule24(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State20(new-cbs-18-20(cbs, val, start)))
end;
18-25-0 = funct(cbs, p1, p2, p3, p4, p5, p6, p7, p8, start, end-)
  span = start.merge(end-);
  val = rule25(p1, p2, p3, p4, p5, p6, p7, p8, span);
  case Thunk(case State20(new-cbs-18-20(cbs, val, start)))
end;
new-cbs-18-29 = funct(cbs, val, start) {
  25-1: funct(p1, p2, p3, p4, p5, p6, p7, end-) 18-25-0(cbs, val, p1, p2, p3, p4, p5, p6, p7, start, end-) end,
  24-1: funct(p1, p2, p3, p4, p5, end-) 18-24-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
  13-1: funct(p1, p2, p3, end-) 18-13-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
18-26-0 = funct(cbs, p1, p2, p3, p4, p5, p6, p7, p8, start, end-)
  span = start.merge(end-);
  val = rule26(p1, p2, p3, p4, p5, p6, p7, p8, span);
  case Thunk(case State20(new-cbs-18-20(cbs, val, start)))
end;
new-cbs-18-21 = funct(cbs, val, start) {
  26-1: funct(p1, p2, p3, p4, p5, p6, p7, end-) 18-26-0(cbs, val, p1, p2, p3, p4, p5, p6, p7, start, end-) end,
} end;
state18 = funct(cbs)
  tok = get-token();
  debug = "state18:
expr_list := expr , % expr_list
expr_list := % expr , expr_list
expr := % expr ; exprns
expr := % exprns
exprns := % FUNCT unsafe_opt thisp_opt ( param_list ) expr END
exprns := % DO FOR letpat IN expr THEN expr END
exprns := % DO WHILE expr THEN expr END
exprns := % IF expr THEN expr elseb_opt END
exprns := % JS
exprns := % [ restexpr_list ]
exprns := % CASE id objlit
exprns := % objlit
objlit := % { keyval_list }
objlit := % ( expr_list )
exprns := % exprns ( expr_list )
exprns := % exprns field_sub
exprns := % exprns . phantom_id = exprns
exprns := % LET varpat FUTURE = exprns
exprns := % letpat = poly_opt exprns
letpat := % LET pattern
letpat := % varpat
varpat := % id
id := % END
id := % FOR
id := % WHILE
id := % ID
exprns := % DO UNSAFE expr END
exprns := % ! exprns
exprns := % exprns BINOP exprns
exprns := % string
string := % STRING
exprns := % id
expr_list := % expr
expr_list := %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "FUNCT" then
    tokens.pop();
    state21(new-cbs-18-21(cbs, tok, tok.span))
  else if tok.type == "DO" then
    tokens.pop();
    state29(new-cbs-18-29(cbs, tok, tok.span))
  else if tok.type == "IF" then
    tokens.pop();
    state35(new-cbs-18-35(cbs, tok, tok.span))
  else if tok.type == "JS" then
    tokens.pop();
    state43(new-cbs-18-43(cbs, tok, tok.span))
  else if tok.type == "[" then
    tokens.pop();
    state44(new-cbs-18-44(cbs, tok, tok.span))
  else if tok.type == "CASE" then
    tokens.pop();
    state52(new-cbs-18-52(cbs, tok, tok.span))
  else if tok.type == "{" then
    tokens.pop();
    state55(new-cbs-18-55(cbs, tok, tok.span))
  else if tok.type == "(" then
    tokens.pop();
    state71(new-cbs-18-71(cbs, tok, tok.span))
  else if tok.type == "LET" then
    tokens.pop();
    state74(new-cbs-18-74(cbs, tok, tok.span))
  else if tok.type == "END" then
    tokens.pop();
    state62(new-cbs-18-62(cbs, tok, tok.span))
  else if tok.type == "FOR" then
    tokens.pop();
    state63(new-cbs-18-63(cbs, tok, tok.span))
  else if tok.type == "WHILE" then
    tokens.pop();
    state64(new-cbs-18-64(cbs, tok, tok.span))
  else if tok.type == "ID" then
    tokens.pop();
    state65(new-cbs-18-65(cbs, tok, tok.span))
  else if tok.type == "!" then
    tokens.pop();
    state109(new-cbs-18-109(cbs, tok, tok.span))
  else if tok.type == "STRING" then
    tokens.pop();
    state112(new-cbs-18-112(cbs, tok, tok.span))
  else
    span = tok.span.start();
    18-2-0(cbs, span, span)
  end end end end end end end end end end end end end end end end
end;
state17 = funct(cbs)
  tok = get-token();
  debug = "state17:
expr_list := expr % , expr_list
expr_list := expr %
expr := expr % ; exprns";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "," then
    tokens.pop();
    state18(new-cbs-17-18(cbs, tok, tok.span))
  else if tok.type == ";" then
    tokens.pop();
    state5(new-cbs-17-5(cbs, tok, tok.span))
  else
    cbs.3-1(tok.span.start())
  end end end
end;
15-18-3 = funct(cbs, p4, end-) cbs.18-3(p4, end-) end;
new-cbs-15-16 = funct(cbs, val, start) {
  18-4: funct(end-) 15-18-3(cbs, val, end-) end,
} end;
state16 = funct(cbs)
  tok = get-token();
  debug = "state16:
exprns := exprns ( expr_list ) %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.18-4(tok.span.start())
  end
end;
state15 = funct(cbs)
  tok = get-token();
  debug = "state15:
exprns := exprns ( expr_list % )";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == ")" then
    tokens.pop();
    state16(new-cbs-15-16(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end
end;
13-18-1 = funct(cbs, p2, p3, p4, end-) cbs.18-1(p2, p3, p4, end-) end;
new-cbs-13-14 = funct(cbs, val, start) {
  18-2: funct(p2, p3, end-) 13-18-1(cbs, val, p2, p3, end-) end,
} end;
13-16-1 = funct(cbs, p2, p3, p4, p5, end-) cbs.16-1(p2, p3, p4, p5, end-) end;
13-17-1 = funct(cbs, p2, end-) cbs.17-1(p2, end-) end;
new-cbs-13-7 = funct(cbs, val, start) {
  17-2: funct(end-) 13-17-1(cbs, val, end-) end,
} end;
13-48-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule48(p1, p2, span);
  case Thunk(case State7(new-cbs-13-7(cbs, val, start)))
end;
new-cbs-13-8 = funct(cbs, val, start) {
  48-1: funct(p1, end-) 13-48-0(cbs, val, p1, start, end-) end,
  16-2: funct(p2, p3, p4, end-) 13-16-1(cbs, val, p2, p3, p4, end-) end,
} end;
state13 = funct(cbs)
  tok = get-token();
  debug = "state13:
exprns := exprns BINOP exprns %
exprns := exprns % field_sub
field_sub := % . phantom_id
exprns := exprns % BINOP exprns
exprns := exprns % . phantom_id = exprns
exprns := exprns % ( expr_list )";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "." then
    tokens.pop();
    state8(new-cbs-13-8(cbs, tok, tok.span))
  else if tok.type == "(" then
    tokens.pop();
    state14(new-cbs-13-14(cbs, tok, tok.span))
  else
    cbs.11-3(tok.span.start())
  end end end
end;
11-18-1 = funct(cbs, p2, p3, p4, end-) cbs.18-1(p2, p3, p4, end-) end;
new-cbs-11-14 = funct(cbs, val, start) {
  18-2: funct(p2, p3, end-) 11-18-1(cbs, val, p2, p3, end-) end,
} end;
11-11-1 = funct(cbs, p2, p3, end-) cbs.11-1(p2, p3, end-) end;
new-cbs-11-12 = funct(cbs, val, start) {
  11-2: funct(p2, end-) 11-11-1(cbs, val, p2, end-) end,
} end;
11-16-1 = funct(cbs, p2, p3, p4, p5, end-) cbs.16-1(p2, p3, p4, p5, end-) end;
11-17-1 = funct(cbs, p2, end-) cbs.17-1(p2, end-) end;
new-cbs-11-7 = funct(cbs, val, start) {
  17-2: funct(end-) 11-17-1(cbs, val, end-) end,
} end;
11-48-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule48(p1, p2, span);
  case Thunk(case State7(new-cbs-11-7(cbs, val, start)))
end;
new-cbs-11-8 = funct(cbs, val, start) {
  48-1: funct(p1, end-) 11-48-0(cbs, val, p1, start, end-) end,
  16-2: funct(p2, p3, p4, end-) 11-16-1(cbs, val, p2, p3, p4, end-) end,
} end;
state11 = funct(cbs)
  tok = get-token();
  debug = "state11:
exprns := exprns . phantom_id = exprns %
exprns := exprns % field_sub
field_sub := % . phantom_id
exprns := exprns % BINOP exprns
exprns := exprns % . phantom_id = exprns
exprns := exprns % ( expr_list )";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "." then
    tokens.pop();
    state8(new-cbs-11-8(cbs, tok, tok.span))
  else if tok.type == "BINOP" then
    tokens.pop();
    state12(new-cbs-11-12(cbs, tok, tok.span))
  else if tok.type == "(" then
    tokens.pop();
    state14(new-cbs-11-14(cbs, tok, tok.span))
  else
    cbs.16-5(tok.span.start())
  end end end end
end;
9-16-3 = funct(cbs, p4, p5, end-) cbs.16-3(p4, p5, end-) end;
new-cbs-9-10 = funct(cbs, val, start) {
  16-4: funct(p4, end-) 9-16-3(cbs, val, p4, end-) end,
} end;
10-16-4 = funct(cbs, p5, end-) cbs.16-4(p5, end-) end;
let new-cbs-10-11 future = (
  10-11-0 = funct(cbs, p1, p2, p3, start, end-)
    span = start.merge(end-);
    val = rule11(p1, p2, p3, span);
    case Thunk(case State11(new-cbs-10-11(cbs, val, start)))
  end;
  10-16-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
    span = start.merge(end-);
    val = rule16(p1, p2, p3, p4, p5, span);
    case Thunk(case State11(new-cbs-10-11(cbs, val, start)))
  end;
  10-17-0 = funct(cbs, p1, p2, start, end-)
    span = start.merge(end-);
    val = rule17(p1, p2, span);
    case Thunk(case State11(new-cbs-10-11(cbs, val, start)))
  end;
  10-18-0 = funct(cbs, p1, p2, p3, p4, start, end-)
    span = start.merge(end-);
    val = rule18(p1, p2, p3, p4, span);
    case Thunk(case State11(new-cbs-10-11(cbs, val, start)))
  end;
  funct(cbs, val, start) {
    16-5: funct(end-) 10-16-4(cbs, val, end-) end,
    18-1: funct(p1, p2, p3, end-) 10-18-0(cbs, val, p1, p2, p3, start, end-) end,
    17-1: funct(p1, end-) 10-17-0(cbs, val, p1, start, end-) end,
    16-1: funct(p1, p2, p3, p4, end-) 10-16-0(cbs, val, p1, p2, p3, p4, start, end-) end,
    11-1: funct(p1, p2, end-) 10-11-0(cbs, val, p1, p2, start, end-) end,
  } end
).0;
10-10-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule10(p1, span);
  case Thunk(case State11(new-cbs-10-11(cbs, val, start)))
end;
new-cbs-10-111 = funct(cbs, val, start) {
  10-1: funct(end-) 10-10-0(cbs, val, start, end-) end,
} end;
10-27-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule27(p1, span);
  case Thunk(case State111(new-cbs-10-111(cbs, val, start)))
end;
new-cbs-10-112 = funct(cbs, val, start) {
  27-1: funct(end-) 10-27-0(cbs, val, start, end-) end,
} end;
10-12-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule12(p1, p2, span);
  case Thunk(case State11(new-cbs-10-11(cbs, val, start)))
end;
new-cbs-10-109 = funct(cbs, val, start) {
  12-1: funct(p1, end-) 10-12-0(cbs, val, p1, start, end-) end,
} end;
10-9-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule9(p1, span);
  case Thunk(case State11(new-cbs-10-11(cbs, val, start)))
end;
10-14-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule14(p1, p2, p3, p4, span);
  case Thunk(case State11(new-cbs-10-11(cbs, val, start)))
end;
new-cbs-10-103 = funct(cbs, val, start) {
  14-1: funct(p1, p2, p3, end-) 10-14-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
10-44-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule44(p1, span);
  case Thunk(case State103(new-cbs-10-103(cbs, val, start)))
end;
new-cbs-10-107 = funct(cbs, val, start) {
  44-1: funct(end-) 10-44-0(cbs, val, start, end-) end,
} end;
10-30-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule30(p1, span);
  case Thunk(case State107(new-cbs-10-107(cbs, val, start)))
end;
new-cbs-10-108 = funct(cbs, val, start) {
  30-1: funct(end-) 10-30-0(cbs, val, start, end-) end,
  9-1: funct(end-) 10-9-0(cbs, val, start, end-) end,
} end;
10-5-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule5(p1, span);
  case Thunk(case State108(new-cbs-10-108(cbs, val, start)))
end;
new-cbs-10-65 = funct(cbs, val, start) {
  5-1: funct(end-) 10-5-0(cbs, val, start, end-) end,
} end;
10-6-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule6(p1, span);
  case Thunk(case State108(new-cbs-10-108(cbs, val, start)))
end;
new-cbs-10-64 = funct(cbs, val, start) {
  6-1: funct(end-) 10-6-0(cbs, val, start, end-) end,
} end;
10-7-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule7(p1, span);
  case Thunk(case State108(new-cbs-10-108(cbs, val, start)))
end;
new-cbs-10-63 = funct(cbs, val, start) {
  7-1: funct(end-) 10-7-0(cbs, val, start, end-) end,
} end;
10-8-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule8(p1, span);
  case Thunk(case State108(new-cbs-10-108(cbs, val, start)))
end;
new-cbs-10-62 = funct(cbs, val, start) {
  8-1: funct(end-) 10-8-0(cbs, val, start, end-) end,
} end;
10-45-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule45(p1, p2, span);
  case Thunk(case State103(new-cbs-10-103(cbs, val, start)))
end;
10-15-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
  span = start.merge(end-);
  val = rule15(p1, p2, p3, p4, p5, span);
  case Thunk(case State11(new-cbs-10-11(cbs, val, start)))
end;
new-cbs-10-74 = funct(cbs, val, start) {
  15-1: funct(p1, p2, p3, p4, end-) 10-15-0(cbs, val, p1, p2, p3, p4, start, end-) end,
  45-1: funct(p1, end-) 10-45-0(cbs, val, p1, start, end-) end,
} end;
10-19-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule19(p1, span);
  case Thunk(case State11(new-cbs-10-11(cbs, val, start)))
end;
new-cbs-10-70 = funct(cbs, val, start) {
  19-1: funct(end-) 10-19-0(cbs, val, start, end-) end,
} end;
10-49-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule49(p1, p2, p3, span);
  case Thunk(case State70(new-cbs-10-70(cbs, val, start)))
end;
new-cbs-10-71 = funct(cbs, val, start) {
  49-1: funct(p1, p2, end-) 10-49-0(cbs, val, p1, p2, start, end-) end,
} end;
10-50-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule50(p1, p2, p3, span);
  case Thunk(case State70(new-cbs-10-70(cbs, val, start)))
end;
new-cbs-10-55 = funct(cbs, val, start) {
  50-1: funct(p1, p2, end-) 10-50-0(cbs, val, p1, p2, start, end-) end,
} end;
10-20-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule20(p1, p2, p3, span);
  case Thunk(case State11(new-cbs-10-11(cbs, val, start)))
end;
new-cbs-10-52 = funct(cbs, val, start) {
  20-1: funct(p1, p2, end-) 10-20-0(cbs, val, p1, p2, start, end-) end,
} end;
10-21-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule21(p1, p2, p3, span);
  case Thunk(case State11(new-cbs-10-11(cbs, val, start)))
end;
new-cbs-10-44 = funct(cbs, val, start) {
  21-1: funct(p1, p2, end-) 10-21-0(cbs, val, p1, p2, start, end-) end,
} end;
10-22-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule22(p1, span);
  case Thunk(case State11(new-cbs-10-11(cbs, val, start)))
end;
new-cbs-10-43 = funct(cbs, val, start) {
  22-1: funct(end-) 10-22-0(cbs, val, start, end-) end,
} end;
10-23-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule23(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State11(new-cbs-10-11(cbs, val, start)))
end;
new-cbs-10-35 = funct(cbs, val, start) {
  23-1: funct(p1, p2, p3, p4, p5, end-) 10-23-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
} end;
10-13-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule13(p1, p2, p3, p4, span);
  case Thunk(case State11(new-cbs-10-11(cbs, val, start)))
end;
10-24-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule24(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State11(new-cbs-10-11(cbs, val, start)))
end;
10-25-0 = funct(cbs, p1, p2, p3, p4, p5, p6, p7, p8, start, end-)
  span = start.merge(end-);
  val = rule25(p1, p2, p3, p4, p5, p6, p7, p8, span);
  case Thunk(case State11(new-cbs-10-11(cbs, val, start)))
end;
new-cbs-10-29 = funct(cbs, val, start) {
  25-1: funct(p1, p2, p3, p4, p5, p6, p7, end-) 10-25-0(cbs, val, p1, p2, p3, p4, p5, p6, p7, start, end-) end,
  24-1: funct(p1, p2, p3, p4, p5, end-) 10-24-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
  13-1: funct(p1, p2, p3, end-) 10-13-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
10-26-0 = funct(cbs, p1, p2, p3, p4, p5, p6, p7, p8, start, end-)
  span = start.merge(end-);
  val = rule26(p1, p2, p3, p4, p5, p6, p7, p8, span);
  case Thunk(case State11(new-cbs-10-11(cbs, val, start)))
end;
new-cbs-10-21 = funct(cbs, val, start) {
  26-1: funct(p1, p2, p3, p4, p5, p6, p7, end-) 10-26-0(cbs, val, p1, p2, p3, p4, p5, p6, p7, start, end-) end,
} end;
state10 = funct(cbs)
  tok = get-token();
  debug = "state10:
exprns := exprns . phantom_id = % exprns
exprns := % FUNCT unsafe_opt thisp_opt ( param_list ) expr END
exprns := % DO FOR letpat IN expr THEN expr END
exprns := % DO WHILE expr THEN expr END
exprns := % IF expr THEN expr elseb_opt END
exprns := % JS
exprns := % [ restexpr_list ]
exprns := % CASE id objlit
exprns := % objlit
objlit := % { keyval_list }
objlit := % ( expr_list )
exprns := % exprns ( expr_list )
exprns := % exprns field_sub
exprns := % exprns . phantom_id = exprns
exprns := % LET varpat FUTURE = exprns
exprns := % letpat = poly_opt exprns
letpat := % LET pattern
letpat := % varpat
varpat := % id
id := % END
id := % FOR
id := % WHILE
id := % ID
exprns := % DO UNSAFE expr END
exprns := % ! exprns
exprns := % exprns BINOP exprns
exprns := % string
string := % STRING
exprns := % id";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "FUNCT" then
    tokens.pop();
    state21(new-cbs-10-21(cbs, tok, tok.span))
  else if tok.type == "DO" then
    tokens.pop();
    state29(new-cbs-10-29(cbs, tok, tok.span))
  else if tok.type == "IF" then
    tokens.pop();
    state35(new-cbs-10-35(cbs, tok, tok.span))
  else if tok.type == "JS" then
    tokens.pop();
    state43(new-cbs-10-43(cbs, tok, tok.span))
  else if tok.type == "[" then
    tokens.pop();
    state44(new-cbs-10-44(cbs, tok, tok.span))
  else if tok.type == "CASE" then
    tokens.pop();
    state52(new-cbs-10-52(cbs, tok, tok.span))
  else if tok.type == "{" then
    tokens.pop();
    state55(new-cbs-10-55(cbs, tok, tok.span))
  else if tok.type == "(" then
    tokens.pop();
    state71(new-cbs-10-71(cbs, tok, tok.span))
  else if tok.type == "LET" then
    tokens.pop();
    state74(new-cbs-10-74(cbs, tok, tok.span))
  else if tok.type == "END" then
    tokens.pop();
    state62(new-cbs-10-62(cbs, tok, tok.span))
  else if tok.type == "FOR" then
    tokens.pop();
    state63(new-cbs-10-63(cbs, tok, tok.span))
  else if tok.type == "WHILE" then
    tokens.pop();
    state64(new-cbs-10-64(cbs, tok, tok.span))
  else if tok.type == "ID" then
    tokens.pop();
    state65(new-cbs-10-65(cbs, tok, tok.span))
  else if tok.type == "!" then
    tokens.pop();
    state109(new-cbs-10-109(cbs, tok, tok.span))
  else if tok.type == "STRING" then
    tokens.pop();
    state112(new-cbs-10-112(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end end end end end end end end end end end end end end end
end;
state9 = funct(cbs)
  tok = get-token();
  debug = "state9:
exprns := exprns . phantom_id % = exprns
field_sub := . phantom_id %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "=" then
    tokens.pop();
    state10(new-cbs-9-10(cbs, tok, tok.span))
  else
    cbs.48-2(tok.span.start())
  end end
end;
state7 = funct(cbs)
  tok = get-token();
  debug = "state7:
exprns := exprns field_sub %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else
    cbs.17-2(tok.span.start())
  end
end;
6-18-1 = funct(cbs, p2, p3, p4, end-) cbs.18-1(p2, p3, p4, end-) end;
new-cbs-6-14 = funct(cbs, val, start) {
  18-2: funct(p2, p3, end-) 6-18-1(cbs, val, p2, p3, end-) end,
} end;
6-11-1 = funct(cbs, p2, p3, end-) cbs.11-1(p2, p3, end-) end;
new-cbs-6-12 = funct(cbs, val, start) {
  11-2: funct(p2, end-) 6-11-1(cbs, val, p2, end-) end,
} end;
6-16-1 = funct(cbs, p2, p3, p4, p5, end-) cbs.16-1(p2, p3, p4, p5, end-) end;
6-17-1 = funct(cbs, p2, end-) cbs.17-1(p2, end-) end;
new-cbs-6-7 = funct(cbs, val, start) {
  17-2: funct(end-) 6-17-1(cbs, val, end-) end,
} end;
6-48-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule48(p1, p2, span);
  case Thunk(case State7(new-cbs-6-7(cbs, val, start)))
end;
new-cbs-6-8 = funct(cbs, val, start) {
  48-1: funct(p1, end-) 6-48-0(cbs, val, p1, start, end-) end,
  16-2: funct(p2, p3, p4, end-) 6-16-1(cbs, val, p2, p3, p4, end-) end,
} end;
state6 = funct(cbs)
  tok = get-token();
  debug = "state6:
expr := expr ; exprns %
exprns := exprns % field_sub
field_sub := % . phantom_id
exprns := exprns % BINOP exprns
exprns := exprns % . phantom_id = exprns
exprns := exprns % ( expr_list )";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "." then
    tokens.pop();
    state8(new-cbs-6-8(cbs, tok, tok.span))
  else if tok.type == "BINOP" then
    tokens.pop();
    state12(new-cbs-6-12(cbs, tok, tok.span))
  else if tok.type == "(" then
    tokens.pop();
    state14(new-cbs-6-14(cbs, tok, tok.span))
  else
    cbs.1-3(tok.span.start())
  end end end end
end;
4-1-1 = funct(cbs, p2, p3, end-) cbs.1-1(p2, p3, end-) end;
new-cbs-4-5 = funct(cbs, val, start) {
  1-2: funct(p2, end-) 4-1-1(cbs, val, p2, end-) end,
} end;
state4 = funct(cbs)
  tok = get-token();
  debug = "state4:
hack := pragma_list import_list expr %
expr := expr % ; exprns";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == ";" then
    tokens.pop();
    state5(new-cbs-4-5(cbs, tok, tok.span))
  else
    cbs.88-3(tok.span.start())
  end end
end;
3-88-2 = funct(cbs, p3, end-) cbs.88-2(p3, end-) end;
let new-cbs-3-4 future = (
  3-1-0 = funct(cbs, p1, p2, p3, start, end-)
    span = start.merge(end-);
    val = rule1(p1, p2, p3, span);
    case Thunk(case State4(new-cbs-3-4(cbs, val, start)))
  end;
  funct(cbs, val, start) {
    88-3: funct(end-) 3-88-2(cbs, val, end-) end,
    1-1: funct(p1, p2, end-) 3-1-0(cbs, val, p1, p2, start, end-) end,
  } end
).0;
3-0-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule0(p1, span);
  case Thunk(case State4(new-cbs-3-4(cbs, val, start)))
end;
let new-cbs-3-20 future = (
  3-11-0 = funct(cbs, p1, p2, p3, start, end-)
    span = start.merge(end-);
    val = rule11(p1, p2, p3, span);
    case Thunk(case State20(new-cbs-3-20(cbs, val, start)))
  end;
  3-16-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
    span = start.merge(end-);
    val = rule16(p1, p2, p3, p4, p5, span);
    case Thunk(case State20(new-cbs-3-20(cbs, val, start)))
  end;
  3-17-0 = funct(cbs, p1, p2, start, end-)
    span = start.merge(end-);
    val = rule17(p1, p2, span);
    case Thunk(case State20(new-cbs-3-20(cbs, val, start)))
  end;
  3-18-0 = funct(cbs, p1, p2, p3, p4, start, end-)
    span = start.merge(end-);
    val = rule18(p1, p2, p3, p4, span);
    case Thunk(case State20(new-cbs-3-20(cbs, val, start)))
  end;
  funct(cbs, val, start) {
    0-1: funct(end-) 3-0-0(cbs, val, start, end-) end,
    18-1: funct(p1, p2, p3, end-) 3-18-0(cbs, val, p1, p2, p3, start, end-) end,
    17-1: funct(p1, end-) 3-17-0(cbs, val, p1, start, end-) end,
    16-1: funct(p1, p2, p3, p4, end-) 3-16-0(cbs, val, p1, p2, p3, p4, start, end-) end,
    11-1: funct(p1, p2, end-) 3-11-0(cbs, val, p1, p2, start, end-) end,
  } end
).0;
3-10-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule10(p1, span);
  case Thunk(case State20(new-cbs-3-20(cbs, val, start)))
end;
new-cbs-3-111 = funct(cbs, val, start) {
  10-1: funct(end-) 3-10-0(cbs, val, start, end-) end,
} end;
3-27-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule27(p1, span);
  case Thunk(case State111(new-cbs-3-111(cbs, val, start)))
end;
new-cbs-3-112 = funct(cbs, val, start) {
  27-1: funct(end-) 3-27-0(cbs, val, start, end-) end,
} end;
3-12-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule12(p1, p2, span);
  case Thunk(case State20(new-cbs-3-20(cbs, val, start)))
end;
new-cbs-3-109 = funct(cbs, val, start) {
  12-1: funct(p1, end-) 3-12-0(cbs, val, p1, start, end-) end,
} end;
3-9-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule9(p1, span);
  case Thunk(case State20(new-cbs-3-20(cbs, val, start)))
end;
3-14-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule14(p1, p2, p3, p4, span);
  case Thunk(case State20(new-cbs-3-20(cbs, val, start)))
end;
new-cbs-3-103 = funct(cbs, val, start) {
  14-1: funct(p1, p2, p3, end-) 3-14-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
3-44-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule44(p1, span);
  case Thunk(case State103(new-cbs-3-103(cbs, val, start)))
end;
new-cbs-3-107 = funct(cbs, val, start) {
  44-1: funct(end-) 3-44-0(cbs, val, start, end-) end,
} end;
3-30-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule30(p1, span);
  case Thunk(case State107(new-cbs-3-107(cbs, val, start)))
end;
new-cbs-3-108 = funct(cbs, val, start) {
  30-1: funct(end-) 3-30-0(cbs, val, start, end-) end,
  9-1: funct(end-) 3-9-0(cbs, val, start, end-) end,
} end;
3-5-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule5(p1, span);
  case Thunk(case State108(new-cbs-3-108(cbs, val, start)))
end;
new-cbs-3-65 = funct(cbs, val, start) {
  5-1: funct(end-) 3-5-0(cbs, val, start, end-) end,
} end;
3-6-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule6(p1, span);
  case Thunk(case State108(new-cbs-3-108(cbs, val, start)))
end;
new-cbs-3-64 = funct(cbs, val, start) {
  6-1: funct(end-) 3-6-0(cbs, val, start, end-) end,
} end;
3-7-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule7(p1, span);
  case Thunk(case State108(new-cbs-3-108(cbs, val, start)))
end;
new-cbs-3-63 = funct(cbs, val, start) {
  7-1: funct(end-) 3-7-0(cbs, val, start, end-) end,
} end;
3-8-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule8(p1, span);
  case Thunk(case State108(new-cbs-3-108(cbs, val, start)))
end;
new-cbs-3-62 = funct(cbs, val, start) {
  8-1: funct(end-) 3-8-0(cbs, val, start, end-) end,
} end;
3-45-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule45(p1, p2, span);
  case Thunk(case State103(new-cbs-3-103(cbs, val, start)))
end;
3-15-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
  span = start.merge(end-);
  val = rule15(p1, p2, p3, p4, p5, span);
  case Thunk(case State20(new-cbs-3-20(cbs, val, start)))
end;
new-cbs-3-74 = funct(cbs, val, start) {
  15-1: funct(p1, p2, p3, p4, end-) 3-15-0(cbs, val, p1, p2, p3, p4, start, end-) end,
  45-1: funct(p1, end-) 3-45-0(cbs, val, p1, start, end-) end,
} end;
3-19-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule19(p1, span);
  case Thunk(case State20(new-cbs-3-20(cbs, val, start)))
end;
new-cbs-3-70 = funct(cbs, val, start) {
  19-1: funct(end-) 3-19-0(cbs, val, start, end-) end,
} end;
3-49-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule49(p1, p2, p3, span);
  case Thunk(case State70(new-cbs-3-70(cbs, val, start)))
end;
new-cbs-3-71 = funct(cbs, val, start) {
  49-1: funct(p1, p2, end-) 3-49-0(cbs, val, p1, p2, start, end-) end,
} end;
3-50-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule50(p1, p2, p3, span);
  case Thunk(case State70(new-cbs-3-70(cbs, val, start)))
end;
new-cbs-3-55 = funct(cbs, val, start) {
  50-1: funct(p1, p2, end-) 3-50-0(cbs, val, p1, p2, start, end-) end,
} end;
3-20-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule20(p1, p2, p3, span);
  case Thunk(case State20(new-cbs-3-20(cbs, val, start)))
end;
new-cbs-3-52 = funct(cbs, val, start) {
  20-1: funct(p1, p2, end-) 3-20-0(cbs, val, p1, p2, start, end-) end,
} end;
3-21-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule21(p1, p2, p3, span);
  case Thunk(case State20(new-cbs-3-20(cbs, val, start)))
end;
new-cbs-3-44 = funct(cbs, val, start) {
  21-1: funct(p1, p2, end-) 3-21-0(cbs, val, p1, p2, start, end-) end,
} end;
3-22-0 = funct(cbs, p1, start, end-)
  span = start.merge(end-);
  val = rule22(p1, span);
  case Thunk(case State20(new-cbs-3-20(cbs, val, start)))
end;
new-cbs-3-43 = funct(cbs, val, start) {
  22-1: funct(end-) 3-22-0(cbs, val, start, end-) end,
} end;
3-23-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule23(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State20(new-cbs-3-20(cbs, val, start)))
end;
new-cbs-3-35 = funct(cbs, val, start) {
  23-1: funct(p1, p2, p3, p4, p5, end-) 3-23-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
} end;
3-13-0 = funct(cbs, p1, p2, p3, p4, start, end-)
  span = start.merge(end-);
  val = rule13(p1, p2, p3, p4, span);
  case Thunk(case State20(new-cbs-3-20(cbs, val, start)))
end;
3-24-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule24(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State20(new-cbs-3-20(cbs, val, start)))
end;
3-25-0 = funct(cbs, p1, p2, p3, p4, p5, p6, p7, p8, start, end-)
  span = start.merge(end-);
  val = rule25(p1, p2, p3, p4, p5, p6, p7, p8, span);
  case Thunk(case State20(new-cbs-3-20(cbs, val, start)))
end;
new-cbs-3-29 = funct(cbs, val, start) {
  25-1: funct(p1, p2, p3, p4, p5, p6, p7, end-) 3-25-0(cbs, val, p1, p2, p3, p4, p5, p6, p7, start, end-) end,
  24-1: funct(p1, p2, p3, p4, p5, end-) 3-24-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
  13-1: funct(p1, p2, p3, end-) 3-13-0(cbs, val, p1, p2, p3, start, end-) end,
} end;
3-26-0 = funct(cbs, p1, p2, p3, p4, p5, p6, p7, p8, start, end-)
  span = start.merge(end-);
  val = rule26(p1, p2, p3, p4, p5, p6, p7, p8, span);
  case Thunk(case State20(new-cbs-3-20(cbs, val, start)))
end;
new-cbs-3-21 = funct(cbs, val, start) {
  26-1: funct(p1, p2, p3, p4, p5, p6, p7, end-) 3-26-0(cbs, val, p1, p2, p3, p4, p5, p6, p7, start, end-) end,
} end;
state3 = funct(cbs)
  tok = get-token();
  debug = "state3:
hack := pragma_list import_list % expr
expr := % expr ; exprns
expr := % exprns
exprns := % FUNCT unsafe_opt thisp_opt ( param_list ) expr END
exprns := % DO FOR letpat IN expr THEN expr END
exprns := % DO WHILE expr THEN expr END
exprns := % IF expr THEN expr elseb_opt END
exprns := % JS
exprns := % [ restexpr_list ]
exprns := % CASE id objlit
exprns := % objlit
objlit := % { keyval_list }
objlit := % ( expr_list )
exprns := % exprns ( expr_list )
exprns := % exprns field_sub
exprns := % exprns . phantom_id = exprns
exprns := % LET varpat FUTURE = exprns
exprns := % letpat = poly_opt exprns
letpat := % LET pattern
letpat := % varpat
varpat := % id
id := % END
id := % FOR
id := % WHILE
id := % ID
exprns := % DO UNSAFE expr END
exprns := % ! exprns
exprns := % exprns BINOP exprns
exprns := % string
string := % STRING
exprns := % id";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "FUNCT" then
    tokens.pop();
    state21(new-cbs-3-21(cbs, tok, tok.span))
  else if tok.type == "DO" then
    tokens.pop();
    state29(new-cbs-3-29(cbs, tok, tok.span))
  else if tok.type == "IF" then
    tokens.pop();
    state35(new-cbs-3-35(cbs, tok, tok.span))
  else if tok.type == "JS" then
    tokens.pop();
    state43(new-cbs-3-43(cbs, tok, tok.span))
  else if tok.type == "[" then
    tokens.pop();
    state44(new-cbs-3-44(cbs, tok, tok.span))
  else if tok.type == "CASE" then
    tokens.pop();
    state52(new-cbs-3-52(cbs, tok, tok.span))
  else if tok.type == "{" then
    tokens.pop();
    state55(new-cbs-3-55(cbs, tok, tok.span))
  else if tok.type == "(" then
    tokens.pop();
    state71(new-cbs-3-71(cbs, tok, tok.span))
  else if tok.type == "LET" then
    tokens.pop();
    state74(new-cbs-3-74(cbs, tok, tok.span))
  else if tok.type == "END" then
    tokens.pop();
    state62(new-cbs-3-62(cbs, tok, tok.span))
  else if tok.type == "FOR" then
    tokens.pop();
    state63(new-cbs-3-63(cbs, tok, tok.span))
  else if tok.type == "WHILE" then
    tokens.pop();
    state64(new-cbs-3-64(cbs, tok, tok.span))
  else if tok.type == "ID" then
    tokens.pop();
    state65(new-cbs-3-65(cbs, tok, tok.span))
  else if tok.type == "!" then
    tokens.pop();
    state109(new-cbs-3-109(cbs, tok, tok.span))
  else if tok.type == "STRING" then
    tokens.pop();
    state112(new-cbs-3-112(cbs, tok, tok.span))
  else UnexpectedTokenError(tok, debug)
  end end end end end end end end end end end end end end end end
end;
2-88-1 = funct(cbs, p2, p3, end-) cbs.88-1(p2, p3, end-) end;
new-cbs-2-3 = funct(cbs, val, start) {
  88-2: funct(p2, end-) 2-88-1(cbs, val, p2, end-) end,
} end;
2-86-0 = funct(cbs, start, end-)
  span = start.merge(end-);
  val = rule86(span);
  case Thunk(case State3(new-cbs-2-3(cbs, val, start)))
end;
2-87-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule87(p1, p2, span);
  case Thunk(case State3(new-cbs-2-3(cbs, val, start)))
end;
new-cbs-2-138 = funct(cbs, val, start) {
  87-1: funct(p1, end-) 2-87-0(cbs, val, p1, start, end-) end,
} end;
2-85-0 = funct(cbs, p1, p2, p3, p4, p5, start, end-)
  span = start.merge(end-);
  val = rule85(p1, p2, p3, p4, p5, span);
  case Thunk(case State138(new-cbs-2-138(cbs, val, start)))
end;
new-cbs-2-140 = funct(cbs, val, start) {
  85-1: funct(p1, p2, p3, p4, end-) 2-85-0(cbs, val, p1, p2, p3, p4, start, end-) end,
} end;
state2 = funct(cbs)
  tok = get-token();
  debug = "state2:
hack := pragma_list % import_list expr
import_list := % import import_list
import := % # IMPORT importpat FROM importrhs
import_list := %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "#" then
    tokens.pop();
    state140(new-cbs-2-140(cbs, tok, tok.span))
  else
    span = tok.span.start();
    2-86-0(cbs, span, span)
  end end
end;
state1 = funct(cbs)
  tok = get-token();
  debug = "state1:
module := hack %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "EOF" then
    cbs.89-1(tok.span.start())
  else UnexpectedTokenError(tok, debug)
  end end
end;
thunk = funct(val)
  do while let case Thunk(inner) = val then
    if let case State1(cbs) = inner then
      val = state1(cbs)
    else if let case State2(cbs) = inner then
      val = state2(cbs)
    else if let case State3(cbs) = inner then
      val = state3(cbs)
    else if let case State4(cbs) = inner then
      val = state4(cbs)
    else if let case State6(cbs) = inner then
      val = state6(cbs)
    else if let case State7(cbs) = inner then
      val = state7(cbs)
    else if let case State9(cbs) = inner then
      val = state9(cbs)
    else if let case State11(cbs) = inner then
      val = state11(cbs)
    else if let case State13(cbs) = inner then
      val = state13(cbs)
    else if let case State15(cbs) = inner then
      val = state15(cbs)
    else if let case State17(cbs) = inner then
      val = state17(cbs)
    else if let case State19(cbs) = inner then
      val = state19(cbs)
    else if let case State20(cbs) = inner then
      val = state20(cbs)
    else if let case State22(cbs) = inner then
      val = state22(cbs)
    else if let case State23(cbs) = inner then
      val = state23(cbs)
    else if let case State25(cbs) = inner then
      val = state25(cbs)
    else if let case State27(cbs) = inner then
      val = state27(cbs)
    else if let case State31(cbs) = inner then
      val = state31(cbs)
    else if let case State33(cbs) = inner then
      val = state33(cbs)
    else if let case State36(cbs) = inner then
      val = state36(cbs)
    else if let case State38(cbs) = inner then
      val = state38(cbs)
    else if let case State39(cbs) = inner then
      val = state39(cbs)
    else if let case State42(cbs) = inner then
      val = state42(cbs)
    else if let case State45(cbs) = inner then
      val = state45(cbs)
    else if let case State47(cbs) = inner then
      val = state47(cbs)
    else if let case State49(cbs) = inner then
      val = state49(cbs)
    else if let case State50(cbs) = inner then
      val = state50(cbs)
    else if let case State51(cbs) = inner then
      val = state51(cbs)
    else if let case State53(cbs) = inner then
      val = state53(cbs)
    else if let case State54(cbs) = inner then
      val = state54(cbs)
    else if let case State56(cbs) = inner then
      val = state56(cbs)
    else if let case State58(cbs) = inner then
      val = state58(cbs)
    else if let case State60(cbs) = inner then
      val = state60(cbs)
    else if let case State61(cbs) = inner then
      val = state61(cbs)
    else if let case State66(cbs) = inner then
      val = state66(cbs)
    else if let case State67(cbs) = inner then
      val = state67(cbs)
    else if let case State69(cbs) = inner then
      val = state69(cbs)
    else if let case State70(cbs) = inner then
      val = state70(cbs)
    else if let case State72(cbs) = inner then
      val = state72(cbs)
    else if let case State75(cbs) = inner then
      val = state75(cbs)
    else if let case State76(cbs) = inner then
      val = state76(cbs)
    else if let case State78(cbs) = inner then
      val = state78(cbs)
    else if let case State80(cbs) = inner then
      val = state80(cbs)
    else if let case State82(cbs) = inner then
      val = state82(cbs)
    else if let case State83(cbs) = inner then
      val = state83(cbs)
    else if let case State84(cbs) = inner then
      val = state84(cbs)
    else if let case State86(cbs) = inner then
      val = state86(cbs)
    else if let case State88(cbs) = inner then
      val = state88(cbs)
    else if let case State90(cbs) = inner then
      val = state90(cbs)
    else if let case State92(cbs) = inner then
      val = state92(cbs)
    else if let case State93(cbs) = inner then
      val = state93(cbs)
    else if let case State94(cbs) = inner then
      val = state94(cbs)
    else if let case State96(cbs) = inner then
      val = state96(cbs)
    else if let case State97(cbs) = inner then
      val = state97(cbs)
    else if let case State99(cbs) = inner then
      val = state99(cbs)
    else if let case State102(cbs) = inner then
      val = state102(cbs)
    else if let case State103(cbs) = inner then
      val = state103(cbs)
    else if let case State105(cbs) = inner then
      val = state105(cbs)
    else if let case State106(cbs) = inner then
      val = state106(cbs)
    else if let case State107(cbs) = inner then
      val = state107(cbs)
    else if let case State108(cbs) = inner then
      val = state108(cbs)
    else if let case State110(cbs) = inner then
      val = state110(cbs)
    else if let case State111(cbs) = inner then
      val = state111(cbs)
    else if let case State119(cbs) = inner then
      val = state119(cbs)
    else if let case State122(cbs) = inner then
      val = state122(cbs)
    else if let case State124(cbs) = inner then
      val = state124(cbs)
    else if let case State126(cbs) = inner then
      val = state126(cbs)
    else if let case State129(cbs) = inner then
      val = state129(cbs)
    else if let case State131(cbs) = inner then
      val = state131(cbs)
    else if let case State132(cbs) = inner then
      val = state132(cbs)
    else if let case State133(cbs) = inner then
      val = state133(cbs)
    else if let case State137(cbs) = inner then
      val = state137(cbs)
    else if let case State138(cbs) = inner then
      val = state138(cbs)
    else if let case State139(cbs) = inner then
      val = state139(cbs)
    else if let case State142(cbs) = inner then
      val = state142(cbs)
    else if let case State144(cbs) = inner then
      val = state144(cbs)
    else if let case State146(cbs) = inner then
      val = state146(cbs)
    else if let case State148(cbs) = inner then
      val = state148(cbs)
    else if let case State150(cbs) = inner then
      val = state150(cbs)
    else if let case State152(cbs) = inner then
      val = state152(cbs)
    else if let case State153(cbs) = inner then
      val = state153(cbs)
    else if let case State155(cbs) = inner then
      val = state155(cbs)
    else if let case State156(cbs) = inner then
      val = state156(cbs)
    else if let case State157(cbs) = inner then
      val = state157(cbs)
    else let case State161(cbs) = inner;
      val = state161(cbs)
    end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end end;
  end;
  val
end;
0-89-0 = funct(cbs, p1, end-) cbs.89-0(p1, end-) end;
new-cbs-0-1 = funct(cbs, val, start) {
  89-1: funct(end-) 0-89-0(cbs, val, start, end-) end,
} end;
rule88 = funct(p1, p2, p3, span) case Mod{thisp: null, pragmas: p1, imports: p2, expr: p3, span} end;
0-88-0 = funct(cbs, p1, p2, p3, start, end-)
  span = start.merge(end-);
  val = rule88(p1, p2, p3, span);
  case Thunk(case State1(new-cbs-0-1(cbs, val, start)))
end;
new-cbs-0-2 = funct(cbs, val, start) {
  88-1: funct(p1, p2, end-) 0-88-0(cbs, val, p1, p2, start, end-) end,
} end;
0-83-0 = funct(cbs, start, end-)
  span = start.merge(end-);
  val = rule83(span);
  case Thunk(case State2(new-cbs-0-2(cbs, val, start)))
end;
0-84-0 = funct(cbs, p1, p2, start, end-)
  span = start.merge(end-);
  val = rule84(p1, p2, span);
  case Thunk(case State2(new-cbs-0-2(cbs, val, start)))
end;
new-cbs-0-156 = funct(cbs, val, start) {
  84-1: funct(p1, end-) 0-84-0(cbs, val, p1, start, end-) end,
} end;
0-82-0 = funct(cbs, p1, p2, p3, p4, p5, p6, start, end-)
  span = start.merge(end-);
  val = rule82(p1, p2, p3, p4, p5, p6, span);
  case Thunk(case State156(new-cbs-0-156(cbs, val, start)))
end;
new-cbs-0-158 = funct(cbs, val, start) {
  82-1: funct(p1, p2, p3, p4, p5, end-) 0-82-0(cbs, val, p1, p2, p3, p4, p5, start, end-) end,
} end;
state0 = funct(cbs)
  tok = get-token();
  debug = "state0:
module := % hack
hack := % pragma_list import_list expr
pragma_list := % pragma pragma_list
pragma := % {- # LANGUAGE id # -}
pragma_list := %";
  if tok == undef then
    UnexpectedEOFError(debug)
  else if tok.type == "{-" then
    tokens.pop();
    state158(new-cbs-0-158(cbs, tok, tok.span))
  else
    span = tok.span.start();
    0-83-0(cbs, span, span)
  end end
end;
thunk(state0({
  89-0: funct(mod, end-) case Ok(mod) end,
}))
end;