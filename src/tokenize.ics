#import {re} from "std:regex"
#import {s} from "std:strings"

#import {get-line-number-funcs} from "line-numbers"


(* Unicode character classes Lu, Ll, Lt, Lm, Lo, and Nd, plus _ and - *)
IDCHAR = "[-0-9A-Z_a-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-ي٠-٩ٮٯٱ-ۓەۥۦۮ-ۼۿܐܒ-ܯݍ-ޥޱ߀-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢴऄ-हऽॐक़-ॡ०-९ॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡ০-ৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼੦-੯ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡ૦-૯ૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡ୦-୯ୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐ௦-௯అ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౠౡ౦-౯ಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡ೦-೯ೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൟ-ൡ൦-൯ൺ-ൿඅ-ඖක-නඳ-රලව-ෆ෦-෯ก-ะาำเ-ๆ๐-๙ກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆ໐-໙ໜ-ໟༀ༠-༩ཀ-ཇཉ-ཬྈ-ྌက-ဪဿ-၉ၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎ႐-႙Ⴀ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛱ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜ០-៩᠐-᠙ᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞ᥆-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉ᧐-᧙ᨀ-ᨖᨠ-ᩔ᪀-᪉᪐-᪙ᪧᬅ-ᬳᭅ-ᭋ᭐-᭙ᮃ-ᮠᮮ-ᯥᰀ-ᰣ᱀-᱉ᱍ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎↃↄⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々〆〱-〵〻〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿕ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘫꙀ-ꙮꙿ-ꚝꚠ-ꛥꜗ-ꜟꜢ-ꞈꞋ-ꞭꞰ-ꞷꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳ꣐-꣙ꣲ-ꣷꣻꣽ꤀-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏ-꧙ꧠ-ꧤꧦ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋ꩐-꩙ꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭥꭰ-ꯢ꯰-꯹가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼ０-９Ａ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ𐀀-𐀋𐀍-𐀦𐀨-𐀺𐀼𐀽𐀿-𐁍𐁐-𐁝𐂀-𐃺𐊀-𐊜𐊠-𐋐𐌀-𐌟𐌰-𐍀𐍂-𐍉𐍐-𐍵𐎀-𐎝𐎠-𐏃𐏈-𐏏𐐀-𐒝𐒠-𐒩𐔀-𐔧𐔰-𐕣𐘀-𐜶𐝀-𐝕𐝠-𐝧𐠀-𐠅𐠈𐠊-𐠵𐠷𐠸𐠼𐠿-𐡕𐡠-𐡶𐢀-𐢞𐣠-𐣲𐣴𐣵𐤀-𐤕𐤠-𐤹𐦀-𐦷𐦾𐦿𐨀𐨐-𐨓𐨕-𐨗𐨙-𐨳𐩠-𐩼𐪀-𐪜𐫀-𐫇𐫉-𐫤𐬀-𐬵𐭀-𐭕𐭠-𐭲𐮀-𐮑𐰀-𐱈𐲀-𐲲𐳀-𐳲𑀃-𑀷𑁦-𑁯𑂃-𑂯𑃐-𑃨𑃰-𑃹𑄃-𑄦𑄶-𑄿𑅐-𑅲𑅶𑆃-𑆲𑇁-𑇄𑇐-𑇚𑇜𑈀-𑈑𑈓-𑈫𑊀-𑊆𑊈𑊊-𑊍𑊏-𑊝𑊟-𑊨𑊰-𑋞𑋰-𑋹𑌅-𑌌𑌏𑌐𑌓-𑌨𑌪-𑌰𑌲𑌳𑌵-𑌹𑌽𑍐𑍝-𑍡𑒀-𑒯𑓄𑓅𑓇𑓐-𑓙𑖀-𑖮𑗘-𑗛𑘀-𑘯𑙄𑙐-𑙙𑚀-𑚪𑛀-𑛉𑜀-𑜙𑜰-𑜹𑢠-𑣩𑣿𑫀-𑫸𒀀-𒎙𒒀-𒕃𓀀-𓐮𔐀-𔙆𖠀-𖨸𖩀-𖩞𖩠-𖩩𖫐-𖫭𖬀-𖬯𖭀-𖭃𖭐-𖭙𖭣-𖭷𖭽-𖮏𖼀-𖽄𖽐𖾓-𖾟𛀀𛀁𛰀-𛱪𛱰-𛱼𛲀-𛲈𛲐-𛲙𝐀-𝑔𝑖-𝒜𝒞𝒟𝒢𝒥𝒦𝒩-𝒬𝒮-𝒹𝒻𝒽-𝓃𝓅-𝔅𝔇-𝔊𝔍-𝔔𝔖-𝔜𝔞-𝔹𝔻-𝔾𝕀-𝕄𝕆𝕊-𝕐𝕒-𝚥𝚨-𝛀𝛂-𝛚𝛜-𝛺𝛼-𝜔𝜖-𝜴𝜶-𝝎𝝐-𝝮𝝰-𝞈𝞊-𝞨𝞪-𝟂𝟄-𝟋𝟎-𝟿𞠀-𞣄𞸀-𞸃𞸅-𞸟𞸡𞸢𞸤𞸧𞸩-𞸲𞸴-𞸷𞸹𞸻𞹂𞹇𞹉𞹋𞹍-𞹏𞹑𞹒𞹔𞹗𞹙𞹛𞹝𞹟𞹡𞹢𞹤𞹧-𞹪𞹬-𞹲𞹴-𞹷𞹹-𞹼𞹾𞺀-𞺉𞺋-𞺛𞺡-𞺣𞺥-𞺩𞺫-𞺻𠀀-𪛖𪜀-𫜴𫝀-𫠝𫠠-𬺡丽-𪘀]";


binops = new-set(s.split("== != < > <= >= - + * -. +. *. / % ** ^ | & << >> >>> && || +' <' >' <=' >='", " "));
literals = new-set(s.split("( ) { } [ ] : , . = ; ! - # {- -}", " "));

special = sorted(new-set([...binops, ...literals]), funct (a, b) s.len(b) - s.len(a) end);

do unsafe
WS-RE = re.new("^\s+");
PID-RE = re.new("^@[@\w\-]+");
JS-RE = re.new("^`[^`]*`");
STR-RE = re.new(R"(^"[^"]*")");
ID-RE = re.new-with-flags("^" +' IDCHAR +' "+", "u");
LIT-RE = re.new("^(?:" +'
    map(special, funct(lit) "\" +' s.replace(lit, "", "\") end).join("|")
    +' ")");
POLY-RE = re.new("^\$+");
end;


wordset = new-set(s.split(
    "do if while for in then else end funct let future mut case import unsafe from language", " "));



let Span future = funct(fname, source, pos, len) {
    fname, source, pos,
    pos2: pos + len,

    merge: funct this (other)
        if other != null then
            pos = min(this.pos, other.pos);
            pos2 = max(this.pos2, other.pos2);
            Span(this.fname, this.source, pos, pos2 - pos)
        else
            this
        end
    end,

    start: funct this ()
        Span(this.fname, this.source, this.pos, 0)
    end,

    text: funct this ()
        s.slice(this.source, this.pos, this.pos2)
    end,

    print: funct this (message)
        MAXLINELEN = 80;
        HALFLINE = int(MAXLINELEN/2);

        let {fname, source, pos, pos2} = this;
        funcs = get-line-number-funcs(source);

        start = funcs.line-start(pos);
        line-start = start;

        let (end_, lineno) = funcs.line-end-and-count(start);

        (* Find an 80 char section of the line around the point of interest to display *)
        temp = min(pos2, pos + HALFLINE);
        if temp < (start + MAXLINELEN).0 then
            end_ = min(end_, start + MAXLINELEN);
        else if pos >= (end_ - MAXLINELEN).0 then
            start = max(start, end_ - MAXLINELEN);
        else
            mid = int((pos + temp).0 / 2);
            start = max(start, mid - HALFLINE);
            end_ = min(end_, start + MAXLINELEN);
        end end;

        pos2 = min(pos2, end_);
        col = pos - line-start + 1; (* column numbering starts at 1 *)
        snippet = s.slice(source, start, end_);
        markers =
            s.repeat(" ", pos - start) +'
            "^" +' s.repeat("-", max(pos2 - pos - 1, 0)) +'
            s.repeat(" ", end_ - pos2);

        fname +' ":" +' lineno +' ":" +' col +' ": " +' message +' NL +' snippet +' NL +' markers
    end,
} end;

Token = funct(type, val, span) {type, val, span} end;

tokenize = funct(fname, source, include-comments)
    results = eml();
    error = null;

    src = source;
    pos = 0;

    do while error == null && (s.len(src) > 0).0 then
        val = null;
        if s.startsWith(src, "(*") then
            level = 1;
            p1 = 2;
            p2 = -1; (* will be initialized in loop *)

            do while level > 0 then
                temp = s.indexOf(s.sliceE(src, p1), "*)");
                if temp == -1 then
                    start = pos + p1 - 2;
                    span = Span(fname, source, start, s.len(source) - start);
                    error = span.print("SyntaxError: Unclosed comment");
                    p2 = s.len(src); level = 0;
                else
                    p2 = p1 + temp + 2;
                    level = level + s.split(s.slice(src, p1, p2), "(*").length - 2;
                    p1 = p2;
                end;
            end;

            type = "COMMENT";
            m = (s.slice(src, 0, p2));
        else if s.startsWith(src, R"(R")") then
            delim-end = s.indexOf(src, "(");
            if delim-end == -1 then
                error = Span(fname, source, pos, s.len(source) - pos).print("SyntaxError: Unclosed raw string delimiter");
                type = "WHITESPACE";
                m = ("");
            else
                delim = ")" +' s.slice(src, 2, delim-end) +' s.QUOTE;
                string-start = delim-end + 1; (* opening paren takes 1 *)
                string-end = s.indexOf(src, delim);
                if string-end == -1 then
                    error = Span(
                        fname, source, string-start, s.len(source) - string-start
                    ).print("SyntaxError: Unclosed raw string");
                    type = "WHITESPACE";
                    m = ("");
                else
                    type = "STRING";
                    m = (s.slice(src, 0, string-end + s.len(delim)));
                    val = s.slice(src, string-start, string-end);
                end;
            end;
        else if m = s.match(src, WS-RE); m != null then
            type = "WHITESPACE";
        else if m = s.match(src, JS-RE); m != null then
            type = "JS";
        else if m = s.match(src, STR-RE); m != null then
            type = "STRING";
            val = s.slice(m.0, 1, -1)
        else if m = s.match(src, ID-RE); m != null && (m.0 != "-").0 then
            type = "ID";
            if wordset.has(m.0) then
                type = s.toUpperCase(m.0);
            end;

            (* Check if token is all dashes, in which case it wasn't a valid identifier after all *)
            if m.0 == s.repeat("-", s.len(m.0)) then
                type = "ERROR";
            end;

        else if m = s.match(src, PID-RE); m != null then
            type = "PHANTOM_ID";
        else if m = s.match(src, LIT-RE); m != null then
            type = m.0;
            if binops.has(m.0) && !literals.has(m.0) then
                type = "BINOP";
            end;
        else if m = s.match(src, POLY-RE); m != null then
            type = "POLY";
        else
            type = "ERROR";
            m = (src)
        end end end end end end end end end;

        token-text = m.0;
        token-start = pos;
        token-len = s.len(token-text);
        if val == null then
            val = token-text;
        end;

        pos = pos + token-len;
        src = s.sliceE(src, token-len);

        if type != "WHITESPACE" && (type != "COMMENT" || include-comments).0 then
            (* automatic semicolon deletion *)
            if token-text == "end" || (token-text == "else").0 then
                do while last = results.last(); last != _ && (last.type == ";").0 then
                    results.pop();
                end;
            end;

            token = Token(type, val, Span(fname, source, token-start, token-len));
            results.push(token);

            if type == "ERROR" then
                error = token.span.print("SyntaxError: Invalid token");
            end;
        end;
    end;

    (* automatic semicolon deletion *)
    do while last = results.last(); last != _ && (last.type == ";").0 then
        results.pop();
    end;
    results.push(Token("EOF", "", Span(fname, source, s.len(source), 0)));

    (* reverse token list so we can pop efficiently *)
    tokens = eml();
    do while tok = results.pop(); tok != _ then
        tokens.push(tok);
    end;

    if error != null then
        case Err(error)
    else
        case Ok(tokens)
    end
end;
